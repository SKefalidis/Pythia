[
    {
        "question": "Which architect of Marine Corps Air Station Kaneohe Bay was also tenant of New Sanno hotel /'",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Marine_Corps_Air_Station_Kaneohe_Bay> <http://dbpedia.org/property/architect> ?uri. <http://dbpedia.org/resource/New_Sanno_Hotel> <http://dbpedia.org/ontology/tenant> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Marine_Corps_Air_Station_Kaneohe_Bay",
            "http://dbpedia.org/resource/New_Sanno_Hotel"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Marine_Corps_Air_Station_Kaneohe_Bay> -> ARCHITECT",
            "<http://dbpedia.org/resource/New_Sanno_Hotel> -> TENANT"
        ],
        "paths": "<http://dbpedia.org/resource/Marine_Corps_Air_Station_Kaneohe_Bay> -> ARCHITECT, <http://dbpedia.org/resource/New_Sanno_Hotel> -> TENANT",
        "generated_query": "SELECT DISTINCT ?architect WHERE {\n  <http://dbpedia.org/resource/Marine_Corps_Air_Station_Kaneohe_Bay> <http://dbpedia.org/property/architect> ?architect .\n  <http://dbpedia.org/resource/New_Sanno_Hotel> <http://dbpedia.org/ontology/tenant> ?architect .\n}"
    },
    {
        "question": "Which sects people are part of local political parties which fall under the International Muslim Brotherhood?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/international> <http://dbpedia.org/resource/Muslim_Brotherhood> . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty>}",
        "entities": [
            "http://dbpedia.org/resource/Muslim_Brotherhood"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Muslim_Brotherhood> -> LOCAL_POLITICAL_PARTY -> SECT"
        ],
        "paths": "<http://dbpedia.org/resource/Muslim_Brotherhood> -> LOCAL_POLITICAL_PARTY -> SECT",
        "generated_query": "SELECT DISTINCT ?person WHERE {\n  ?person <http://dbpedia.org/property/party> ?party .\n  ?party <http://dbpedia.org/ontology/internationalAffiliation> <http://dbpedia.org/resource/Muslim_Brotherhood> .\n}"
    },
    {
        "question": "List common systems are developed by of the Google Videos and written by of the Google Web Toolkit ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Google_Videos> <http://dbpedia.org/property/developer> ?uri. <http://dbpedia.org/resource/Google_Web_Toolkit> <http://dbpedia.org/ontology/author> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Google_Video",
            "http://dbpedia.org/resource/Google_Web_Toolkit"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Google_Video> -> <http://dbpedia.org/resource/Google_Web_Toolkit>"
        ],
        "paths": "<http://dbpedia.org/resource/Google_Video> -> <http://dbpedia.org/resource/Google_Web_Toolkit>",
        "generated_query": "SELECT DISTINCT ?system WHERE {\n  ?system <http://dbpedia.org/property/developer> <http://dbpedia.org/resource/Google> .\n  ?system <http://dbpedia.org/property/author> <http://dbpedia.org/resource/Google> .\n}"
    },
    {
        "question": "For which games are Sam Loyd and Eric Schiller both famous?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sam_Loyd> <http://dbpedia.org/ontology/knownFor> ?uri. <http://dbpedia.org/resource/Eric_Schiller> <http://dbpedia.org/ontology/knownFor> ?uri . }",
        "entities": [
            "http://dbpedia.org/resource/Eric_Schiller",
            "http://dbpedia.org/resource/Sam_Loyd"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Sam_Loyd> -> <http://dbpedia.org/resource/Eric_Schiller>"
        ],
        "paths": "<http://dbpedia.org/resource/Sam_Loyd> -> <http://dbpedia.org/resource/Eric_Schiller>",
        "generated_query": "SELECT DISTINCT ?game WHERE {\n  <http://dbpedia.org/resource/Sam_Loyd> <http://dbpedia.org/ontology/knownFor> ?game .\n  <http://dbpedia.org/resource/Eric_Schiller> <http://dbpedia.org/ontology/knownFor> ?game .\n}"
    },
    {
        "question": "Is Peter Piper Pizza in the pizza industry?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/Peter_Piper_Pizza> <http://dbpedia.org/ontology/industry> <http://dbpedia.org/resource/Pizza> }",
        "entities": [
            "http://dbpedia.org/resource/Peter_Piper_Pizza"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Peter_Piper_Pizza> -> \"industry\""
        ],
        "paths": "<http://dbpedia.org/resource/Peter_Piper_Pizza> -> \"industry\"",
        "generated_query": "ASK WHERE {\n  {\n    <http://dbpedia.org/resource/Peter_Piper_Pizza> <http://dbpedia.org/ontology/industry> <http://dbpedia.org/resource/Pizza> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Peter_Piper_Pizza> <http://dbpedia.org/property/industry> ?industryLiteral .\n    FILTER(CONTAINS(LCASE(STR(?industryLiteral)), \"pizza\"))\n  }\n}"
    },
    {
        "question": "Name the artist who made Dream Dancing and is often associated with Joe Pass?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Joe_Pass> <http://dbpedia.org/ontology/associatedBand> ?uri. <http://dbpedia.org/resource/Dream_Dancing_(album)> <http://dbpedia.org/property/artist> ?uri . }",
        "entities": [
            "http://dbpedia.org/resource/Dream_Dancing_(Cole_Porter_song)",
            "http://dbpedia.org/resource/Joe_Pass"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Dream_Dancing_(Cole_Porter_song)> -> <http://dbpedia.org/resource/Joe_Pass>"
        ],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?artist WHERE {\n  {\n    <http://dbpedia.org/resource/Dream_Dancing_(Cole_Porter_song)> ?p1 ?artist .\n  } UNION {\n    ?artist ?p1 <http://dbpedia.org/resource/Dream_Dancing_(Cole_Porter_song)> .\n  }\n  {\n    <http://dbpedia.org/resource/Joe_Pass> ?p2 ?artist .\n  } UNION {\n    ?artist ?p2 <http://dbpedia.org/resource/Joe_Pass> .\n  }\n}"
    },
    {
        "question": "Who is the office holder with deputies as Neil Brown and Andrew Peacock?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/deputy> <http://dbpedia.org/resource/Neil_Brown_(Australian_politician)> . ?uri <http://dbpedia.org/property/deputy> <http://dbpedia.org/resource/Andrew_Peacock> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
        "entities": [
            "http://dbpedia.org/resource/Neil_Brown_(Australian_politician)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Neil_Brown_(Australian_politician)> -> OFFICE_HOLDER"
        ],
        "paths": "<http://dbpedia.org/resource/Neil_Brown_(Australian_politician)> -> OFFICE_HOLDER",
        "generated_query": "SELECT DISTINCT ?officeHolder WHERE {\n  ?officeHolder <http://dbpedia.org/ontology/deputy> <http://dbpedia.org/resource/Neil_Brown_(Australian_politician)> .\n  ?officeHolder <http://dbpedia.org/ontology/deputy> <http://dbpedia.org/resource/Andrew_Peacock> .\n}"
    },
    {
        "question": "Where did these popular aeroplanes - Focke Wulf 260 and Start+Flug H 101 originate?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Focke-Wulf_Fw_260> <http://dbpedia.org/property/nationalOrigin> ?uri. <http://dbpedia.org/resource/Start_+_Flug_H-101> <http://dbpedia.org/property/nationalOrigin> ?uri . }",
        "entities": [
            "http://dbpedia.org/resource/Start_+_Flug_H-101",
            "http://dbpedia.org/resource/Focke-Wulf_Fw_260",
            "http://dbpedia.org/resource/Airplane"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Start_+_Flug_H-101> -> <http://dbpedia.org/resource/Airplane> -> \"origin\"",
            "<http://dbpedia.org/resource/Focke-Wulf_Fw_260> -> <http://dbpedia.org/resource/Airplane> -> \"origin\""
        ],
        "paths": "<http://dbpedia.org/resource/Start_+_Flug_H-101> -> <http://dbpedia.org/resource/Airplane> -> \"origin\", <http://dbpedia.org/resource/Focke-Wulf_Fw_260> -> <http://dbpedia.org/resource/Airplane> -> \"origin\"",
        "generated_query": "SELECT DISTINCT ?airplane ?origin WHERE {\n  VALUES ?airplane {\n    <http://dbpedia.org/resource/Start_+_Flug_H-101>\n    <http://dbpedia.org/resource/Focke-Wulf_Fw_260>\n  }\n  OPTIONAL { ?airplane <http://dbpedia.org/ontology/origin> ?origin . }\n  OPTIONAL { ?airplane <http://dbpedia.org/property/nationalOrigin> ?origin . }\n  FILTER(BOUND(?origin))\n}"
    },
    {
        "question": "Which television show 's producer is Stephen E. Ambrose and written by Erik Jendresen?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/producer> <http://dbpedia.org/resource/Stephen_E._Ambrose> . ?uri <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Erik_Jendresen>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "entities": [
            "http://dbpedia.org/resource/Stephen_E._Ambrose",
            "http://dbpedia.org/resource/Erik_Jendresen"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Stephen_E._Ambrose> -> <http://dbpedia.org/resource/Erik_Jendresen>"
        ],
        "paths": "<http://dbpedia.org/resource/Stephen_E._Ambrose> -> <http://dbpedia.org/resource/Erik_Jendresen>",
        "generated_query": "SELECT DISTINCT ?show WHERE {\n  ?show <http://dbpedia.org/property/producer> <http://dbpedia.org/resource/Stephen_E._Ambrose> .\n  ?show <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Erik_Jendresen> .\n}"
    },
    {
        "question": "Who created the Women in the Garden and also the L'Enfant a la tasse ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Women_in_the_Garden> <http://dbpedia.org/property/artist> ?uri. <http://dbpedia.org/resource/L'Enfant_a_la_tasse> <http://dbpedia.org/property/artist> ?uri . }",
        "entities": [
            "http://dbpedia.org/resource/Women_in_the_Garden",
            "http://dbpedia.org/resource/L'Enfant_a_la_tasse"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Women_in_the_Garden> -> <http://dbpedia.org/resource/L'Enfant_a_la_tasse>"
        ],
        "paths": "<http://dbpedia.org/resource/Women_in_the_Garden> -> <http://dbpedia.org/resource/L'Enfant_a_la_tasse>",
        "generated_query": "SELECT DISTINCT ?creator WHERE {\n  <http://dbpedia.org/resource/Women_in_the_Garden> <http://dbpedia.org/property/artist> ?creator .\n  <http://dbpedia.org/resource/L'Enfant_a_la_tasse> <http://dbpedia.org/property/artist> ?creator .\n}"
    },
    {
        "question": "Which famous horserace has seen both Fergie sutherland and the illustrious War of Attrition?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/War_Of_Attrition_(horse)> <http://dbpedia.org/property/race> ?uri. <http://dbpedia.org/resource/Fergie_Sutherland> <http://dbpedia.org/property/race> ?uri . }",
        "entities": [
            "http://dbpedia.org/resource/Horse_racing",
            "http://dbpedia.org/resource/Fergie_Sutherland",
            "http://dbpedia.org/resource/War_of_Attrition_(horse)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Horse_racing> -> <http://dbpedia.org/resource/War_of_Attrition_(horse)>",
            "<http://dbpedia.org/resource/Horse_racing> -> <http://dbpedia.org/resource/Fergie_Sutherland>"
        ],
        "paths": "<http://dbpedia.org/resource/Horse_racing> -> <http://dbpedia.org/resource/War_of_Attrition_(horse)>, <http://dbpedia.org/resource/Horse_racing> -> <http://dbpedia.org/resource/Fergie_Sutherland>",
        "generated_query": "SELECT DISTINCT ?race WHERE {\n  {\n    <http://dbpedia.org/resource/Fergie_Sutherland> <http://dbpedia.org/ontology/race> ?race .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Fergie_Sutherland> <http://dbpedia.org/property/race> ?race .\n  }\n  \n  {\n    ?race <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/War_of_Attrition_(horse)> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/War_of_Attrition_(horse)> <http://dbpedia.org/ontology/wikiPageWikiLink> ?race .\n  }\n  \n  ?race <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Horse_racing> .\n}"
    },
    {
        "question": "Tell me the name of the Prime Time Entertainment Network's TV show whose Artist is Christopher Franke ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/artist> <http://dbpedia.org/resource/Christopher_Franke> . ?uri <http://dbpedia.org/ontology/network> <http://dbpedia.org/resource/Prime_Time_Entertainment_Network>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "entities": [
            "http://dbpedia.org/resource/Christopher_Franke",
            "http://dbpedia.org/resource/Prime_Time_Entertainment_Network"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Prime_Time_Entertainment_Network> -> <http://dbpedia.org/resource/Christopher_Franke> -> \"name\""
        ],
        "paths": "<http://dbpedia.org/resource/Prime_Time_Entertainment_Network> -> <http://dbpedia.org/resource/Christopher_Franke> -> \"name\"",
        "generated_query": "SELECT DISTINCT ?name WHERE {\n  ?show <http://dbpedia.org/property/network> <http://dbpedia.org/resource/Prime_Time_Entertainment_Network> .\n  ?show <http://dbpedia.org/property/artist> <http://dbpedia.org/resource/Christopher_Franke> .\n  ?show <http://xmlns.com/foaf/0.1/name> ?name .\n}"
    },
    {
        "question": "How many other battles have the military person fought whose one of the battles is World War II ?",
        "gold_query": " SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/property/battles> <http://dbpedia.org/resource/World_War_II> . ?x <http://dbpedia.org/property/battles> ?uri }",
        "entities": [
            "http://dbpedia.org/resource/World_War_II"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/World_War_II> -> MILITARY_PERSON -> \"number of battles fought\""
        ],
        "paths": "<http://dbpedia.org/resource/World_War_II> -> MILITARY_PERSON -> \"number of battles fought\"",
        "generated_query": "SELECT ?military_person (COUNT(DISTINCT ?other_battle) AS ?other_battles_count)\nWHERE {\n  {\n    ?military_person <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/World_War_II> .\n  }\n  UNION\n  {\n    ?military_person <http://dbpedia.org/property/battles> <http://dbpedia.org/resource/World_War_II> .\n  }\n  \n  {\n    ?military_person <http://dbpedia.org/ontology/battle> ?other_battle .\n  }\n  UNION\n  {\n    ?military_person <http://dbpedia.org/property/battles> ?other_battle .\n  }\n  \n  FILTER(?other_battle != <http://dbpedia.org/resource/World_War_II>)\n}\nGROUP BY ?military_person"
    },
    {
        "question": "Whose network's parent organisation is Comcast?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/parentOrganisation> <http://dbpedia.org/resource/Comcast> . ?uri <http://dbpedia.org/ontology/network> ?x  . }",
        "entities": [
            "http://dbpedia.org/resource/Comcast"
        ],
        "classes": [],
        "relations": [
            "NETWORK -> PARENT_ORGANISATION -> <http://dbpedia.org/resource/Comcast>"
        ],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?network WHERE {\n  ?network <http://dbpedia.org/ontology/parentOrganisation> <http://dbpedia.org/resource/Comcast> .\n}"
    },
    {
        "question": "Is William H Blanchard buried in Colorado?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/William_H._Blanchard> <http://dbpedia.org/property/placeofburial> <http://dbpedia.org/resource/Colorado> }",
        "entities": [
            "http://dbpedia.org/resource/Colorado",
            "http://dbpedia.org/resource/William_H._Blanchard"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/William_H._Blanchard> -> <http://dbpedia.org/resource/Colorado>"
        ],
        "paths": "<http://dbpedia.org/resource/William_H._Blanchard> -> <http://dbpedia.org/resource/Colorado>",
        "generated_query": "ASK WHERE {\n  {\n    <http://dbpedia.org/resource/William_H._Blanchard> <http://dbpedia.org/ontology/restingPlace> <http://dbpedia.org/resource/Colorado> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/William_H._Blanchard> <http://dbpedia.org/property/placeofburial> <http://dbpedia.org/resource/Colorado> .\n  }\n}"
    },
    {
        "question": "Which cport of Vishwajyot High School is also the genere of Battle chess ",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Battle_Chess> <http://dbpedia.org/property/genre> ?uri. <http://dbpedia.org/resource/Vishwajyot_High_School> <http://dbpedia.org/ontology/sport> ?uri} ",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?cport WHERE {\n  <http://example.org/resource/Vishwajyot_High_School> <http://example.org/ontology/cport> ?cport .\n  <http://example.org/resource/Battle_Chess> <http://example.org/ontology/genre> ?cport .\n}"
    },
    {
        "question": "In which state is the Channel district?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Channel_District> <http://dbpedia.org/ontology/state> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Channel_Country"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Channel_Country> -> \"state\""
        ],
        "paths": "<http://dbpedia.org/resource/Channel_Country> -> \"state\"",
        "generated_query": "SELECT DISTINCT ?state WHERE {\n  ?place <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Channel_Country> .\n  ?place <http://dbpedia.org/property/state> ?state .\n}"
    },
    {
        "question": "Who was in the missions of Apollo 11 and Gemini 8?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/mission> <http://dbpedia.org/resource/Apollo_11> . ?uri <http://dbpedia.org/property/mission> <http://dbpedia.org/resource/Gemini_8> . }",
        "entities": [
            "http://dbpedia.org/resource/Gemini_8",
            "http://dbpedia.org/resource/Apollo_11"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Gemini_8> -> member",
            "<http://dbpedia.org/resource/Apollo_11> -> member"
        ],
        "paths": "<http://dbpedia.org/resource/Gemini_8> -> member, <http://dbpedia.org/resource/Apollo_11> -> member",
        "generated_query": "SELECT DISTINCT ?crew WHERE {\n  <http://dbpedia.org/resource/Apollo_11> <http://dbpedia.org/property/crewMembers> ?crew .\n  <http://dbpedia.org/resource/Gemini_8> <http://dbpedia.org/property/crewMembers> ?crew .\n}"
    },
    {
        "question": "What is the total number of other tenant of the stadia whose one of the tenant is Raptors 905?",
        "gold_query": " SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/ontology/tenant> <http://dbpedia.org/resource/Raptors_905> . ?x <http://dbpedia.org/ontology/tenant> ?uri }",
        "entities": [
            "http://dbpedia.org/resource/Stadion_(unit)",
            "http://dbpedia.org/resource/Raptors_905"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Raptors_905> -> <http://dbpedia.org/resource/Stadion_(unit)>"
        ],
        "paths": "<http://dbpedia.org/resource/Raptors_905> -> <http://dbpedia.org/resource/Stadion_(unit)>",
        "generated_query": "SELECT (COUNT(DISTINCT ?tenant) AS ?totalOtherTenants)\nWHERE {\n  ?stadium <http://dbpedia.org/ontology/tenant> <http://dbpedia.org/resource/Raptors_905> .\n  ?stadium <http://dbpedia.org/ontology/tenant> ?tenant .\n  FILTER(?tenant != <http://dbpedia.org/resource/Raptors_905>)\n}"
    },
    {
        "question": "Where can one find the Dzogchen Ponolop Rinpoche?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dzogchen_Ponlop_Rinpoche> <http://dbpedia.org/property/location> ?uri } ",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT ?location WHERE {\n} LIMIT 10"
    },
    {
        "question": "Who is the stockholder of the road tunnels operated by the Massachusetts Department of Transportation?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/operator> <http://dbpedia.org/resource/Massachusetts_Department_of_Transportation> . ?x <http://dbpedia.org/property/owner> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RoadTunnel>}",
        "entities": [
            "http://dbpedia.org/resource/Massachusetts_Department_of_Transportation"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Massachusetts_Department_of_Transportation> -> ROAD_TUNNELS -> STOCKHOLDER"
        ],
        "paths": "<http://dbpedia.org/resource/Massachusetts_Department_of_Transportation> -> ROAD_TUNNELS -> STOCKHOLDER",
        "generated_query": "SELECT DISTINCT ?stockholder WHERE {\n  ?tunnel <http://dbpedia.org/ontology/operatedBy> <http://dbpedia.org/resource/Massachusetts_Department_of_Transportation> .\n  {\n    ?tunnel <http://dbpedia.org/property/owner> ?stockholder .\n  }\n  UNION\n  {\n    ?tunnel <http://dbpedia.org/ontology/owner> ?stockholder .\n  }\n}"
    },
    {
        "question": "What are the awards won by the film director of Saraband ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Saraband> <http://dbpedia.org/ontology/director> ?x . ?x <http://dbpedia.org/property/awards> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Saraband"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Saraband> -> DIRECTOR -> \"awards\""
        ],
        "paths": "<http://dbpedia.org/resource/Saraband> -> DIRECTOR -> \"awards\"",
        "generated_query": "SELECT DISTINCT ?award WHERE {\n  <http://dbpedia.org/resource/Saraband> <http://dbpedia.org/property/director> ?director .\n  ?director <http://dbpedia.org/ontology/award> ?award .\n}"
    },
    {
        "question": "What is the almamater of the president whose vice president was Enrique Jos Varona?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/vicePresident> <http://dbpedia.org/resource/Enrique_Jos\u00e9_Varona> . ?x <http://dbpedia.org/ontology/almaMater> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Alma_mater",
            "http://dbpedia.org/resource/Enrique_Jos\u00e9_Varona"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Enrique_Jos\u00e9_Varona> -> PRESIDENT -> <http://dbpedia.org/resource/Alma_mater>"
        ],
        "paths": "<http://dbpedia.org/resource/Enrique_Jos\u00e9_Varona> -> PRESIDENT -> <http://dbpedia.org/resource/Alma_mater>",
        "generated_query": "SELECT DISTINCT ?almaMater WHERE {\n  ?president <http://dbpedia.org/ontology/vicePresident> <http://dbpedia.org/resource/Enrique_Jos\u00e9_Varona> .\n  {\n    ?president <http://dbpedia.org/property/office> <http://dbpedia.org/resource/President_of_Cuba> .\n  } UNION {\n    ?president <http://dbpedia.org/property/title> <http://dbpedia.org/resource/President_of_Cuba> .\n  }\n  ?president <http://dbpedia.org/property/almaMater> ?almaMater .\n  ?almaMater <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Alma_mater> .\n}"
    },
    {
        "question": "What is the route end of Birmingham and Oxford Junction Railway ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Birmingham_and_Oxford_Junction_Railway> <http://dbpedia.org/ontology/routeEnd> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Birmingham_and_Oxford_Junction_Railway"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Birmingham_and_Oxford_Junction_Railway> -> \"route end\""
        ],
        "paths": "<http://dbpedia.org/resource/Birmingham_and_Oxford_Junction_Railway> -> \"route end\"",
        "generated_query": "SELECT DISTINCT ?routeEnd WHERE {\n  <http://dbpedia.org/resource/Birmingham_and_Oxford_Junction_Railway> <http://dbpedia.org/ontology/routeEnd> ?routeEnd .\n}"
    },
    {
        "question": "Where did the Vitis Vinifera grapes originate?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/species> <http://dbpedia.org/resource/Vitis_vinifera> . ?x <http://dbpedia.org/ontology/origin> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Grape>}",
        "entities": [
            "http://dbpedia.org/resource/Vitis_vinifera"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Vitis_vinifera> -> \"origin\""
        ],
        "paths": "<http://dbpedia.org/resource/Vitis_vinifera> -> \"origin\"",
        "generated_query": "SELECT DISTINCT ?origin WHERE {\n  ?variety <http://dbpedia.org/ontology/species> <http://dbpedia.org/resource/Vitis_vinifera> .\n  {\n    ?variety <http://dbpedia.org/ontology/origin> ?origin .\n  }\n  UNION\n  {\n    ?variety <http://dbpedia.org/property/origin> ?origin .\n  }\n}"
    },
    {
        "question": "How many people are there whose children died in Indiana?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Indiana> . ?uri <http://dbpedia.org/ontology/child> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "entities": [
            "http://dbpedia.org/resource/Indiana"
        ],
        "classes": [],
        "relations": [
            "PEOPLE -> CHILDREN -> <http://dbpedia.org/resource/Indiana>"
        ],
        "paths": "",
        "generated_query": "SELECT (COUNT(DISTINCT ?person) AS ?count)\nWHERE {\n  ?person <http://dbpedia.org/ontology/child> ?child .\n  ?child <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Indiana> .\n}"
    },
    {
        "question": "What is the military branch of the William French Smith which is also the branch of Pierre R. Graham ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/William_French_Smith> <http://dbpedia.org/ontology/militaryBranch> ?uri. <http://dbpedia.org/resource/Pierre_R._Graham> <http://dbpedia.org/property/branch> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/William_French_Smith",
            "http://dbpedia.org/resource/Pierre_R._Graham"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/William_French_Smith> -> MILITARY_BRANCH",
            "<http://dbpedia.org/resource/Pierre_R._Graham> -> MILITARY_BRANCH"
        ],
        "paths": "<http://dbpedia.org/resource/William_French_Smith> -> MILITARY_BRANCH, <http://dbpedia.org/resource/Pierre_R._Graham> -> MILITARY_BRANCH",
        "generated_query": "SELECT DISTINCT ?branch WHERE {\n  <http://dbpedia.org/resource/William_French_Smith> <http://dbpedia.org/ontology/militaryBranch> ?branch .\n  <http://dbpedia.org/resource/Pierre_R._Graham> <http://dbpedia.org/ontology/militaryBranch> ?branch .\n}"
    },
    {
        "question": "What is the river whose source is Lake Ontario?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/source> <http://dbpedia.org/resource/Lake_Ontario>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "entities": [
            "http://dbpedia.org/resource/Lake_Ontario"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Lake_Ontario> -> RIVER"
        ],
        "paths": "<http://dbpedia.org/resource/Lake_Ontario> -> RIVER",
        "generated_query": "SELECT DISTINCT ?river WHERE {\n  <http://dbpedia.org/resource/Lake_Ontario> <http://dbpedia.org/property/outflow> ?river .\n}"
    },
    {
        "question": "Whichlocation city of the Denver Broncos is the palce of birth of Steven Clark Cunningham ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Denver_Broncos> <http://dbpedia.org/ontology/locationCity> ?uri. <http://dbpedia.org/resource/Steven_Clark_Cunningham> <http://dbpedia.org/ontology/birthPlace> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Steven_Clark_Cunningham",
            "http://dbpedia.org/resource/Denver_Broncos"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Denver_Broncos> -> <http://dbpedia.org/resource/Steven_Clark_Cunningham>"
        ],
        "paths": "<http://dbpedia.org/resource/Denver_Broncos> -> <http://dbpedia.org/resource/Steven_Clark_Cunningham>",
        "generated_query": "SELECT DISTINCT ?city WHERE {\n  <http://dbpedia.org/resource/Denver_Broncos> <http://dbpedia.org/ontology/locationCity> ?city .\n  <http://dbpedia.org/resource/Steven_Clark_Cunningham> <http://dbpedia.org/ontology/birthPlace> ?city .\n}"
    },
    {
        "question": "What is the religion of the person who founded the Emel magazine?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Emel_(magazine)> <http://dbpedia.org/property/founder> ?x . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "entities": [
            "http://dbpedia.org/resource/Emel_(magazine)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Emel_(magazine)> -> FOUNDER -> RELIGION"
        ],
        "paths": "<http://dbpedia.org/resource/Emel_(magazine)> -> FOUNDER -> RELIGION",
        "generated_query": "SELECT DISTINCT ?religion WHERE {\n  {\n    <http://dbpedia.org/resource/Emel_(magazine)> <http://dbpedia.org/property/founder> ?founder .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Emel_(magazine)> <http://dbpedia.org/ontology/founder> ?founder .\n  }\n  ?founder <http://dbpedia.org/property/religion> ?religion .\n}"
    },
    {
        "question": "Give the name of the  managers of England national under-20 football team and England national under-21 football team?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/managerclubs> <http://dbpedia.org/resource/England_national_under-20_football_team> . ?uri <http://dbpedia.org/property/managerclubs> <http://dbpedia.org/resource/England_national_under-21_football_team> . }",
        "entities": [
            "http://dbpedia.org/resource/England_national_under-21_football_team",
            "http://dbpedia.org/resource/England_national_under-20_football_team"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/England_national_under-20_football_team> -> <http://dbpedia.org/resource/England_national_under-20_football_team_manager> -> \"name\"",
            "<http://dbpedia.org/resource/England_national_under-21_football_team> -> <http://dbpedia.org/resource/England_national_under-21_football_team_manager> -> \"name\""
        ],
        "paths": "",
        "generated_query": "{\n  <England_national_under-20_football_team> ?managerProp <England_national_under-20_football_team_manager> .\n  <England_national_under-20_football_team_manager> <http://xmlns.com/foaf/0.1/name> ?name .\n}\nUNION\n{\n  <England_national_under-21_football_team> ?managerProp <England_national_under-21_football_team_manager> .\n  <England_national_under-21_football_team_manager> <http://xmlns.com/foaf/0.1/name> ?name .\n}"
    },
    {
        "question": "How many cities are around the sea in which the the fig tree bay meets?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { <http://dbpedia.org/resource/Fig_Tree_Bay> <http://dbpedia.org/ontology/inflow> ?x . ?x <http://dbpedia.org/property/cities> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sea>}",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT (COUNT(DISTINCT ?city) AS ?count)\nWHERE {\n  ?figTreeBay a <http://example.org/ontology/BAY_CLASS> .\n  ?figTreeBay <http://www.w3.org/2000/01/rdf-schema#label> \"fig tree bay\" .\n  ?figTreeBay <http://example.org/ontology/MEETS_PROPERTY> ?sea .\n  ?city a <http://example.org/ontology/CITY_CLASS> .\n  ?city <http://example.org/ontology/LOCATED_AROUND_PROPERTY> ?sea .\n}"
    },
    {
        "question": "is blue lagoon island a part of the bahamas achipelago?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/Blue_Lagoon_Island> <http://dbpedia.org/ontology/archipelago> <http://dbpedia.org/resource/The_Bahamas> }",
        "entities": [
            "http://dbpedia.org/resource/Lucayan_Archipelago"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Blue_Lagoon_Island> -> <http://dbpedia.org/resource/Lucayan_Archipelago>"
        ],
        "paths": "<http://dbpedia.org/resource/Blue_Lagoon_Island> -> <http://dbpedia.org/resource/Lucayan_Archipelago>",
        "generated_query": "ASK {\n  {\n    <http://dbpedia.org/resource/Blue_Lagoon_Island> <http://dbpedia.org/property/archipelago> <http://dbpedia.org/resource/The_Bahamas> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Blue_Lagoon_Island> <http://dbpedia.org/ontology/archipelago> <http://dbpedia.org/resource/The_Bahamas> .\n  }\n}"
    },
    {
        "question": "Name the movies distributed by RKO Pictures and has music composer as Bernard Herrmann?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/distributor> <http://dbpedia.org/resource/RKO_Pictures> . ?uri <http://dbpedia.org/ontology/musicComposer> <http://dbpedia.org/resource/Bernard_Herrmann>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "entities": [
            "http://dbpedia.org/resource/RKO_Pictures",
            "http://dbpedia.org/resource/Bernard_Herrmann"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/RKO_Pictures> -> <http://dbpedia.org/resource/Bernard_Herrmann>"
        ],
        "paths": "<http://dbpedia.org/resource/RKO_Pictures> -> <http://dbpedia.org/resource/Bernard_Herrmann>",
        "generated_query": "SELECT DISTINCT ?movie WHERE {\n  ?movie <http://dbpedia.org/ontology/distributor> <http://dbpedia.org/resource/RKO_Pictures> .\n  ?movie <http://dbpedia.org/ontology/musicComposer> <http://dbpedia.org/resource/Bernard_Herrmann> .\n}"
    },
    {
        "question": "Did the New Way party merge in the One Israel party?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/New_Way_(Israel)> <http://dbpedia.org/ontology/mergedIntoParty> <http://dbpedia.org/resource/One_Israel> }",
        "entities": [
            "http://dbpedia.org/resource/New_Way_(Israel)",
            "http://dbpedia.org/resource/One_Israel_(1980)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/New_Way_(Israel)> -> <http://dbpedia.org/resource/One_Israel_(1980)>"
        ],
        "paths": "<http://dbpedia.org/resource/New_Way_(Israel)> -> <http://dbpedia.org/resource/One_Israel_(1980)>",
        "generated_query": "ASK WHERE {\n  {\n    ?x <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/New_Way_(Israel)> .\n    ?x <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/One_Israel_(1980)> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/One_Israel_(1980)> <http://dbpedia.org/ontology/wikiPageWikiLink> ?y .\n    ?y <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/New_Way_(Israel)> .\n  }\n}"
    },
    {
        "question": "How many pole drivers have been there in grand prixes where first driver was Damon Hill?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/ontology/firstDriver> <http://dbpedia.org/resource/Damon_Hill> . ?x <http://dbpedia.org/ontology/poleDriver> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FormulaOneRacer>}",
        "entities": [
            "http://dbpedia.org/resource/Damon_Hill"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Damon_Hill> -> FIRST_DRIVER -> GRAND_PRIX -> POLE_DRIVER -> \"count\""
        ],
        "paths": "<http://dbpedia.org/resource/Damon_Hill> -> FIRST_DRIVER -> GRAND_PRIX -> POLE_DRIVER -> \"count\"",
        "generated_query": "SELECT (COUNT(DISTINCT ?poleDriver) AS ?count)\nWHERE {\n  ?grandPrix <http://dbpedia.org/ontology/firstDriver> <http://dbpedia.org/resource/Damon_Hill> .\n  ?grandPrix <http://dbpedia.org/ontology/poleDriver> ?poleDriver .\n}"
    },
    {
        "question": "Where are jockeys in Dubai World Cup from?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/race> <http://dbpedia.org/resource/Dubai_World_Cup> . ?x <http://dbpedia.org/property/birthPlace> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Jockey>}",
        "entities": [
            "http://dbpedia.org/resource/Dubai_World_Cup"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Dubai_World_Cup> -> JOCKEYS -> \"origin\""
        ],
        "paths": "<http://dbpedia.org/resource/Dubai_World_Cup> -> JOCKEYS -> \"origin\"",
        "generated_query": "SELECT DISTINCT ?nationality WHERE {\n  <http://dbpedia.org/resource/Dubai_World_Cup> <http://dbpedia.org/ontology/wikiPageWikiLink> ?entity .\n  ?entity <http://dbpedia.org/ontology/nationality> ?nationality .\n}"
    },
    {
        "question": "Who owns the newspaper which was founded by Nehru?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/founder> <http://dbpedia.org/resource/Jawaharlal_Nehru> . ?x <http://dbpedia.org/ontology/owner> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Newspaper>}",
        "entities": [
            "http://dbpedia.org/resource/Jawaharlal_Nehru"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Jawaharlal_Nehru> -> NEWSPAPER -> OWNER"
        ],
        "paths": "<http://dbpedia.org/resource/Jawaharlal_Nehru> -> NEWSPAPER -> OWNER",
        "generated_query": "SELECT DISTINCT ?owner WHERE {\n  ?newspaper <http://dbpedia.org/ontology/foundedBy> <http://dbpedia.org/resource/Jawaharlal_Nehru> .\n  ?newspaper <http://dbpedia.org/ontology/owner> ?owner .\n}"
    },
    {
        "question": "To which places do the flights go by airlines headquartered in the UK?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/headquarters> <http://dbpedia.org/resource/United_Kingdom> . ?x <http://dbpedia.org/property/destinations> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airline>}",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?place\nWHERE {\n  # No triples provided to identify flights, airlines, UK headquarters, or destination places.\n  # Cannot construct patterns without properties or entities.\n  FILTER(false)\n}"
    },
    {
        "question": "What is the magazine which have been  founded by Ralph J. Gleason?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/founder> <http://dbpedia.org/resource/Ralph_J._Gleason>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Magazine>}",
        "entities": [
            "http://dbpedia.org/resource/Ralph_J._Gleason"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Ralph_J._Gleason> -> MAGAZINE"
        ],
        "paths": "<http://dbpedia.org/resource/Ralph_J._Gleason> -> MAGAZINE",
        "generated_query": "SELECT DISTINCT ?magazine WHERE {\n  {\n    ?magazine <http://dbpedia.org/property/founder> <http://dbpedia.org/resource/Ralph_J._Gleason> .\n  }\n  UNION\n  {\n    ?magazine <http://dbpedia.org/ontology/founder> <http://dbpedia.org/resource/Ralph_J._Gleason> .\n  }\n}"
    },
    {
        "question": "Is Seattle the Ship builder of USS Marmora (IX-189)?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/USS_Marmora_(IX-189)> <http://dbpedia.org/property/shipBuilder> <http://dbpedia.org/resource/Seattle> }",
        "entities": [
            "http://dbpedia.org/resource/Seattle",
            "http://dbpedia.org/resource/USS_Marmora_(IX-189)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/USS_Marmora_(IX-189)> -> <http://dbpedia.org/resource/Seattle>"
        ],
        "paths": "<http://dbpedia.org/resource/USS_Marmora_(IX-189)> -> <http://dbpedia.org/resource/Seattle>",
        "generated_query": "ASK WHERE {\n  {\n    <http://dbpedia.org/resource/USS_Marmora_(IX-189)> <http://dbpedia.org/ontology/builder> <http://dbpedia.org/resource/Seattle> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/USS_Marmora_(IX-189)> <http://dbpedia.org/property/shipBuilder> <http://dbpedia.org/resource/Seattle> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/USS_Marmora_(IX-189)> <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Seattle> .\n  }\n}"
    },
    {
        "question": "Is Tirana the largest city of Albania?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/Albania> <http://dbpedia.org/property/largestCity> <http://dbpedia.org/resource/Tirana> }",
        "entities": [
            "http://dbpedia.org/resource/Albania",
            "http://dbpedia.org/resource/Tirana"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Tirana> -> <http://dbpedia.org/resource/Albania>"
        ],
        "paths": "<http://dbpedia.org/resource/Tirana> -> <http://dbpedia.org/resource/Albania>",
        "generated_query": "ASK WHERE {\n  {\n    <http://dbpedia.org/resource/Albania> <http://dbpedia.org/property/largestCity> <http://dbpedia.org/resource/Tirana> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Albania> <http://dbpedia.org/ontology/largestCity> <http://dbpedia.org/resource/Tirana> .\n  }\n}"
    },
    {
        "question": "In which cities can the beverage related to Barq's be found?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Barq's> <http://dbpedia.org/ontology/related> ?x . ?x <http://dbpedia.org/property/locationCity> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Barq's"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Barq's> -> CITY"
        ],
        "paths": "<http://dbpedia.org/resource/Barq's> -> CITY",
        "generated_query": "SELECT DISTINCT ?city WHERE {\n  <http://dbpedia.org/resource/Barq's> <http://dbpedia.org/ontology/wikiPageWikiLink> ?company .\n  ?company <http://dbpedia.org/ontology/locationCity> ?city .\n}"
    },
    {
        "question": "What is the birth place of the astronaut whose mission was the Vostok programmer?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/mission> <http://dbpedia.org/resource/Vostok_programme> . ?x <http://dbpedia.org/ontology/birthPlace> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Astronaut>}",
        "entities": [
            "http://dbpedia.org/resource/Vostok_programme"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Vostok_programme> -> ASTRONAUT -> \"birth place\""
        ],
        "paths": "<http://dbpedia.org/resource/Vostok_programme> -> ASTRONAUT -> \"birth place\"",
        "generated_query": "SELECT DISTINCT ?birthPlace WHERE {\n  ?astronaut <http://dbpedia.org/ontology/mission> <http://dbpedia.org/resource/Vostok_programme> .\n  ?astronaut <http://dbpedia.org/ontology/birthPlace> ?birthPlace .\n}"
    },
    {
        "question": "Count everyone who studied at an institute which are in Suburbs?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/ontology/campus> <http://dbpedia.org/resource/Suburb> . ?uri <http://dbpedia.org/property/education> ?x  . }",
        "entities": [
            "http://dbpedia.org/resource/Suburb"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Suburb> -> INSTITUTE"
        ],
        "paths": "<http://dbpedia.org/resource/Suburb> -> INSTITUTE",
        "generated_query": "SELECT (COUNT(DISTINCT ?person) AS ?count)\nWHERE {\n  ?institute <http://dbpedia.org/ontology/campus> <http://dbpedia.org/resource/Suburb> .\n  ?person <http://dbpedia.org/ontology/almaMater> ?institute .\n}"
    },
    {
        "question": "Where did Whitney Wistert debut?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Whitey_Wistert> <http://dbpedia.org/property/debutteam> ?uri } ",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?place WHERE {\n  ?person ?p ?place .\n  ?person <http://www.w3.org/2000/01/rdf-schema#label> \"Whitney Wistert\" .\n  FILTER (regex(str(?p), \"debut\", \"i\") || regex(str(?p), \"start\", \"i\") || regex(str(?p), \"first\", \"i\"))\n}"
    },
    {
        "question": "What is the major shrine of the monarchs whose successor is Dragimir of Travunia and Zachlumia?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Dragimir_of_Travunia_and_Zachlumia> . ?x <http://dbpedia.org/property/majorShrine> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Monarch>}",
        "entities": [
            "http://dbpedia.org/resource/Dragimir_of_Travunia_and_Zachlumia"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Dragimir_of_Travunia_and_Zachlumia> -> PREDECESSOR -> \"major shrine\""
        ],
        "paths": "<http://dbpedia.org/resource/Dragimir_of_Travunia_and_Zachlumia> -> PREDECESSOR -> \"major shrine\"",
        "generated_query": "SELECT DISTINCT ?shrine WHERE {\n  ?monarch <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Dragimir_of_Travunia_and_Zachlumia> .\n  ?monarch <http://dbpedia.org/property/majorShrine> ?shrine .\n}"
    },
    {
        "question": "How many television shows have  Fox Broadcasting Company as their channel?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE {?uri <http://dbpedia.org/property/channel> <http://dbpedia.org/resource/Fox_Broadcasting_Company>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "entities": [
            "http://dbpedia.org/resource/Fox_Broadcasting_Company"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Fox_Broadcasting_Company> -> \"member\""
        ],
        "paths": "<http://dbpedia.org/resource/Fox_Broadcasting_Company> -> \"member\"",
        "generated_query": "SELECT (COUNT(DISTINCT ?show) AS ?count)\nWHERE {\n  {\n    ?show <http://dbpedia.org/ontology/channel> <http://dbpedia.org/resource/Fox_Broadcasting_Company> .\n  }\n  UNION\n  {\n    ?show <http://dbpedia.org/property/channel> <http://dbpedia.org/resource/Fox_Broadcasting_Company> .\n  }\n}"
    },
    {
        "question": "What is the river whose mouth locations are Arctic Ocean and Laptev Sea?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/mouthLocation> <http://dbpedia.org/resource/Arctic_Ocean> . ?uri <http://dbpedia.org/property/mouthLocation> <http://dbpedia.org/resource/Laptev_Sea> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "entities": [
            "http://dbpedia.org/resource/Laptev_Sea",
            "http://dbpedia.org/resource/Arctic_Ocean"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Laptev_Sea> -> <http://dbpedia.org/resource/Arctic_Ocean>"
        ],
        "paths": "<http://dbpedia.org/resource/Laptev_Sea> -> <http://dbpedia.org/resource/Arctic_Ocean>",
        "generated_query": "SELECT DISTINCT ?river WHERE {\n  ?river <http://dbpedia.org/property/mouthLocation> <http://dbpedia.org/resource/Laptev_Sea> .\n  ?river <http://dbpedia.org/property/mouthLocation> <http://dbpedia.org/resource/Arctic_Ocean> .\n}"
    },
    {
        "question": "What are some wars fought when Chung Il Kwon as the country's prime minister?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/primeminister> <http://dbpedia.org/resource/Chung_Il-kwon> . ?uri <http://dbpedia.org/ontology/commander> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>}",
        "entities": [
            "http://dbpedia.org/resource/Chun_Doo-hwan"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Chun_Doo-hwan> -> WARS"
        ],
        "paths": "<http://dbpedia.org/resource/Chun_Doo-hwan> -> WARS",
        "generated_query": "SELECT DISTINCT ?war WHERE {\n  {\n    <http://dbpedia.org/resource/Chun_Doo-hwan> <http://dbpedia.org/ontology/battle> ?battle .\n    ?battle <http://dbpedia.org/ontology/isPartOfMilitaryConflict> ?war .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Chun_Doo-hwan> <http://dbpedia.org/property/battles> ?battle .\n    ?battle <http://dbpedia.org/ontology/isPartOfMilitaryConflict> ?war .\n  }\n}"
    },
    {
        "question": "Where was the person born who died in Bryn Mawr Hospital?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/placeOfDeath> <http://dbpedia.org/resource/Bryn_Mawr_Hospital> . ?x <http://dbpedia.org/property/placeOfBirth> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Bryn_Mawr_Hospital"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Bryn_Mawr_Hospital> -> PERSON -> \"birthplace\""
        ],
        "paths": "<http://dbpedia.org/resource/Bryn_Mawr_Hospital> -> PERSON -> \"birthplace\"",
        "generated_query": "SELECT DISTINCT ?birthplace WHERE {\n  ?person <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Bryn_Mawr_Hospital> .\n  ?person <http://dbpedia.org/ontology/birthPlace> ?birthplace .\n}"
    },
    {
        "question": "What is the faith of the Ajith Perera and religious affiliation of the Neungin High School?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ajith_Perera> <http://dbpedia.org/ontology/religion> ?uri. <http://dbpedia.org/resource/Neungin_High_School> <http://dbpedia.org/property/religiousAffiliation> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Ajith_Perera"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Ajith_Perera> -> \"faith\""
        ],
        "paths": "<http://dbpedia.org/resource/Ajith_Perera> -> \"faith\"",
        "generated_query": "SELECT DISTINCT ?ajithFaith ?neunginAffiliation WHERE {\n  OPTIONAL {\n    <http://dbpedia.org/resource/Ajith_Perera> <http://dbpedia.org/ontology/religion> ?ajithFaith .\n  }\n  OPTIONAL {\n    <http://dbpedia.org/resource/Neungin_High_School> <http://dbpedia.org/property/religiousAffiliation> ?neunginAffiliation .\n  }\n}"
    },
    {
        "question": "Who was in military unit which played the role of Air interdiction?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/role> <http://dbpedia.org/resource/Air_interdiction> . ?uri <http://dbpedia.org/ontology/militaryUnit> ?x  . }",
        "entities": [
            "http://dbpedia.org/resource/Air_interdiction"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Air_interdiction> -> MILITARY_UNIT"
        ],
        "paths": "<http://dbpedia.org/resource/Air_interdiction> -> MILITARY_UNIT",
        "generated_query": "SELECT DISTINCT ?militaryUnit WHERE {\n  ?militaryUnit <http://dbpedia.org/property/role> <http://dbpedia.org/resource/Air_interdiction> .\n}"
    },
    {
        "question": "Who are the current members of Insects vs Robots?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Insects_vs_Robots> <http://dbpedia.org/property/currentMembers> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Insects_vs_Robots"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Insects_vs_Robots> -> member"
        ],
        "paths": "<http://dbpedia.org/resource/Insects_vs_Robots> -> member",
        "generated_query": "SELECT DISTINCT ?member WHERE {\n  <http://dbpedia.org/resource/Insects_vs_Robots> <http://dbpedia.org/property/currentMembers> ?member .\n}"
    },
    {
        "question": "Is Ombla originate in Croatia?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/Ombla> <http://dbpedia.org/ontology/sourceMountain> <http://dbpedia.org/resource/Croatia> }",
        "entities": [
            "http://dbpedia.org/resource/Ombla",
            "http://dbpedia.org/resource/Croatia"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Ombla> -> <http://dbpedia.org/resource/Croatia>"
        ],
        "paths": "<http://dbpedia.org/resource/Ombla> -> <http://dbpedia.org/resource/Croatia>",
        "generated_query": "ASK WHERE {\n  {\n    <http://dbpedia.org/resource/Ombla> <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Croatia> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Ombla> <http://dbpedia.org/ontology/sourcePlace> <http://dbpedia.org/resource/Croatia> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Ombla> <http://dbpedia.org/ontology/mouthPlace> <http://dbpedia.org/resource/Croatia> .\n  }\n}"
    },
    {
        "question": "Greater Napanee is the home town of what people?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/hometown> <http://dbpedia.org/resource/Greater_Napanee>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "entities": [
            "http://dbpedia.org/resource/Greater_Napanee"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Greater_Napanee> -> PEOPLE"
        ],
        "paths": "<http://dbpedia.org/resource/Greater_Napanee> -> PEOPLE",
        "generated_query": "SELECT DISTINCT ?person WHERE {\n  {\n    ?person <http://dbpedia.org/ontology/hometown> <http://dbpedia.org/resource/Greater_Napanee> .\n  }\n  UNION\n  {\n    ?person <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Greater_Napanee> .\n  }\n}"
    },
    {
        "question": "What place did Edwin Adams die at, which gave birth to William A Purtell?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Edwin_Adams_(politician)> <http://dbpedia.org/property/placeOfDeath> ?uri. <http://dbpedia.org/resource/William_A._Purtell> <http://dbpedia.org/ontology/birthPlace> ?uri . }",
        "entities": [
            "http://dbpedia.org/resource/William_A._Purtell",
            "http://dbpedia.org/resource/Edwin_Adams_(actor)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/William_A._Purtell> -> PLACE_OF_BIRTH",
            "<http://dbpedia.org/resource/Edwin_Adams_(actor)> -> PLACE_OF_DEATH"
        ],
        "paths": "<http://dbpedia.org/resource/William_A._Purtell> -> PLACE_OF_BIRTH, <http://dbpedia.org/resource/Edwin_Adams_(actor)> -> PLACE_OF_DEATH",
        "generated_query": "SELECT DISTINCT ?place WHERE {\n  <http://dbpedia.org/resource/Edwin_Adams_(actor)> <http://dbpedia.org/ontology/deathPlace> ?place .\n  {\n    <http://dbpedia.org/resource/William_A._Purtell> <http://dbpedia.org/property/birthPlace> ?place .\n  } UNION {\n    <http://dbpedia.org/resource/William_A._Purtell> <http://dbpedia.org/ontology/birthPlace> ?place .\n  }\n}"
    },
    {
        "question": "Name the nationalteam of Trn Vit Hng ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tr\u1ea7n_Vi\u1ec7t_H\u01b0\u01a1ng> <http://dbpedia.org/property/nationalteam> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Vietnam_national_football_team"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Vietnam_national_football_team> -> \"name\""
        ],
        "paths": "<http://dbpedia.org/resource/Vietnam_national_football_team> -> \"name\"",
        "generated_query": "SELECT DISTINCT ?team WHERE {\n  ?player <http://dbpedia.org/property/nationalteam> ?team .\n  {\n    ?player <http://dbpedia.org/property/name> ?playerName .\n  } UNION {\n    ?player <http://xmlns.com/foaf/0.1/name> ?playerName .\n  }\n  FILTER(CONTAINS(LCASE(?playerName), \"trn\") && CONTAINS(LCASE(?playerName), \"hng\"))\n}"
    },
    {
        "question": "Which designer of RENFE also owns Renaissance Center ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/RENFE_Class_333> <http://dbpedia.org/ontology/designer> ?uri. <http://dbpedia.org/resource/Renaissance_Center> <http://dbpedia.org/property/owner> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Renfe",
            "http://dbpedia.org/resource/Renaissance_Center"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Renfe> -> DESIGNER -> <http://dbpedia.org/resource/Renaissance_Center>"
        ],
        "paths": "<http://dbpedia.org/resource/Renfe> -> DESIGNER -> <http://dbpedia.org/resource/Renaissance_Center>",
        "generated_query": "SELECT DISTINCT ?designer WHERE {\n  <http://dbpedia.org/resource/Renfe> <http://dbpedia.org/ontology/wikiPageWikiLink> ?linkedEntity .\n  ?designer <http://dbpedia.org/ontology/designer> ?linkedEntity .\n  ?designer <http://dbpedia.org/ontology/owner> <http://dbpedia.org/resource/Renaissance_Center> .\n}"
    },
    {
        "question": "Whihc uni did Joshua A. Siegel attend ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Joshua_A._Siegel> <http://dbpedia.org/property/education> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Joshua_Eargle"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Joshua_Eargle> -> UNIVERSITY"
        ],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?university WHERE {\n  <http://dbpedia.org/resource/Joshua_Eargle> ?p ?university .\n  FILTER(?p IN (<http://dbpedia.org/ontology/education>, <http://dbpedia.org/ontology/almaMater>, <http://dbpedia.org/property/almaMater>, <http://dbpedia.org/property/education>))\n}"
    },
    {
        "question": "How many books are written by the author who is famous for Novelas Ejemplares?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/ontology/notableWork> <http://dbpedia.org/resource/Novelas_ejemplares> . ?uri <http://dbpedia.org/ontology/author> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>}",
        "entities": [
            "http://dbpedia.org/resource/Novelas_ejemplares"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Novelas_ejemplares> -> AUTHOR -> \"number of books written\""
        ],
        "paths": "<http://dbpedia.org/resource/Novelas_ejemplares> -> AUTHOR -> \"number of books written\"",
        "generated_query": "SELECT (COUNT(DISTINCT ?work) AS ?numberOfBooks)\nWHERE {\n  ?work <http://dbpedia.org/ontology/author> <http://dbpedia.org/resource/Miguel_de_Cervantes> .\n}"
    },
    {
        "question": "Name the rivers who originate from Essex?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/mouthPlace> <http://dbpedia.org/resource/Essex>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "entities": [
            "http://dbpedia.org/resource/Essex"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Essex> -> RIVER"
        ],
        "paths": "<http://dbpedia.org/resource/Essex> -> RIVER",
        "generated_query": "SELECT DISTINCT ?river WHERE {\n  ?var0 <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Essex> .\n  ?river <http://dbpedia.org/property/origin> ?var0 .\n}"
    },
    {
        "question": "Companies founded in Taiwan have typically which divisions?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/foundationPlace> <http://dbpedia.org/resource/Taiwan> . ?x <http://dbpedia.org/ontology/division> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
        "entities": [
            "http://dbpedia.org/resource/Taiwan"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Taiwan> -> COMPANY"
        ],
        "paths": "<http://dbpedia.org/resource/Taiwan> -> COMPANY",
        "generated_query": "SELECT DISTINCT ?company WHERE {\n  ?company <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Taiwan> .\n  ?company <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Taiwan> .\n}"
    },
    {
        "question": "Did Timm Gunn guest in Sunrise (HIMYM)?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/Sunrise_(How_I_Met_Your_Mother)> <http://dbpedia.org/property/guests> <http://dbpedia.org/resource/Tim_Gunn> }",
        "entities": [
            "http://dbpedia.org/resource/Tim_Gunn",
            "http://dbpedia.org/resource/Sunrise_(Jimmy_Ruffin_album)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Tim_Gunn> -> <http://dbpedia.org/resource/Sunrise_(Jimmy_Ruffin_album)>"
        ],
        "paths": "<http://dbpedia.org/resource/Tim_Gunn> -> <http://dbpedia.org/resource/Sunrise_(Jimmy_Ruffin_album)>",
        "generated_query": "ASK WHERE {\n  <http://dbpedia.org/resource/Tim_Gunn> ?p <http://dbpedia.org/resource/Sunrise_(Jimmy_Ruffin_album)> .\n}"
    },
    {
        "question": "to which university did both, the Stanford Cardinal and Gerald Reaven go?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Stanford_Cardinal> <http://dbpedia.org/ontology/university> ?uri. <http://dbpedia.org/resource/Gerald_Reaven> <http://dbpedia.org/ontology/institution> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Gerald_Reaven",
            "http://dbpedia.org/resource/Stanford_Cardinal"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Stanford_Cardinal> -> <http://dbpedia.org/resource/Gerald_Reaven>"
        ],
        "paths": "<http://dbpedia.org/resource/Stanford_Cardinal> -> <http://dbpedia.org/resource/Gerald_Reaven>",
        "generated_query": "SELECT DISTINCT ?university WHERE {\n  <http://dbpedia.org/resource/Stanford_Cardinal> <http://dbpedia.org/ontology/university> ?university .\n  <http://dbpedia.org/resource/Gerald_Reaven> <http://dbpedia.org/ontology/institution> ?university .\n}"
    },
    {
        "question": "Name the nearest city to David W. Brown House ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/David_W._Brown_House> <http://dbpedia.org/ontology/nearestCity> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/David_W._Brown_House"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/David_W._Brown_House> -> <NEAREST_CITY>"
        ],
        "paths": "<http://dbpedia.org/resource/David_W._Brown_House> -> <NEAREST_CITY>",
        "generated_query": "SELECT DISTINCT ?nearestCity WHERE {\n  {\n    <http://dbpedia.org/resource/David_W._Brown_House> <http://dbpedia.org/ontology/nearestCity> ?nearestCity .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/David_W._Brown_House> <http://dbpedia.org/property/nearestCity> ?nearestCity .\n  }\n  FILTER (\n    ?nearestCity != <http://dbpedia.org/resource/Colorado> &&\n    ?nearestCity != <http://dbpedia.org/resource/Arapahoe_County,_Colorado>\n  )\n}"
    },
    {
        "question": "where did Deion Sanders debut?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Deion_Sanders> <http://dbpedia.org/property/debutteam> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Deion_Sanders"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Deion_Sanders> -> \"debut location\""
        ],
        "paths": "<http://dbpedia.org/resource/Deion_Sanders> -> \"debut location\"",
        "generated_query": "SELECT DISTINCT ?debutTeam WHERE {\n  <http://dbpedia.org/resource/Deion_Sanders> <http://dbpedia.org/property/debutteam> ?debutTeam .\n}"
    },
    {
        "question": "What cities are nearer to Fuountain Lake Farm?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Fountain_Lake_Farm> <http://dbpedia.org/property/nearestCity> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Fountain_Lake_Farm"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Fountain_Lake_Farm> -> CITY"
        ],
        "paths": "<http://dbpedia.org/resource/Fountain_Lake_Farm> -> CITY",
        "generated_query": "SELECT DISTINCT ?city WHERE {\n  {\n    <http://dbpedia.org/resource/Fountain_Lake_Farm> <http://dbpedia.org/property/nearestCity> ?city .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Fountain_Lake_Farm> <http://dbpedia.org/ontology/nearestCity> ?city .\n  }\n}"
    },
    {
        "question": "Who are the characters of Batman Live?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Batman_Live> <http://dbpedia.org/property/characters> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Batman_Live"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Batman_Live> -> \"characters\""
        ],
        "paths": "<http://dbpedia.org/resource/Batman_Live> -> \"characters\"",
        "generated_query": "SELECT DISTINCT ?character WHERE {\n  <http://dbpedia.org/resource/Batman_Live> <http://dbpedia.org/property/characters> ?character .\n}"
    },
    {
        "question": "Which artists trained in San Francisco Art Institute?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/training> <http://dbpedia.org/resource/San_Francisco_Art_Institute>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>}",
        "entities": [
            "http://dbpedia.org/resource/San_Francisco_Art_Institute"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/San_Francisco_Art_Institute> -> ARTIST"
        ],
        "paths": "<http://dbpedia.org/resource/San_Francisco_Art_Institute> -> ARTIST",
        "generated_query": "SELECT DISTINCT ?artist WHERE {\n  ?artist <http://dbpedia.org/ontology/training> <http://dbpedia.org/resource/San_Francisco_Art_Institute> .\n  ?artist <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist> .\n}"
    },
    {
        "question": "What is the owning organisation of the Ford Kansas City Assembly Plant and also the builder of the Ford Y-block engine?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ford_Kansas_City_Assembly_Plant> <http://dbpedia.org/ontology/owningOrganisation> ?uri. <http://dbpedia.org/resource/Ford_Y-block_engine> <http://dbpedia.org/ontology/manufacturer> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Ford_Kansas_City_Assembly_Plant"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Ford_Kansas_City_Assembly_Plant> -> BUILDER",
            "<http://dbpedia.org/resource/Ford_Kansas_City_Assembly_Plant> -> OWNING_ORGANISATION"
        ],
        "paths": "<http://dbpedia.org/resource/Ford_Kansas_City_Assembly_Plant> -> BUILDER, <http://dbpedia.org/resource/Ford_Kansas_City_Assembly_Plant> -> OWNING_ORGANISATION",
        "generated_query": "SELECT DISTINCT ?org WHERE {\n  <http://dbpedia.org/resource/Ford_Kansas_City_Assembly_Plant> <http://dbpedia.org/ontology/owningOrganisation> ?org .\n  ?engine <http://dbpedia.org/ontology/builder> ?org .\n}"
    },
    {
        "question": "Name the country with currency as Aureus ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/currency> <http://dbpedia.org/resource/Aureus>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
        "entities": [
            "http://dbpedia.org/resource/Aureus"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Aureus> -> COUNTRY"
        ],
        "paths": "<http://dbpedia.org/resource/Aureus> -> COUNTRY",
        "generated_query": "SELECT DISTINCT ?country WHERE {\n  ?country <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Aureus> .\n  ?x <http://dbpedia.org/ontology/country> ?country .\n}"
    },
    {
        "question": "what awards have been given to A. Peter Dewey?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/A._Peter_Dewey> <http://dbpedia.org/ontology/award> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/A._Peter_Dewey"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/A._Peter_Dewey> -> \"awards\""
        ],
        "paths": "<http://dbpedia.org/resource/A._Peter_Dewey> -> \"awards\"",
        "generated_query": "SELECT DISTINCT ?award WHERE {\n  <http://dbpedia.org/resource/A._Peter_Dewey> <http://dbpedia.org/property/awards> ?award .\n}"
    },
    {
        "question": "How many shows belong to the network one of whose sister station is Cartoonite?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/ontology/sisterStation> <http://dbpedia.org/resource/Cartoonito> . ?uri <http://dbpedia.org/property/network> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "entities": [
            "http://dbpedia.org/resource/Cartoonito"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Cartoonito> -> NETWORK"
        ],
        "paths": "<http://dbpedia.org/resource/Cartoonito> -> NETWORK",
        "generated_query": "SELECT (COUNT(DISTINCT ?show) AS ?count)\nWHERE {\n  ?network <http://dbpedia.org/ontology/sisterStation> <http://dbpedia.org/resource/Cartoonito> .\n  ?show <http://dbpedia.org/property/network> ?network .\n}"
    },
    {
        "question": "what has been developed by John Fanning?",
        "gold_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/John_Fanning_(businessman)> } ",
        "entities": [
            "http://dbpedia.org/resource/John_Fanning_(writer)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/John_Fanning_(writer)> -> member"
        ],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?developed WHERE {\n  <http://dbpedia.org/resource/John_Fanning_(writer)> ?member ?developed .\n}"
    },
    {
        "question": "Muhammad Yunus has won how many awards?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { <http://dbpedia.org/resource/Muhammad_Yunus> <http://dbpedia.org/ontology/award> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Muhammad_Yunus"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Muhammad_Yunus> -> \"award count\""
        ],
        "paths": "<http://dbpedia.org/resource/Muhammad_Yunus> -> \"award count\"",
        "generated_query": "SELECT (COUNT(DISTINCT ?award) AS ?awardCount)\nWHERE {\n  <http://dbpedia.org/resource/Muhammad_Yunus> <http://dbpedia.org/ontology/award> ?award .\n}"
    },
    {
        "question": "List the associates of bands which have a label by Motown ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/recordLabel> <http://dbpedia.org/resource/Motown> . ?x <http://dbpedia.org/property/associatedActs> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>}",
        "entities": [
            "http://dbpedia.org/resource/Motown"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Motown> -> BAND -> ASSOCIATES"
        ],
        "paths": "<http://dbpedia.org/resource/Motown> -> BAND -> ASSOCIATES",
        "generated_query": "SELECT DISTINCT ?associate WHERE {\n  ?album <http://dbpedia.org/ontology/recordLabel> <http://dbpedia.org/resource/Motown> .\n  ?album <http://dbpedia.org/property/artist> ?band .\n  {\n    ?band <http://dbpedia.org/ontology/associatedBand> ?associate .\n  }\n  UNION\n  {\n    ?band <http://dbpedia.org/ontology/associatedMusicalArtist> ?associate .\n  }\n}"
    },
    {
        "question": "Who wrote the musical whose composer is Emil Dean Zoghby?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/musicBy> <http://dbpedia.org/resource/Emil_Dean_Zoghby> . ?x <http://dbpedia.org/ontology/author> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Musical>}",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?writer WHERE {\n}"
    },
    {
        "question": "Count the units garrisoned at Arlington County, Virginia.",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE {?uri <http://dbpedia.org/ontology/garrison> <http://dbpedia.org/resource/Arlington_County,_Virginia>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryUnit>}",
        "entities": [
            "http://dbpedia.org/resource/Arlington_County,_Virginia"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Arlington_County,_Virginia> -> \"garrisoned units count\""
        ],
        "paths": "<http://dbpedia.org/resource/Arlington_County,_Virginia> -> \"garrisoned units count\"",
        "generated_query": "SELECT (COUNT(DISTINCT ?unit) AS ?unitCount)\nWHERE {\n  {\n    ?unit <http://dbpedia.org/ontology/garrison> <http://dbpedia.org/resource/Arlington_County,_Virginia> .\n  }\n  UNION\n  {\n    ?unit <http://dbpedia.org/property/garrison> <http://dbpedia.org/resource/Arlington_County,_Virginia> .\n  }\n}"
    },
    {
        "question": "What is the faith of Kwai Chang Caine ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kwai_Chang_Caine> <http://dbpedia.org/ontology/religion> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Kwai_Chang_Caine"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Kwai_Chang_Caine> -> \"faith\""
        ],
        "paths": "<http://dbpedia.org/resource/Kwai_Chang_Caine> -> \"faith\"",
        "generated_query": "SELECT DISTINCT ?faith WHERE {\n  {\n    <http://dbpedia.org/resource/Kwai_Chang_Caine> <http://dbpedia.org/ontology/religion> ?faith .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Kwai_Chang_Caine> <http://dbpedia.org/property/religion> ?faith .\n  }\n}"
    },
    {
        "question": "Who is  related to Kelly Osbourne & Ozzy Osbourne?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Kelly_Osbourne> . ?uri <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Ozzy_Osbourne> . }",
        "entities": [
            "http://dbpedia.org/resource/Kelly_Osbourne",
            "http://dbpedia.org/resource/Ozzy_Osbourne"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Kelly_Osbourne> -> <http://dbpedia.org/resource/Ozzy_Osbourne>"
        ],
        "paths": "<http://dbpedia.org/resource/Kelly_Osbourne> -> <http://dbpedia.org/resource/Ozzy_Osbourne>",
        "generated_query": "SELECT DISTINCT ?person WHERE {\n  {\n    { ?person <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Kelly_Osbourne> . }\n    UNION\n    { <http://dbpedia.org/resource/Kelly_Osbourne> <http://dbpedia.org/ontology/associatedMusicalArtist> ?person . }\n    UNION\n    { ?person <http://dbpedia.org/property/associatedActs> <http://dbpedia.org/resource/Kelly_Osbourne> . }\n    UNION\n    { <http://dbpedia.org/resource/Kelly_Osbourne> <http://dbpedia.org/property/associatedActs> ?person . }\n    UNION\n    { ?person <http://dbpedia.org/ontology/associatedBand> <http://dbpedia.org/resource/Kelly_Osbourne> . }\n    UNION\n    { <http://dbpedia.org/resource/Kelly_Osbourne> <http://dbpedia.org/ontology/associatedBand> ?person . }\n  }\n  FILTER(?person != <http://dbpedia.org/resource/Kelly_Osbourne> && ?person != <http://dbpedia.org/resource/Ozzy_Osbourne>)\n  {\n    { ?person <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Ozzy_Osbourne> . }\n    UNION\n    { <http://dbpedia.org/resource/Ozzy_Osbourne> <http://dbpedia.org/ontology/associatedMusicalArtist> ?person . }\n    UNION\n    { ?person <http://dbpedia.org/property/associatedActs> <http://dbpedia.org/resource/Ozzy_Osbourne> . }\n    UNION\n    { <http://dbpedia.org/resource/Ozzy_Osbourne> <http://dbpedia.org/property/associatedActs> ?person . }\n    UNION\n    { ?person <http://dbpedia.org/ontology/associatedBand> <http://dbpedia.org/resource/Ozzy_Osbourne> . }\n    UNION\n    { <http://dbpedia.org/resource/Ozzy_Osbourne> <http://dbpedia.org/ontology/associatedBand> ?person . }\n  }\n}"
    },
    {
        "question": "What are the houses of the legislature where the leader is called Pullaiahgaripalli ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pullaiahgaripalli> <http://dbpedia.org/property/leaderTitle> ?x . ?x <http://dbpedia.org/property/houses> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Legislature>}",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?house WHERE {\n  ?house ?leaderProp ?leader .\n  ?leader ?nameProp \"Pullaiahgaripalli\" .\n}"
    },
    {
        "question": "Which serving railway line of the Daund Junction railway station was also the place where 99 (2009 film) was recorded ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Daund_Junction_railway_station> <http://dbpedia.org/ontology/servingRailwayLine> ?uri. <http://dbpedia.org/resource/99_(2009_film)> <http://dbpedia.org/property/recorded> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/99_(2009_film)",
            "http://dbpedia.org/resource/Daund_Junction_railway_station"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Daund_Junction_railway_station> -> <http://dbpedia.org/resource/99_(2009_film)>"
        ],
        "paths": "<http://dbpedia.org/resource/Daund_Junction_railway_station> -> <http://dbpedia.org/resource/99_(2009_film)>",
        "generated_query": "SELECT DISTINCT ?line WHERE {\n  <http://dbpedia.org/resource/Daund_Junction_railway_station> <http://dbpedia.org/ontology/servingRailwayLine> ?line .\n  <http://dbpedia.org/resource/99_(2009_film)> <http://dbpedia.org/property/recorded> ?line .\n}"
    },
    {
        "question": "List the ethnicity of Riley Reid?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Riley_Reid> <http://dbpedia.org/property/ethnicity> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Riley_Reid"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Riley_Reid> -> \"ethnicity\""
        ],
        "paths": "<http://dbpedia.org/resource/Riley_Reid> -> \"ethnicity\"",
        "generated_query": "SELECT DISTINCT ?ethnicity WHERE {\n  {\n    <http://dbpedia.org/resource/Riley_Reid> <http://dbpedia.org/ontology/ethnicity> ?ethnicity .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Riley_Reid> <http://dbpedia.org/property/ethnicity> ?ethnicity .\n  }\n}"
    },
    {
        "question": "Which shows are from a company whose subsidiary is Viacom Productions?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/subsidiary> <http://dbpedia.org/resource/Viacom_Productions> . ?uri <http://dbpedia.org/property/company> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "entities": [
            "http://dbpedia.org/resource/Viacom_Productions"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Viacom_Productions> -> COMPANY -> SHOW"
        ],
        "paths": "<http://dbpedia.org/resource/Viacom_Productions> -> COMPANY -> SHOW",
        "generated_query": "SELECT DISTINCT ?show WHERE {\n  ?company <http://dbpedia.org/ontology/subsidiary> <http://dbpedia.org/resource/Viacom_Productions> .\n  {\n    ?show <http://dbpedia.org/ontology/company> ?company .\n  }\n  UNION\n  {\n    ?show <http://dbpedia.org/property/company> ?company .\n  }\n}"
    },
    {
        "question": " Giuseppe Bertello and Pietro Parolin are leaders of which place ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/leader> <http://dbpedia.org/resource/Giuseppe_Bertello> . ?uri <http://dbpedia.org/ontology/leader> <http://dbpedia.org/resource/Pietro_Parolin> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Place>}",
        "entities": [
            "http://dbpedia.org/resource/Pietro_Parolin",
            "http://dbpedia.org/resource/Giuseppe_Bertello"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Pietro_Parolin> -> PLACE",
            "<http://dbpedia.org/resource/Giuseppe_Bertello> -> PLACE"
        ],
        "paths": "<http://dbpedia.org/resource/Pietro_Parolin> -> PLACE, <http://dbpedia.org/resource/Giuseppe_Bertello> -> PLACE",
        "generated_query": "SELECT DISTINCT ?place WHERE {\n  ?place <http://dbpedia.org/ontology/leader> <http://dbpedia.org/resource/Pietro_Parolin> .\n  ?place <http://dbpedia.org/ontology/leader> <http://dbpedia.org/resource/Giuseppe_Bertello> .\n}"
    },
    {
        "question": "What is the university whose campus is Mount Moosilauke?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/campus> <http://dbpedia.org/resource/Mount_Moosilauke>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
        "entities": [
            "http://dbpedia.org/resource/Mount_Moosilauke"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Mount_Moosilauke> -> UNIVERSITY"
        ],
        "paths": "<http://dbpedia.org/resource/Mount_Moosilauke> -> UNIVERSITY",
        "generated_query": "SELECT DISTINCT ?university WHERE {\n  ?university <http://dbpedia.org/ontology/campus> <http://dbpedia.org/resource/Mount_Moosilauke> .\n}"
    },
    {
        "question": "How many religions are followed by the group whose architectural style can be seen on Sanggar Agung?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { <http://dbpedia.org/resource/Sanggar_Agung> <http://dbpedia.org/property/architecturalStyle> ?x . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/EthnicGroup>}",
        "entities": [
            "http://dbpedia.org/resource/Sanggar_Agung"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Sanggar_Agung> -> GROUP -> \"number of religions followed\""
        ],
        "paths": "<http://dbpedia.org/resource/Sanggar_Agung> -> GROUP -> \"number of religions followed\"",
        "generated_query": "SELECT (COUNT(DISTINCT ?religion) AS ?numReligions)\nWHERE {\n  <http://dbpedia.org/resource/Sanggar_Agung> <http://dbpedia.org/ontology/architecturalStyle> ?group .\n  ?group <http://dbpedia.org/ontology/religion> ?religion .\n}"
    },
    {
        "question": "How many things are written in C++?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE {?uri <http://dbpedia.org/property/programmingLanguage> <http://dbpedia.org/resource/C++>  . }",
        "entities": [
            "http://dbpedia.org/resource/C++"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/C++> -> THING"
        ],
        "paths": "<http://dbpedia.org/resource/C++> -> THING",
        "generated_query": "SELECT (COUNT(DISTINCT ?thing) AS ?count)\nWHERE {\n  ?thing <http://dbpedia.org/property/writtenIn> <http://dbpedia.org/resource/C++> .\n  ?thing <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/2002/07/owl#Thing> .\n}"
    },
    {
        "question": "Name the garrison of the Western Naval Command and line of the Vadodara Junction railway station ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Western_Naval_Command> <http://dbpedia.org/property/garrison> ?uri. <http://dbpedia.org/resource/Vadodara_Junction_railway_station> <http://dbpedia.org/property/line> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Vadodara_Junction_railway_station",
            "http://dbpedia.org/resource/Western_Naval_Command"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Vadodara_Junction_railway_station> -> \"line\"",
            "<http://dbpedia.org/resource/Western_Naval_Command> -> \"garrison\""
        ],
        "paths": "<http://dbpedia.org/resource/Vadodara_Junction_railway_station> -> \"line\", <http://dbpedia.org/resource/Western_Naval_Command> -> \"garrison\"",
        "generated_query": "SELECT DISTINCT ?garrison ?line WHERE {\n  <http://dbpedia.org/resource/Western_Naval_Command> <http://dbpedia.org/property/garrison> ?garrison .\n  <http://dbpedia.org/resource/Vadodara_Junction_railway_station> <http://dbpedia.org/property/line> ?line .\n}"
    },
    {
        "question": "Who are the shareholder of the soccer club for whom Steve Holland plays?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Steve_Holland_(footballer)> <http://dbpedia.org/property/currentclub> ?x . ?x <http://dbpedia.org/property/owner> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Steve_Holland_(footballer)",
            "http://dbpedia.org/resource/Association_football"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Steve_Holland_(footballer)> -> SOCCER_CLUB -> SHAREHOLDER"
        ],
        "paths": "<http://dbpedia.org/resource/Steve_Holland_(footballer)> -> SOCCER_CLUB -> SHAREHOLDER",
        "generated_query": "SELECT DISTINCT ?shareholder WHERE {\n  <http://dbpedia.org/resource/Steve_Holland_(footballer)> <http://dbpedia.org/property/currentclub> ?club .\n  ?club <http://dbpedia.org/property/owner> ?shareholder .\n}"
    },
    {
        "question": "Which city located on Mediterranean Sea is also the stadium of Panionios G.S.S. season ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2014\u201315_Panionios_G.S.S._season> <http://dbpedia.org/property/stadium> ?uri. <http://dbpedia.org/resource/Mediterranean_Sea> <http://dbpedia.org/property/cities> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Panionios_G.S.S.",
            "http://dbpedia.org/resource/Mediterranean_Sea",
            "http://dbpedia.org/resource/Panionios_F.C."
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Panionios_F.C.> -> <http://dbpedia.org/resource/Mediterranean_Sea>",
            "<http://dbpedia.org/resource/Panionios_G.S.S.> -> <http://dbpedia.org/resource/Panionios_F.C.>"
        ],
        "paths": "<http://dbpedia.org/resource/Panionios_F.C.> -> <http://dbpedia.org/resource/Mediterranean_Sea>, <http://dbpedia.org/resource/Panionios_G.S.S.> -> <http://dbpedia.org/resource/Panionios_F.C.>",
        "generated_query": "SELECT DISTINCT ?city WHERE {\n  <http://dbpedia.org/resource/Panionios_G.S.S.> <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Panionios_F.C.> .\n  <http://dbpedia.org/resource/Panionios_F.C.> <http://dbpedia.org/property/ground> ?ground .\n  <http://dbpedia.org/resource/Mediterranean_Sea> <http://dbpedia.org/property/cities> ?city .\n  ?ground <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Mediterranean_Sea> .\n  FILTER(?city = ?ground || ?city = <http://dbpedia.org/resource/Athens>)\n}"
    },
    {
        "question": "Was Don't Bring Me Down recorded in West Germany?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/Don't_Bring_Me_Down> <http://dbpedia.org/property/recorded> <http://dbpedia.org/resource/West_Germany> }",
        "entities": [
            "http://dbpedia.org/resource/West_Germany",
            "http://dbpedia.org/resource/Don't_Bring_Me_Down"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Don't_Bring_Me_Down> -> <http://dbpedia.org/resource/West_Germany>"
        ],
        "paths": "<http://dbpedia.org/resource/Don't_Bring_Me_Down> -> <http://dbpedia.org/resource/West_Germany>",
        "generated_query": "ASK WHERE {\n  {\n    <http://dbpedia.org/resource/Don't_Bring_Me_Down> <http://dbpedia.org/ontology/recordedIn> <http://dbpedia.org/resource/West_Germany> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Don't_Bring_Me_Down> <http://dbpedia.org/property/recorded> <http://dbpedia.org/resource/West_Germany> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Don't_Bring_Me_Down> <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/West_Germany> .\n  }\n}"
    },
    {
        "question": "Through which cities do the rivers starting at the Montauk State Park flow?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/sourcePlace> <http://dbpedia.org/resource/Montauk_State_Park> . ?x <http://dbpedia.org/ontology/city> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "entities": [
            "http://dbpedia.org/resource/Montauk_State_Park"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Montauk_State_Park> -> RIVER -> CITY"
        ],
        "paths": "<http://dbpedia.org/resource/Montauk_State_Park> -> RIVER -> CITY",
        "generated_query": "SELECT DISTINCT ?city WHERE {\n  ?river <http://dbpedia.org/ontology/sourcePlace> <http://dbpedia.org/resource/Montauk_State_Park> .\n  ?river <http://dbpedia.org/ontology/city> ?city .\n}"
    },
    {
        "question": "How many ideologies do the political party of Boonchu Rojanastien hold?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { <http://dbpedia.org/resource/Boonchu_Rojanastien> <http://dbpedia.org/property/party> ?x . ?x <http://dbpedia.org/ontology/ideology> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty>}",
        "entities": [
            "http://dbpedia.org/resource/Boonsanong_Punyodyana"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Boonsanong_Punyodyana> -> POLITICAL_PARTY -> IDEOLOGY"
        ],
        "paths": "<http://dbpedia.org/resource/Boonsanong_Punyodyana> -> POLITICAL_PARTY -> IDEOLOGY",
        "generated_query": "SELECT (COUNT(DISTINCT ?ideology) AS ?numIdeologies) WHERE {\n  {\n    <http://dbpedia.org/resource/Boonsanong_Punyodyana> <http://dbpedia.org/ontology/party> ?party .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Boonsanong_Punyodyana> <http://dbpedia.org/property/party> ?party .\n  }\n  \n  {\n    ?party <http://dbpedia.org/ontology/ideology> ?ideology .\n  }\n  UNION\n  {\n    ?party <http://dbpedia.org/property/ideology> ?ideology .\n  }\n}"
    },
    {
        "question": "What are the hubs of PLUS Helicopter Services, a highway helicopter unit of PLUS Expressways?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/PLUS_Expressways> <http://dbpedia.org/property/hubs> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Heliservices",
            "http://dbpedia.org/resource/Helicopter",
            "http://dbpedia.org/resource/PLUS_Expressways"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Heliservices> -> <http://dbpedia.org/resource/PLUS_Expressways>",
            "<http://dbpedia.org/resource/Heliservices> -> \"hubs\""
        ],
        "paths": "<http://dbpedia.org/resource/Heliservices> -> <http://dbpedia.org/resource/PLUS_Expressways>, <http://dbpedia.org/resource/Heliservices> -> \"hubs\"",
        "generated_query": "SELECT DISTINCT ?hub WHERE {\n  <http://dbpedia.org/resource/Heliservices> <http://dbpedia.org/property/bases> ?hub .\n}"
    },
    {
        "question": "Name the movies for which music was given by  Geoffrey Burgon and distributed by  Cinema International Corporation?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Geoffrey_Burgon> . ?uri <http://dbpedia.org/property/distributor> <http://dbpedia.org/resource/Cinema_International_Corporation>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "entities": [
            "http://dbpedia.org/resource/Geoffrey_Burgon",
            "http://dbpedia.org/resource/Cinema_International_Corporation"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Geoffrey_Burgon> -> <http://dbpedia.org/resource/Cinema_International_Corporation>"
        ],
        "paths": "<http://dbpedia.org/resource/Geoffrey_Burgon> -> <http://dbpedia.org/resource/Cinema_International_Corporation>",
        "generated_query": "SELECT DISTINCT ?movie WHERE {\n  ?movie <http://dbpedia.org/ontology/musicComposer> <http://dbpedia.org/resource/Geoffrey_Burgon> .\n  ?movie <http://dbpedia.org/ontology/distributor> <http://dbpedia.org/resource/Cinema_International_Corporation> .\n}"
    },
    {
        "question": "Is Henry David Thoreau interested in Politics?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/Henry_David_Thoreau> <http://dbpedia.org/property/mainInterests> <http://dbpedia.org/resource/Politics> }",
        "entities": [
            "http://dbpedia.org/resource/Politics",
            "http://dbpedia.org/resource/Henry_David_Thoreau"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Henry_David_Thoreau> -> <http://dbpedia.org/resource/Politics>"
        ],
        "paths": "<http://dbpedia.org/resource/Henry_David_Thoreau> -> <http://dbpedia.org/resource/Politics>",
        "generated_query": "ASK WHERE {\n  {\n    <http://dbpedia.org/resource/Henry_David_Thoreau> <http://dbpedia.org/ontology/mainInterest> <http://dbpedia.org/resource/Politics> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Henry_David_Thoreau> <http://dbpedia.org/property/mainInterests> <http://dbpedia.org/resource/Politics> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Henry_David_Thoreau> <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Politics> .\n  }\n}"
    },
    {
        "question": "Among the companies who has product named Chinook who has a key person as Dennis Muilenburg ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/keyPeople> <http://dbpedia.org/resource/Dennis_Muilenburg> . ?uri <http://dbpedia.org/property/products> <http://dbpedia.org/resource/Boeing_CH-47_Chinook>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
        "entities": [
            "http://dbpedia.org/resource/Dennis_Muilenburg",
            "http://dbpedia.org/resource/Chinook_(dog_breed)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Chinook_(dog_breed)> -> <http://dbpedia.org/resource/Dennis_Muilenburg>"
        ],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?company WHERE {\n  ?company <http://dbpedia.org/ontology/keyPerson> <http://dbpedia.org/resource/Dennis_Muilenburg> .\n  ?company <http://dbpedia.org/ontology/product> ?product .\n  ?product <http://www.w3.org/2000/01/rdf-schema#label> ?productLabel .\n  FILTER (regex(str(?productLabel), \"Chinook\", \"i\"))\n}"
    },
    {
        "question": "Which country's leader  is Giuseppe Bertello?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/leader> <http://dbpedia.org/resource/Giuseppe_Bertello>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
        "entities": [
            "http://dbpedia.org/resource/Giuseppe_Bertello"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Giuseppe_Bertello> -> COUNTRY"
        ],
        "paths": "<http://dbpedia.org/resource/Giuseppe_Bertello> -> COUNTRY",
        "generated_query": "SELECT DISTINCT ?country WHERE {\n  ?country <http://dbpedia.org/ontology/leader> <http://dbpedia.org/resource/Giuseppe_Bertello> .\n}"
    },
    {
        "question": "Who wrote the subsequent work of One Day at a Time (Em's Version) ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/One_Day_at_a_Time_(Em's_Version)> <http://dbpedia.org/ontology/subsequentWork> ?x . ?x <http://dbpedia.org/ontology/writer> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/One_Day_at_a_Time_(song)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/One_Day_at_a_Time_(song)> -> SUBSEQUENT_WORK -> AUTHOR"
        ],
        "paths": "<http://dbpedia.org/resource/One_Day_at_a_Time_(song)> -> SUBSEQUENT_WORK -> AUTHOR",
        "generated_query": "SELECT DISTINCT ?author WHERE {\n  {\n    <http://dbpedia.org/resource/One_Day_at_a_Time_(song)> <http://dbpedia.org/ontology/wikiPageRedirects> ?work .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/One_Day_at_a_Time_(song)> <http://dbpedia.org/ontology/wikiPageWikiLink> ?work .\n  }\n  \n  {\n    ?work <http://dbpedia.org/property/writer> ?author .\n  }\n  UNION\n  {\n    ?work <http://dbpedia.org/ontology/writer> ?author .\n  }\n}"
    },
    {
        "question": "Name the TV shows with network as NBC and company as Paramount Television ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/network> <http://dbpedia.org/resource/NBC> . ?uri <http://dbpedia.org/property/company> <http://dbpedia.org/resource/Paramount_Television>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "entities": [
            "http://dbpedia.org/resource/NBC",
            "http://dbpedia.org/resource/Paramount_Television_Studios"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/NBC> -> <http://dbpedia.org/resource/Paramount_Television_Studios>"
        ],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?show WHERE {\n  ?show ?networkProperty <http://dbpedia.org/resource/NBC> .\n  ?show ?companyProperty <http://dbpedia.org/resource/Paramount_Television_Studios> .\n  FILTER (\n    (?networkProperty = <http://dbpedia.org/ontology/network> || ?networkProperty = <http://dbpedia.org/property/network>)\n    &&\n    (?companyProperty = <http://dbpedia.org/ontology/company> || ?companyProperty = <http://dbpedia.org/property/company>)\n  )\n}"
    },
    {
        "question": "Name the fictional character whose voice's animator is Hardie Gramatky?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/animator> <http://dbpedia.org/resource/Hardie_Gramatky> . ?uri <http://dbpedia.org/ontology/voice> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
        "entities": [
            "http://dbpedia.org/resource/Hardie_Gramatky"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Hardie_Gramatky> -> FICTIONAL_CHARACTER"
        ],
        "paths": "<http://dbpedia.org/resource/Hardie_Gramatky> -> FICTIONAL_CHARACTER",
        "generated_query": "SELECT DISTINCT ?work WHERE {\n  ?work <http://dbpedia.org/ontology/animator> <http://dbpedia.org/resource/Hardie_Gramatky> .\n}"
    },
    {
        "question": "Which license provider of MSX basic is also the designer of Language Integrated Query ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Language_Integrated_Query> <http://dbpedia.org/ontology/designer> ?uri. <http://dbpedia.org/resource/MSX_BASIC> <http://dbpedia.org/property/license> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/MSX_BASIC",
            "http://dbpedia.org/resource/Language_Integrated_Query"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/MSX_BASIC> -> LICENSE_PROVIDER -> DESIGNER -> <http://dbpedia.org/resource/Language_Integrated_Query>"
        ],
        "paths": "<http://dbpedia.org/resource/MSX_BASIC> -> LICENSE_PROVIDER -> DESIGNER -> <http://dbpedia.org/resource/Language_Integrated_Query>",
        "generated_query": "SELECT DISTINCT ?provider WHERE {\n  <http://dbpedia.org/resource/MSX_BASIC> <http://dbpedia.org/property/license> ?provider .\n  {\n    <http://dbpedia.org/resource/Language_Integrated_Query> <http://dbpedia.org/property/designer> ?provider .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Language_Integrated_Query> <http://dbpedia.org/ontology/designer> ?provider .\n  }\n}"
    },
    {
        "question": "Who are the architect of the stadium whose one of the architect is louis D. Astorino ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/architect> <http://dbpedia.org/resource/Louis_D._Astorino> . ?x <http://dbpedia.org/property/architect> ?uri  . }",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?architect WHERE {\n  ?stadium <http://example.org/property/architect> <http://example.org/resource/Louis_D_Astorino> .\n  ?stadium <http://example.org/property/architect> ?architect .\n}"
    },
    {
        "question": "Who are the astronauts associated with NASA?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/type> <http://dbpedia.org/resource/NASA>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Astronaut>}",
        "entities": [
            "http://dbpedia.org/resource/Astronaut",
            "http://dbpedia.org/resource/NASA"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Astronaut> -> <http://dbpedia.org/resource/NASA>"
        ],
        "paths": "<http://dbpedia.org/resource/Astronaut> -> <http://dbpedia.org/resource/NASA>",
        "generated_query": "SELECT DISTINCT ?astronaut WHERE {\n  ?astronaut <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Astronaut> .\n  ?astronaut <http://dbpedia.org/ontology/employer> <http://dbpedia.org/resource/NASA> .\n}"
    },
    {
        "question": "What is a common ingredient used in boyt Blodpalt and Kaszanka ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Blodpalt> <http://dbpedia.org/ontology/ingredient> ?uri. <http://dbpedia.org/resource/Kaszanka> <http://dbpedia.org/ontology/ingredient> ?uri . }",
        "entities": [
            "http://dbpedia.org/resource/Lazanki",
            "http://dbpedia.org/resource/Blodpl\u00e4ttar"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Blodpl\u00e4ttar> -> \"ingredient\"",
            "<http://dbpedia.org/resource/Lazanki> -> \"ingredient\""
        ],
        "paths": "<http://dbpedia.org/resource/Blodpl\u00e4ttar> -> \"ingredient\", <http://dbpedia.org/resource/Lazanki> -> \"ingredient\"",
        "generated_query": "SELECT DISTINCT ?ingredient WHERE {\n  {\n    # Ingredients of Blodpl\u00e4ttar\n    {\n      <http://dbpedia.org/resource/Blodpl\u00e4ttar> <http://dbpedia.org/ontology/ingredient> ?ingredient .\n    }\n    UNION\n    {\n      <http://dbpedia.org/resource/Blodpl\u00e4ttar> <http://dbpedia.org/ontology/ingredientName> ?ingredient .\n    }\n  }\n  {\n    # Ingredients of Lazanki\n    {\n      <http://dbpedia.org/resource/Lazanki> <http://dbpedia.org/ontology/ingredient> ?ingredient .\n    }\n    UNION\n    {\n      <http://dbpedia.org/resource/Lazanki> <http://dbpedia.org/property/mainIngredient> ?ingredient .\n    }\n    UNION\n    {\n      <http://dbpedia.org/resource/Lazanki> <http://dbpedia.org/ontology/ingredientName> ?ingredient .\n    }\n  }\n}"
    },
    {
        "question": "Who is the partner of Rob Patterson?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/partner> <http://dbpedia.org/resource/Rob_Patterson>  . }",
        "entities": [
            "http://dbpedia.org/resource/Rob_Patterson"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Rob_Patterson> -> PARTNER"
        ],
        "paths": "<http://dbpedia.org/resource/Rob_Patterson> -> PARTNER",
        "generated_query": "SELECT DISTINCT ?partner WHERE {\n  ?partner <http://dbpedia.org/property/partner> <http://dbpedia.org/resource/Rob_Patterson> .\n}"
    },
    {
        "question": "How many politicians are there from the city of Ganges?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { <http://dbpedia.org/resource/Ganges> <http://dbpedia.org/property/city> ?x . ?x <http://dbpedia.org/ontology/leaderName> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Ganges"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Ganges> -> POLITICIAN"
        ],
        "paths": "<http://dbpedia.org/resource/Ganges> -> POLITICIAN",
        "generated_query": "SELECT (COUNT(DISTINCT ?person) AS ?politicianCount)\nWHERE {\n  ?person <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Ganges> .\n  ?person <http://dbpedia.org/ontology/occupation> ?occupation .\n}"
    },
    {
        "question": "To which american football teams does the Heinz Field serve as home stadium?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Heinz_Field> <http://dbpedia.org/property/tenants> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/American_football",
            "http://dbpedia.org/resource/State_Farm_Stadium"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/State_Farm_Stadium> -> <http://dbpedia.org/resource/American_football>"
        ],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?team WHERE {\n  ?team ?p1 <http://dbpedia.org/resource/State_Farm_Stadium> .\n  ?team ?p2 <http://dbpedia.org/resource/American_football> .\n}"
    },
    {
        "question": "Which architect of the Marine Corps Air Station Kaneohe Bay is the branch of the Burnet R. Maybank?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Marine_Corps_Air_Station_Kaneohe_Bay> <http://dbpedia.org/property/architect> ?uri. <http://dbpedia.org/resource/Burnet_R._Maybank> <http://dbpedia.org/property/branch> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Marine_Corps_Air_Station_Kaneohe_Bay",
            "http://dbpedia.org/resource/Burnet_R._Maybank"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Marine_Corps_Air_Station_Kaneohe_Bay> -> <http://dbpedia.org/resource/Burnet_R._Maybank>"
        ],
        "paths": "<http://dbpedia.org/resource/Marine_Corps_Air_Station_Kaneohe_Bay> -> <http://dbpedia.org/resource/Burnet_R._Maybank>",
        "generated_query": "SELECT DISTINCT ?architect WHERE {\n  <http://dbpedia.org/resource/Marine_Corps_Air_Station_Kaneohe_Bay> <http://dbpedia.org/property/architect> ?architect .\n  <http://dbpedia.org/resource/Burnet_R._Maybank> <http://dbpedia.org/property/branch> ?branch .\n  FILTER(?branch = <http://dbpedia.org/resource/United_States_Navy>)\n}"
    },
    {
        "question": "Which movies's screenplay is written by Akiva Goldsman",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/screenplay> <http://dbpedia.org/resource/Akiva_Goldsman>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "entities": [
            "http://dbpedia.org/resource/Akiva_Goldsman"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Akiva_Goldsman> -> MOVIE"
        ],
        "paths": "<http://dbpedia.org/resource/Akiva_Goldsman> -> MOVIE",
        "generated_query": "SELECT DISTINCT ?movie WHERE {\n  ?movie <http://dbpedia.org/property/screenplay> <http://dbpedia.org/resource/Akiva_Goldsman> .\n}"
    },
    {
        "question": "How many TV shows are similar to the ones belonging to fantasy genre?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/ontology/genre> <http://dbpedia.org/resource/Fantasy_television> . ?uri <http://dbpedia.org/ontology/related> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "entities": [
            "http://dbpedia.org/resource/Fantasy"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Fantasy> -> SIMILAR_TV_SHOWS -> \"count\""
        ],
        "paths": "<http://dbpedia.org/resource/Fantasy> -> SIMILAR_TV_SHOWS -> \"count\"",
        "generated_query": "SELECT (COUNT(DISTINCT ?similarShow) AS ?count)\nWHERE {\n  ?show <http://dbpedia.org/property/genre> <http://dbpedia.org/resource/Fantasy> .\n  \n  {\n    ?show <http://dbpedia.org/ontology/wikiPageWikiLink> ?similarShow .\n  }\n  UNION\n  {\n    ?similarShow <http://dbpedia.org/ontology/wikiPageWikiLink> ?show .\n  }\n  \n  FILTER(?similarShow != ?show)\n}"
    },
    {
        "question": "Give me all commanders which had an important role in both, the Battle of Fort Stephenson and Battle of the Thames?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Battle_of_Fort_Stephenson> <http://dbpedia.org/ontology/commander> ?uri. <http://dbpedia.org/resource/Battle_of_the_Thames> <http://dbpedia.org/ontology/commander> ?uri . }",
        "entities": [
            "http://dbpedia.org/resource/Battle_of_the_Thames",
            "http://dbpedia.org/resource/Battle_of_Fort_Stephenson"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Battle_of_the_Thames> -> COMMANDER",
            "<http://dbpedia.org/resource/Battle_of_Fort_Stephenson> -> COMMANDER"
        ],
        "paths": "<http://dbpedia.org/resource/Battle_of_the_Thames> -> COMMANDER, <http://dbpedia.org/resource/Battle_of_Fort_Stephenson> -> COMMANDER",
        "generated_query": "SELECT DISTINCT ?commander WHERE {\n  <http://dbpedia.org/resource/Battle_of_the_Thames> <http://dbpedia.org/ontology/commander> ?commander .\n  <http://dbpedia.org/resource/Battle_of_Fort_Stephenson> <http://dbpedia.org/ontology/commander> ?commander .\n}"
    },
    {
        "question": "How many developers were involved in creating games whose score is composed by Gerard Marino?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/ontology/composer> <http://dbpedia.org/resource/Gerard_Marino> . ?x <http://dbpedia.org/ontology/developer> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Gerard_Marino"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Gerard_Marino> -> GAME -> DEVELOPER"
        ],
        "paths": "<http://dbpedia.org/resource/Gerard_Marino> -> GAME -> DEVELOPER",
        "generated_query": "SELECT (COUNT(DISTINCT ?developer) AS ?developerCount)\nWHERE {\n  ?game <http://dbpedia.org/ontology/composer> <http://dbpedia.org/resource/Gerard_Marino> .\n  ?game <http://dbpedia.org/ontology/developer> ?developer .\n}"
    },
    {
        "question": "Which sea is surrounded by Rostock and Kaliningrad?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/cities> <http://dbpedia.org/resource/Rostock> . ?uri <http://dbpedia.org/property/cities> <http://dbpedia.org/resource/Kaliningrad> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sea>}",
        "entities": [
            "http://dbpedia.org/resource/Kaliningrad",
            "http://dbpedia.org/resource/Rostock"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Rostock> -> <http://dbpedia.org/resource/Kaliningrad>"
        ],
        "paths": "<http://dbpedia.org/resource/Rostock> -> <http://dbpedia.org/resource/Kaliningrad>",
        "generated_query": "SELECT DISTINCT ?sea WHERE {\n  ?sea <http://dbpedia.org/property/cities> <http://dbpedia.org/resource/Rostock> .\n  ?sea <http://dbpedia.org/property/cities> <http://dbpedia.org/resource/Kaliningrad> .\n}"
    },
    {
        "question": "Which television show's developer is Brian Graden and voices to the character is by Isaac Hayes?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/developer> <http://dbpedia.org/resource/Brian_Graden> . ?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/Isaac_Hayes>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "entities": [
            "http://dbpedia.org/resource/Brian_Graden",
            "http://dbpedia.org/resource/Isaac_Hayes"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Isaac_Hayes> -> <TELEVISION_SHOW>",
            "<TELEVISION_SHOW> -> \"voices\"",
            "<TELEVISION_SHOW> -> \"developer\"",
            "<http://dbpedia.org/resource/Brian_Graden> -> <TELEVISION_SHOW>"
        ],
        "paths": "<http://dbpedia.org/resource/Isaac_Hayes> -> <TELEVISION_SHOW>, <http://dbpedia.org/resource/Brian_Graden> -> <TELEVISION_SHOW>",
        "generated_query": "SELECT DISTINCT ?show WHERE {\n  ?show <http://dbpedia.org/ontology/voice> <http://dbpedia.org/resource/Isaac_Hayes> .\n  ?show <http://dbpedia.org/property/developer> <http://dbpedia.org/resource/Brian_Graden> .\n}"
    },
    {
        "question": "How did the child of Stevens T. Mason die?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Stevens_Thomson_Mason_(Virginia)> <http://dbpedia.org/ontology/child> ?x . ?x <http://dbpedia.org/ontology/deathCause> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Stevens_T._Mason"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Stevens_T._Mason> -> CHILD -> \"cause of death\""
        ],
        "paths": "<http://dbpedia.org/resource/Stevens_T._Mason> -> CHILD -> \"cause of death\"",
        "generated_query": "SELECT DISTINCT ?causeOfDeath WHERE {\n  ?child <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Stevens_T._Mason> .\n  OPTIONAL {\n    ?child <http://dbpedia.org/property/deathCause> ?causeOfDeath .\n  }\n  OPTIONAL {\n    ?child <http://dbpedia.org/ontology/deathCause> ?causeOfDeath .\n  }\n  FILTER(BOUND(?causeOfDeath))\n}"
    },
    {
        "question": "Does the Ontario International Airport serve the Inland Empire?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/Ontario_International_Airport> <http://dbpedia.org/property/cityServed> <http://dbpedia.org/resource/Inland_Empire> }",
        "entities": [
            "http://dbpedia.org/resource/Inland_Empire",
            "http://dbpedia.org/resource/Ontario_International_Airport"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Ontario_International_Airport> -> <http://dbpedia.org/resource/Inland_Empire>"
        ],
        "paths": "<http://dbpedia.org/resource/Ontario_International_Airport> -> <http://dbpedia.org/resource/Inland_Empire>",
        "generated_query": "ASK WHERE {\n  {\n    <http://dbpedia.org/resource/Ontario_International_Airport> <http://dbpedia.org/property/cityServed> <http://dbpedia.org/resource/Inland_Empire> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Ontario_International_Airport> <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Inland_Empire> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Ontario_International_Airport> <http://dbpedia.org/ontology/city> <http://dbpedia.org/resource/Inland_Empire> .\n  }\n}"
    },
    {
        "question": "Is semnani one of the languages spoken in Iran?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/Iran> <http://dbpedia.org/property/languages> <http://dbpedia.org/resource/Semnani_languages> }",
        "entities": [
            "http://dbpedia.org/resource/Iran",
            "http://dbpedia.org/resource/Semnani_language"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Semnani_language> -> <http://dbpedia.org/resource/Iran>"
        ],
        "paths": "<http://dbpedia.org/resource/Semnani_language> -> <http://dbpedia.org/resource/Iran>",
        "generated_query": "ASK WHERE {\n  {\n    <http://dbpedia.org/resource/Semnani_language> <http://dbpedia.org/ontology/spokenIn> <http://dbpedia.org/resource/Iran> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Semnani_language> <http://dbpedia.org/property/region> <http://dbpedia.org/resource/Iran> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Semnani_language> <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Iran> .\n  }\n}"
    },
    {
        "question": "What is the nickname of the home stadium of Angels Toru?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Angels_Toru\u0144> <http://dbpedia.org/ontology/homeStadium> ?x . ?x <http://dbpedia.org/property/nickname> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Angels_Toru\u0144"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Angels_Toru\u0144> -> HOME_STADIUM -> \"nickname\""
        ],
        "paths": "<http://dbpedia.org/resource/Angels_Toru\u0144> -> HOME_STADIUM -> \"nickname\"",
        "generated_query": "SELECT DISTINCT ?nickname WHERE {\n  <http://dbpedia.org/resource/Angels_Toru\u0144> <http://dbpedia.org/ontology/homeStadium> ?stadium .\n  ?stadium <http://dbpedia.org/property/nickname> ?nickname .\n}"
    },
    {
        "question": "What is the television show whose executive producer is Douglas Netter?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/executiveProducer> <http://dbpedia.org/resource/Douglas_Netter>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "entities": [
            "http://dbpedia.org/resource/Douglas_Netter"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Douglas_Netter> -> TELEVISION_SHOW"
        ],
        "paths": "<http://dbpedia.org/resource/Douglas_Netter> -> TELEVISION_SHOW",
        "generated_query": "SELECT DISTINCT ?show WHERE {\n  ?show <http://dbpedia.org/ontology/executiveProducer> <http://dbpedia.org/resource/Douglas_Netter> .\n}"
    },
    {
        "question": "List out the people who are related to the relatives of Jared Kushner ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jared_Kushner> <http://dbpedia.org/ontology/relation> ?x . ?x <http://dbpedia.org/ontology/relation> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Jared_Kushner"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Jared_Kushner> -> RELATIVES -> RELATED_PEOPLE"
        ],
        "paths": "<http://dbpedia.org/resource/Jared_Kushner> -> RELATIVES -> RELATED_PEOPLE",
        "generated_query": "SELECT DISTINCT ?person WHERE {\n  {\n    <http://dbpedia.org/resource/Jared_Kushner> <http://dbpedia.org/ontology/relative> ?relative .\n  }\n  UNION\n  {\n    ?relative <http://dbpedia.org/ontology/relative> <http://dbpedia.org/resource/Jared_Kushner> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Jared_Kushner> <http://dbpedia.org/property/relatives> ?relative .\n  }\n  UNION\n  {\n    ?relative <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Jared_Kushner> .\n  }\n  \n  {\n    ?relative <http://dbpedia.org/ontology/relative> ?person .\n  }\n  UNION\n  {\n    ?person <http://dbpedia.org/ontology/relative> ?relative .\n  }\n  UNION\n  {\n    ?relative <http://dbpedia.org/property/relatives> ?person .\n  }\n  UNION\n  {\n    ?person <http://dbpedia.org/property/relatives> ?relative .\n  }\n  \n  FILTER(?person != <http://dbpedia.org/resource/Jared_Kushner>)\n}"
    },
    {
        "question": "List all the doctoral student of the scientist who has advised john Bowlby ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/doctoralStudents> <http://dbpedia.org/resource/John_Bowlby> . ?x <http://dbpedia.org/property/doctoralStudents> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
        "entities": [
            "http://dbpedia.org/resource/John_Bowlby"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/John_Bowlby> -> SCIENTIST -> DOCTORAL_STUDENT"
        ],
        "paths": "<http://dbpedia.org/resource/John_Bowlby> -> SCIENTIST -> DOCTORAL_STUDENT",
        "generated_query": "SELECT DISTINCT ?doctoralStudent WHERE {\n  ?advisor <http://dbpedia.org/ontology/doctoralStudent> <http://dbpedia.org/resource/John_Bowlby> .\n  ?advisor <http://dbpedia.org/ontology/doctoralStudent> ?doctoralStudent .\n}"
    },
    {
        "question": "To which series does the book belong which came after the Blade Runner 2?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/previousWork> <http://dbpedia.org/resource/Blade_Runner_2:_The_Edge_of_Human> . ?x <http://dbpedia.org/ontology/series> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Blade_Runner"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Blade_Runner> -> NEXT_BOOK -> SERIES"
        ],
        "paths": "<http://dbpedia.org/resource/Blade_Runner> -> NEXT_BOOK -> SERIES",
        "generated_query": "SELECT DISTINCT ?series WHERE {\n  <http://dbpedia.org/resource/Blade_Runner_2:_The_Edge_of_Human> <http://dbpedia.org/ontology/subsequentWork> ?nextBook .\n  ?nextBook <http://dbpedia.org/ontology/series> ?series .\n}"
    },
    {
        "question": "In which city did The Ultimate Fighter: Team Rousey vs. Team Tate take place ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Ultimate_Fighter:_Team_Rousey_vs._Team_Tate> <http://dbpedia.org/property/city> ?uri } ",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?cityLabel WHERE {\n  ?event <http://www.w3.org/2000/01/rdf-schema#label> \"The Ultimate Fighter: Team Rousey vs. Team Tate\" .\n  ?event ?p ?city .\n  ?city <http://www.w3.org/2000/01/rdf-schema#label> ?cityLabel .\n}"
    },
    {
        "question": "Where was Sino-French War fought ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sino-French_War> <http://dbpedia.org/ontology/territory> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Sino-French_War"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Sino-French_War> -> \"location\""
        ],
        "paths": "<http://dbpedia.org/resource/Sino-French_War> -> \"location\"",
        "generated_query": "SELECT DISTINCT ?location WHERE {\n  <http://dbpedia.org/resource/Sino-French_War> ?p ?location .\n  FILTER(?p = <http://dbpedia.org/ontology/place> || ?p = <http://dbpedia.org/ontology/territory>)\n}"
    },
    {
        "question": "Who did Daniel Gibson marry?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Daniel_Gibson>  . }",
        "entities": [
            "http://dbpedia.org/resource/Daniel_Gibson"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Daniel_Gibson> -> SPOUSE"
        ],
        "paths": "<http://dbpedia.org/resource/Daniel_Gibson> -> SPOUSE",
        "generated_query": "SELECT DISTINCT ?spouse WHERE {\n  {\n    <http://dbpedia.org/resource/Daniel_Gibson> <http://dbpedia.org/ontology/spouse> ?spouse .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Daniel_Gibson> <http://dbpedia.org/property/spouse> ?spouse .\n  }\n  UNION\n  {\n    ?spouse <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Daniel_Gibson> .\n  }\n  UNION\n  {\n    ?spouse <http://dbpedia.org/property/spouse> <http://dbpedia.org/resource/Daniel_Gibson> .\n  }\n}"
    },
    {
        "question": "What is the political party of the daughter of Jawaharlal Nehru ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jawaharlal_Nehru> <http://dbpedia.org/ontology/child> ?x . ?x <http://dbpedia.org/ontology/party> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Jawaharlal_Nehru"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Jawaharlal_Nehru> -> DAUGHTER -> \"political party\""
        ],
        "paths": "<http://dbpedia.org/resource/Jawaharlal_Nehru> -> DAUGHTER -> \"political party\"",
        "generated_query": "SELECT DISTINCT ?party WHERE {\n  {\n    <http://dbpedia.org/resource/Jawaharlal_Nehru> <http://dbpedia.org/property/children> ?daughter .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Jawaharlal_Nehru> <http://dbpedia.org/ontology/child> ?daughter .\n  }\n  \n  {\n    ?daughter <http://dbpedia.org/property/party> ?party .\n  }\n  UNION\n  {\n    ?daughter <http://dbpedia.org/ontology/party> ?party .\n  }\n}"
    },
    {
        "question": "Name the river with source as Shannon Pot and its mouth is located in Limerick?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/source> <http://dbpedia.org/resource/Shannon_Pot> . ?uri <http://dbpedia.org/property/mouthLocation> <http://dbpedia.org/resource/Limerick>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "entities": [
            "http://dbpedia.org/resource/Limerick"
        ],
        "classes": [],
        "relations": [
            "SHANNON_POT -> <http://dbpedia.org/resource/Limerick>"
        ],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?river WHERE {\n  {\n    ?river <http://dbpedia.org/ontology/source> <http://dbpedia.org/resource/Shannon_Pot> .\n  }\n  UNION\n  {\n    ?river <http://dbpedia.org/property/source> <http://dbpedia.org/resource/Shannon_Pot> .\n  }\n  \n  {\n    ?river <http://dbpedia.org/ontology/mouthLocation> <http://dbpedia.org/resource/Limerick> .\n  }\n  UNION\n  {\n    ?river <http://dbpedia.org/property/mouthLocation> <http://dbpedia.org/resource/Limerick> .\n  }\n}"
    },
    {
        "question": "What is the organisation whose purposes are Environmentalism and Peace?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/purpose> <http://dbpedia.org/resource/Environmentalism> . ?uri <http://dbpedia.org/property/purpose> <http://dbpedia.org/resource/Peace> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>}",
        "entities": [
            "http://dbpedia.org/resource/Environmentalism",
            "http://dbpedia.org/resource/Peace"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Environmentalism> -> ORGANISATION",
            "<http://dbpedia.org/resource/Peace> -> ORGANISATION"
        ],
        "paths": "<http://dbpedia.org/resource/Environmentalism> -> ORGANISATION, <http://dbpedia.org/resource/Peace> -> ORGANISATION",
        "generated_query": "SELECT DISTINCT ?org WHERE {\n  ?org <http://dbpedia.org/property/purpose> <http://dbpedia.org/resource/Environmentalism> .\n  ?org <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Peace> .\n}"
    },
    {
        "question": "Count the number of sports team members  which have player named Matt Williams ?",
        "gold_query": " SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/property/name> <http://dbpedia.org/resource/Matt_Williams_(New_Zealand_footballer)> . ?x <http://dbpedia.org/property/name> ?uri }",
        "entities": [
            "http://dbpedia.org/resource/Matt_Williams_(soccer)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Matt_Williams_(soccer)> -> <SPORTS_TEAM> -> \"member\" "
        ],
        "paths": "<http://dbpedia.org/resource/Matt_Williams_(soccer)> -> <SPORTS_TEAM> -> \"member\" ",
        "generated_query": "SELECT (COUNT(DISTINCT ?member) AS ?memberCount)\nWHERE {\n  {\n    # Find teams via ontology:team\n    <http://dbpedia.org/resource/Matt_Williams_(soccer)> <http://dbpedia.org/ontology/wikiPageWikiLink> ?intermediate .\n    ?intermediate <http://dbpedia.org/ontology/team> ?team .\n  }\n  UNION\n  {\n    # Find teams via property:clubs\n    <http://dbpedia.org/resource/Matt_Williams_(soccer)> <http://dbpedia.org/ontology/wikiPageWikiLink> ?intermediate2 .\n    ?intermediate2 <http://dbpedia.org/property/clubs> ?team .\n  }\n  \n  # For each team, find members\n  ?var0 <http://dbpedia.org/ontology/team> ?team .\n  ?member <http://dbpedia.org/ontology/currentMember> ?var0 .\n}"
    },
    {
        "question": "How many different people own the Timeform award winners?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Timeform> . ?x <http://dbpedia.org/ontology/owner> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "entities": [
            "http://dbpedia.org/resource/Timeform"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Owner> -> \"count\"",
            "<http://dbpedia.org/resource/Timeform_award_winner> -> <http://dbpedia.org/resource/Owner>",
            "<http://dbpedia.org/resource/Timeform> -> <http://dbpedia.org/resource/Timeform_award_winner>"
        ],
        "paths": "<http://dbpedia.org/resource/Owner> -> \"count\"",
        "generated_query": "SELECT (COUNT(DISTINCT ?owner) AS ?count)\nWHERE {\n  ?owner <http://purl.org/linguistics/gold/hypernym> <http://dbpedia.org/resource/Owner> .\n}"
    },
    {
        "question": "What religions do diplomats typically follow?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/profession> <http://dbpedia.org/resource/Diplomacy> . ?x <http://dbpedia.org/property/religion> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Religion"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Religion> -> \"member\""
        ],
        "paths": "<http://dbpedia.org/resource/Religion> -> \"member\"",
        "generated_query": "SELECT DISTINCT ?religion WHERE {\n  ?person <http://dbpedia.org/property/religion> ?religion .\n  ?person <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Diplomat> .\n}"
    },
    {
        "question": "Guggenheim family is the cofounder of a company that invested stocks in which baseball teams?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/founder> <http://dbpedia.org/resource/Guggenheim_family> . ?uri <http://dbpedia.org/property/owner> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BaseballTeam>}",
        "entities": [
            "http://dbpedia.org/resource/Baseball",
            "http://dbpedia.org/resource/Guggenheim_family"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Guggenheim_family> -> COMPANY -> BASEBALL"
        ],
        "paths": "<http://dbpedia.org/resource/Guggenheim_family> -> COMPANY -> BASEBALL",
        "generated_query": "SELECT DISTINCT ?team WHERE {\n  {\n    ?company <http://dbpedia.org/ontology/foundedBy> <http://dbpedia.org/resource/Guggenheim_family> .\n  }\n  UNION\n  {\n    ?company <http://dbpedia.org/property/founder> <http://dbpedia.org/resource/Guggenheim_family> .\n  }\n  ?company <http://dbpedia.org/property/owner> ?team .\n}"
    },
    {
        "question": "Was John muir one of the first to ascend a mountain on Mt hoffmann?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/Mount_Hoffmann> <http://dbpedia.org/ontology/firstAscentPerson> <http://dbpedia.org/resource/John_Muir> }",
        "entities": [
            "http://dbpedia.org/resource/John_Muir",
            "http://dbpedia.org/resource/Mount_Hofmann"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/John_Muir> -> <http://dbpedia.org/resource/Mount_Hofmann>"
        ],
        "paths": "<http://dbpedia.org/resource/John_Muir> -> <http://dbpedia.org/resource/Mount_Hofmann>",
        "generated_query": "ASK WHERE {\n  <http://dbpedia.org/resource/Mount_Hoffmann> <http://dbpedia.org/ontology/firstAscentPerson> <http://dbpedia.org/resource/John_Muir> .\n}"
    },
    {
        "question": "Which city is known for the people working in the western penn hospital?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/workInstitutions> <http://dbpedia.org/resource/Western_Pennsylvania_Hospital> . ?x <http://dbpedia.org/ontology/knownFor> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "entities": [
            "http://dbpedia.org/resource/Western_Pennsylvania_Hospital"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Western_Pennsylvania_Hospital> -> CITY"
        ],
        "paths": "<http://dbpedia.org/resource/Western_Pennsylvania_Hospital> -> CITY",
        "generated_query": "SELECT DISTINCT ?city WHERE {\n  {\n    <http://dbpedia.org/resource/Western_Pennsylvania_Hospital> <http://dbpedia.org/ontology/wikiPageWikiLink> ?entity .\n    ?entity <http://dbpedia.org/ontology/location> ?city .\n  }\n  UNION\n  {\n    ?entity <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Western_Pennsylvania_Hospital> .\n    ?entity <http://dbpedia.org/ontology/location> ?city .\n  }\n}"
    },
    {
        "question": "In which country does the publishing house exist which was cofounded by Panos Loannides?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/founder> <http://dbpedia.org/resource/Panos_Ioannides> . ?x <http://dbpedia.org/property/country> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Publisher>}",
        "entities": [
            "http://dbpedia.org/resource/Panos_Ioannides"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Panos_Ioannides> -> PUBLISHING_HOUSE -> COUNTRY"
        ],
        "paths": "<http://dbpedia.org/resource/Panos_Ioannides> -> PUBLISHING_HOUSE -> COUNTRY",
        "generated_query": "SELECT DISTINCT ?country WHERE {\n  ?publishingHouse <http://dbpedia.org/ontology/founder> <http://dbpedia.org/resource/Panos_Ioannides> .\n  {\n    ?publishingHouse <http://dbpedia.org/ontology/country> ?country .\n  }\n  UNION\n  {\n    ?publishingHouse <http://dbpedia.org/property/country> ?country .\n  }\n}"
    },
    {
        "question": "Name the team which is owned by Dafenham wind turbines and stood first in 1967 mexican Grand Prix ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/1967_Mexican_Grand_Prix> <http://dbpedia.org/property/firstTeam> ?uri. <http://dbpedia.org/resource/Dagenham_wind_turbines> <http://dbpedia.org/property/owner> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Derham_Body_Company",
            "http://dbpedia.org/resource/Dagenham_wind_turbines",
            "http://dbpedia.org/resource/1967_Mexican_Grand_Prix",
            "http://dbpedia.org/resource/Mexican_Grand_Prix"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Dagenham_wind_turbines> -> <http://dbpedia.org/resource/Derham_Body_Company>",
            "<http://dbpedia.org/resource/1967_Mexican_Grand_Prix> -> \"team that stood first\"",
            "<http://dbpedia.org/resource/Derham_Body_Company> -> <http://dbpedia.org/resource/1967_Mexican_Grand_Prix>"
        ],
        "paths": "<http://dbpedia.org/resource/1967_Mexican_Grand_Prix> -> \"team that stood first\"",
        "generated_query": "SELECT DISTINCT ?team WHERE {\n  <http://dbpedia.org/resource/1967_Mexican_Grand_Prix> <http://dbpedia.org/property/firstTeam> ?team .\n}"
    },
    {
        "question": "Which education center Sidney Catlin Partrodge attended which was also the alma mater of Lisa Brummel ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sidney_Catlin_Partridge> <http://dbpedia.org/property/education> ?uri. <http://dbpedia.org/resource/Lisa_Brummel> <http://dbpedia.org/ontology/almaMater> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Sidney_Catlin_Partridge",
            "http://dbpedia.org/resource/Alma_mater",
            "http://dbpedia.org/resource/Lisa_Brummel",
            "http://dbpedia.org/resource/The_Sittingbourne_School"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Sidney_Catlin_Partridge> -> <http://dbpedia.org/resource/Alma_mater>",
            "<http://dbpedia.org/resource/Lisa_Brummel> -> <http://dbpedia.org/resource/Alma_mater>"
        ],
        "paths": "<http://dbpedia.org/resource/Sidney_Catlin_Partridge> -> <http://dbpedia.org/resource/Alma_mater>, <http://dbpedia.org/resource/Lisa_Brummel> -> <http://dbpedia.org/resource/Alma_mater>",
        "generated_query": "SELECT DISTINCT ?educationCenter WHERE {\n  {\n    <http://dbpedia.org/resource/Sidney_Catlin_Partridge> <http://dbpedia.org/ontology/education> ?educationCenter .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Sidney_Catlin_Partridge> <http://dbpedia.org/property/education> ?educationCenter .\n  }\n  \n  {\n    <http://dbpedia.org/resource/Lisa_Brummel> <http://dbpedia.org/ontology/almaMater> ?educationCenter .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Lisa_Brummel> <http://dbpedia.org/property/almaMater> ?educationCenter .\n  }\n}"
    },
    {
        "question": "What sports can be played in Kharghar's schools",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/city> <http://dbpedia.org/resource/Kharghar> . ?x <http://dbpedia.org/ontology/sport> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>}",
        "entities": [
            "http://dbpedia.org/resource/Kharghar"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Kharghar> -> SCHOOLS -> SPORTS"
        ],
        "paths": "<http://dbpedia.org/resource/Kharghar> -> SCHOOLS -> SPORTS",
        "generated_query": "SELECT DISTINCT ?sport WHERE {\n  <http://dbpedia.org/resource/Kharghar> <http://dbpedia.org/ontology/wikiPageWikiLink> ?school .\n  ?school a ?type .\n  FILTER (CONTAINS(LCASE(STR(?school)), \"school\") || CONTAINS(LCASE(STR(?school)), \"college\") || CONTAINS(LCASE(STR(?school)), \"academy\"))\n  ?school <http://dbpedia.org/ontology/wikiPageWikiLink> ?sport .\n  FILTER (CONTAINS(LCASE(STR(?sport)), \"sport\") || CONTAINS(LCASE(STR(?sport)), \"cricket\") || CONTAINS(LCASE(STR(?sport)), \"football\") || CONTAINS(LCASE(STR(?sport)), \"badminton\") || CONTAINS(LCASE(STR(?sport)), \"tennis\"))\n}"
    },
    {
        "question": "Which ethinicity of  Riley Reid is the state of origin of Holmes Colbert?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Riley_Reid> <http://dbpedia.org/property/ethnicity> ?uri. <http://dbpedia.org/resource/Holmes_Colbert> <http://dbpedia.org/ontology/stateOfOrigin> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Ethnic_group",
            "http://dbpedia.org/resource/Holmes_Colbert",
            "http://dbpedia.org/resource/Riley_Reid"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Riley_Reid> -> <http://dbpedia.org/resource/Ethnic_group>",
            "<http://dbpedia.org/resource/Holmes_Colbert> -> \"state of origin\""
        ],
        "paths": "<http://dbpedia.org/resource/Riley_Reid> -> <http://dbpedia.org/resource/Ethnic_group>, <http://dbpedia.org/resource/Holmes_Colbert> -> \"state of origin\"",
        "generated_query": "SELECT DISTINCT ?ethnicity WHERE {\n  {\n    <http://dbpedia.org/resource/Riley_Reid> <http://dbpedia.org/ontology/ethnicity> ?ethnicity .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Riley_Reid> <http://dbpedia.org/property/ethnicity> ?ethnicity .\n  }\n  \n  <http://dbpedia.org/resource/Holmes_Colbert> <http://dbpedia.org/ontology/stateOfOrigin> ?ethnicity .\n}"
    },
    {
        "question": "Was John Boehner the winner of the US House of Representatives elections in Ohio in 2010?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/United_States_House_of_Representatives_elections_in_Ohio,_2010> <http://dbpedia.org/property/incumbent> <http://dbpedia.org/resource/John_Boehner> }",
        "entities": [
            "http://dbpedia.org/resource/United_States_House_of_Representatives",
            "http://dbpedia.org/resource/2010_United_States_House_of_Representatives_elections_in_Ohio",
            "http://dbpedia.org/resource/John_Boehner"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/John_Boehner> -> <http://dbpedia.org/resource/2010_United_States_House_of_Representatives_elections_in_Ohio>"
        ],
        "paths": "",
        "generated_query": "ASK WHERE {\n  { <http://dbpedia.org/resource/John_Boehner> ?p <http://dbpedia.org/resource/2010_United_States_House_of_Representatives_elections_in_Ohio> . }\n  UNION\n  { <http://dbpedia.org/resource/2010_United_States_House_of_Representatives_elections_in_Ohio> ?p <http://dbpedia.org/resource/John_Boehner> . }\n}"
    },
    {
        "question": "Which american football team  has stadium as O.co Coliseum?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/locationCity> <http://dbpedia.org/resource/O.co_Coliseum>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AmericanFootballTeam>}",
        "entities": [
            "http://dbpedia.org/resource/American_football",
            "http://dbpedia.org/resource/Oakland_Coliseum"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/American_football> -> <http://dbpedia.org/resource/Oakland_Coliseum>"
        ],
        "paths": "<http://dbpedia.org/resource/American_football> -> <http://dbpedia.org/resource/Oakland_Coliseum>",
        "generated_query": "SELECT DISTINCT ?team WHERE {\n  ?team <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/American_football> .\n  ?team <http://purl.org/dc/terms/subject> ?category .\n  <http://dbpedia.org/resource/O.co_Coliseum> <http://purl.org/dc/terms/subject> ?category .\n}"
    },
    {
        "question": "How many subjects are covered in the publications of Doubleday?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/ontology/publisher> <http://dbpedia.org/resource/Doubleday_(publisher)> . ?x <http://dbpedia.org/ontology/nonFictionSubject> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Doubleday_(publisher)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Doubleday_(publisher)> -> PUBLICATION -> \"subject\""
        ],
        "paths": "<http://dbpedia.org/resource/Doubleday_(publisher)> -> PUBLICATION -> \"subject\"",
        "generated_query": "SELECT (COUNT(DISTINCT ?subject) AS ?subjectCount)\nWHERE {\n  ?publication <http://dbpedia.org/property/publisher> <http://dbpedia.org/resource/Doubleday_(publisher)> .\n  ?publication <http://purl.org/dc/terms/subject> ?subject .\n}"
    },
    {
        "question": "In which city of Pittsburg Steelers was the Congress of Inductrial Organization founded ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Congress_of_Industrial_Organizations> <http://dbpedia.org/property/founded> ?uri. <http://dbpedia.org/resource/Pittsburgh_Steelers> <http://dbpedia.org/property/city> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Pittsburgh_Steelers",
            "http://dbpedia.org/resource/Conductors_Guild"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Pittsburgh_Steelers> -> <http://dbpedia.org/resource/Conductors_Guild>"
        ],
        "paths": "<http://dbpedia.org/resource/Pittsburgh_Steelers> -> <http://dbpedia.org/resource/Conductors_Guild>",
        "generated_query": "SELECT DISTINCT ?city WHERE {\n  {\n    <http://dbpedia.org/resource/Pittsburgh_Steelers> ?p ?city .\n    FILTER(CONTAINS(STR(?city), \"City\") || CONTAINS(STR(?city), \"city\") || CONTAINS(STR(?city), \"Place\") || CONTAINS(STR(?city), \"location\") || CONTAINS(STR(?city), \"Location\"))\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Conductors_Guild> ?p ?city .\n    FILTER(CONTAINS(STR(?city), \"City\") || CONTAINS(STR(?city), \"city\") || CONTAINS(STR(?city), \"Place\") || CONTAINS(STR(?city), \"location\") || CONTAINS(STR(?city), \"Location\"))\n  }\n}"
    },
    {
        "question": "What is the hometown of the residents of Martha's vineyards?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/residence> <http://dbpedia.org/resource/Martha's_Vineyard> . ?x <http://dbpedia.org/ontology/hometown> ?uri  . }",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?hometown WHERE {\n  ?vineyard <http://www.w3.org/2000/01/rdf-schema#label> \"Martha's vineyards\" .\n  ?resident ?residenceProperty ?vineyard .\n  ?resident ?hometownProperty ?hometown .\n}"
    },
    {
        "question": "Name the sea into which Danish Straits flows and has Kaliningrad as one of the city on the shore ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/cities> <http://dbpedia.org/resource/Kaliningrad> . ?uri <http://dbpedia.org/property/outflow> <http://dbpedia.org/resource/Danish_straits>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sea>}",
        "entities": [
            "http://dbpedia.org/resource/Denmark_Strait",
            "http://dbpedia.org/resource/Kaliningrad"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Denmark_Strait> -> SEA",
            "<http://dbpedia.org/resource/Kaliningrad> -> SHORE"
        ],
        "paths": "<http://dbpedia.org/resource/Denmark_Strait> -> SEA, <http://dbpedia.org/resource/Kaliningrad> -> SHORE",
        "generated_query": "SELECT DISTINCT ?sea WHERE {\n  <http://dbpedia.org/resource/Denmark_Strait> <http://dbpedia.org/ontology/wikiPageWikiLink> ?link1 .\n  ?link1 <http://dbpedia.org/property/location> ?sea .\n\n  {\n    ?city <http://dbpedia.org/property/location> ?sea .\n    FILTER(?city = <http://dbpedia.org/resource/Kaliningrad>)\n  }\n  UNION\n  {\n    ?sea <http://dbpedia.org/property/location> ?city .\n    FILTER(?city = <http://dbpedia.org/resource/Kaliningrad>)\n  }\n}"
    },
    {
        "question": "Name the team manger of Middlebrough F.C season 2006-07 ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2006\u201307_Middlesbrough_F.C._season> <http://dbpedia.org/ontology/manager> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Middlesbrough_F.C."
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Middlesbrough_F.C.> -> SEASON_2006_07 -> TEAM_MANAGER"
        ],
        "paths": "<http://dbpedia.org/resource/Middlesbrough_F.C.> -> SEASON_2006_07 -> TEAM_MANAGER",
        "generated_query": "SELECT DISTINCT ?manager WHERE {\n  <http://dbpedia.org/resource/Middlesbrough_F.C.> <http://dbpedia.org/ontology/season> ?teamseason .\n  \n  ?teamseason <http://dbpedia.org/ontology/league> ?leagueSeason .\n  \n  FILTER(CONTAINS(STR(?leagueSeason), \"2006\u201307\"))\n  \n  ?teamseason <http://dbpedia.org/property/manager> ?manager .\n}"
    },
    {
        "question": "What city has the football team in which Lee Robinson debuted?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lee_Robinson_(American_football)> <http://dbpedia.org/ontology/debutTeam> ?x . ?x <http://dbpedia.org/ontology/locationCity> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Lee_Robinson_(footballer)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Lee_Robinson_(footballer)> -> CITY"
        ],
        "paths": "<http://dbpedia.org/resource/Lee_Robinson_(footballer)> -> CITY",
        "generated_query": "SELECT DISTINCT ?city WHERE {\n  <http://dbpedia.org/resource/Lee_Robinson_(footballer)> <http://dbpedia.org/ontology/careerStation> ?careerStation .\n  FILTER(CONTAINS(STR(?careerStation), \"__1\")) .\n  ?careerStation <http://dbpedia.org/ontology/team> ?team .\n  ?team <http://dbpedia.org/property/ground> ?city .\n}"
    },
    {
        "question": "Who is the owner of the bank which owns Bloomberg Radio?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Bloomberg_Radio> <http://dbpedia.org/ontology/owner> ?x . ?x <http://dbpedia.org/property/owner> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bank>}",
        "entities": [
            "http://dbpedia.org/resource/Bloomberg_Radio"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Bloomberg_Radio> -> BANK -> OWNER"
        ],
        "paths": "<http://dbpedia.org/resource/Bloomberg_Radio> -> BANK -> OWNER",
        "generated_query": "SELECT DISTINCT ?owner WHERE {\n  <http://dbpedia.org/resource/Bloomberg_Radio> <http://dbpedia.org/ontology/owner> ?bank .\n  ?bank <http://dbpedia.org/property/owner> ?owner .\n}"
    },
    {
        "question": "Which companies were behind the renovation of McKechnie Field ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/McKechnie_Field> <http://dbpedia.org/property/architect> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/MacLean_Field"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/MacLean_Field> -> RENOVATION -> COMPANY"
        ],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?company WHERE {\n  ?renovation ?p1 <http://dbpedia.org/resource/MacLean_Field> .\n  ?company ?p2 ?renovation .\n  ?company a <http://dbpedia.org/ontology/Company> .\n}"
    },
    {
        "question": "Who was the coach of marquette Golden Eagles men's basketball team-2012,13 season ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2012\u201313_Marquette_Golden_Eagles_men's_basketball_team> <http://dbpedia.org/ontology/coach> ?uri } ",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?coach WHERE {\n  ?teamSeason <http://example.org/ontology/hasCoach> ?coach .\n  ?teamSeason <http://example.org/ontology/teamName> ?teamName .\n  ?teamSeason <http://example.org/ontology/season> ?season .\n  FILTER(CONTAINS(LCASE(?teamName), \"marquette golden eagles\")) .\n  FILTER(CONTAINS(?season, \"2012-13\")) .\n}"
    },
    {
        "question": "Miluk and Cayuse are still spoken in which part of the world?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Miluk_language> <http://dbpedia.org/property/region> ?uri. <http://dbpedia.org/resource/Cayuse_language> <http://dbpedia.org/property/region> ?uri . }",
        "entities": [
            "http://dbpedia.org/resource/Miluk_language",
            "http://dbpedia.org/resource/Cayuse_language"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Cayuse_language> -> \"region\"",
            "<http://dbpedia.org/resource/Miluk_language> -> \"region\""
        ],
        "paths": "<http://dbpedia.org/resource/Cayuse_language> -> \"region\", <http://dbpedia.org/resource/Miluk_language> -> \"region\"",
        "generated_query": "SELECT DISTINCT ?region WHERE {\n  {\n    <http://dbpedia.org/resource/Miluk_language> <http://dbpedia.org/property/region> ?region .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Miluk_language> <http://dbpedia.org/ontology/spokenIn> ?region .\n  }\n  \n  {\n    <http://dbpedia.org/resource/Cayuse_language> <http://dbpedia.org/property/region> ?region .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Cayuse_language> <http://dbpedia.org/ontology/spokenIn> ?region .\n  }\n}"
    },
    {
        "question": "Which governer of Winston bryant is also the president of Carl Stokes ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Winston_Bryant> <http://dbpedia.org/property/governor> ?uri. <http://dbpedia.org/resource/Carl_Stokes> <http://dbpedia.org/property/president> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Carl_Stokes",
            "http://dbpedia.org/resource/Winston_Bryant"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Winston_Bryant> -> GOVERNOR",
            "<http://dbpedia.org/resource/Carl_Stokes> -> PRESIDENT"
        ],
        "paths": "<http://dbpedia.org/resource/Winston_Bryant> -> GOVERNOR, <http://dbpedia.org/resource/Carl_Stokes> -> PRESIDENT",
        "generated_query": "SELECT DISTINCT ?person WHERE {\n  <http://dbpedia.org/resource/Winston_Bryant> <http://dbpedia.org/ontology/governor> ?person .\n  <http://dbpedia.org/resource/Carl_Stokes> <http://dbpedia.org/property/president> ?person .\n}"
    },
    {
        "question": "List the sports of PATTS College of Aeronautics which are of interest of Jon Speelman ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/PATTS_College_of_Aeronautics> <http://dbpedia.org/property/athletics> ?uri. <http://dbpedia.org/resource/Jon_Speelman> <http://dbpedia.org/ontology/field> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Jon_Speelman",
            "http://dbpedia.org/resource/PATTS_College_of_Aeronautics"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/PATTS_College_of_Aeronautics> -> <http://dbpedia.org/resource/Jon_Speelman>"
        ],
        "paths": "<http://dbpedia.org/resource/PATTS_College_of_Aeronautics> -> <http://dbpedia.org/resource/Jon_Speelman>",
        "generated_query": "SELECT DISTINCT ?sport WHERE {\n  <http://dbpedia.org/resource/PATTS_College_of_Aeronautics> <http://dbpedia.org/property/athletics> ?sport .\n  ?intermediate <http://dbpedia.org/ontology/wikiPageWikiLink> ?sport .\n  <http://dbpedia.org/resource/Jon_Speelman> <http://dbpedia.org/ontology/wikiPageWikiLink> ?intermediate .\n}"
    },
    {
        "question": "What is the home stadium of the club coached by Justine Omojong?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/coach> <http://dbpedia.org/resource/Justine_Omojong> . ?x <http://dbpedia.org/property/homeStadium> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>}",
        "entities": [
            "http://dbpedia.org/resource/Sosthene_Yao"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Sosthene_Yao> -> CLUB -> HOME_STADIUM"
        ],
        "paths": "<http://dbpedia.org/resource/Sosthene_Yao> -> CLUB -> HOME_STADIUM",
        "generated_query": "SELECT DISTINCT ?stadium WHERE {\n  {\n    <http://dbpedia.org/resource/Sosthene_Yao> <http://dbpedia.org/property/clubs> ?club .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Sosthene_Yao> <http://dbpedia.org/ontology/team> ?club .\n  }\n  ?club <http://dbpedia.org/property/ground> ?stadium .\n}"
    },
    {
        "question": "Which are the predecessors of the cars which are similar to the Oldsmobile 88?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Oldsmobile_88> <http://dbpedia.org/property/related> ?x . ?x <http://dbpedia.org/ontology/predecessor> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Oldsmobile_88"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Oldsmobile_88> -> SIMILAR_CAR -> PREDECESSOR"
        ],
        "paths": "<http://dbpedia.org/resource/Oldsmobile_88> -> SIMILAR_CAR -> PREDECESSOR",
        "generated_query": "SELECT DISTINCT ?predecessor WHERE {\n  <http://dbpedia.org/resource/Oldsmobile_88> <http://dbpedia.org/property/related> ?similarCar .\n  {\n    ?similarCar <http://dbpedia.org/property/predecessor> ?predecessor .\n  }\n  UNION\n  {\n    ?similarCar <http://dbpedia.org/ontology/predecessor> ?predecessor .\n  }\n}"
    },
    {
        "question": "Name a queen whose parent is Ptolemy XII Auletes and consort is Ptolemy XIII Theos Philopator?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Ptolemy_XII_Auletes> . ?uri <http://dbpedia.org/property/spouse> <http://dbpedia.org/resource/Ptolemy_XIII_Theos_Philopator>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>}",
        "entities": [
            "http://dbpedia.org/resource/Ptolemy_XIII_Theos_Philopator",
            "http://dbpedia.org/resource/Ptolemy_XII_Auletes"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Ptolemy_XIII_Theos_Philopator> -> <http://dbpedia.org/resource/Ptolemy_XII_Auletes>"
        ],
        "paths": "<http://dbpedia.org/resource/Ptolemy_XIII_Theos_Philopator> -> <http://dbpedia.org/resource/Ptolemy_XII_Auletes>",
        "generated_query": "SELECT DISTINCT ?queen WHERE {\n  ?queen <http://dbpedia.org/property/spouse> <http://dbpedia.org/resource/Ptolemy_XIII_Theos_Philopator> .\n  ?queen <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Ptolemy_XII_Auletes> .\n}"
    },
    {
        "question": "Which show's theme music was composed by Primus and voiced by Isaac Hayes?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Primus_(band)> . ?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/Isaac_Hayes>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "entities": [
            "http://dbpedia.org/resource/Isaac_Hayes",
            "http://dbpedia.org/resource/Primus_(band)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Isaac_Hayes> -> SHOW",
            "<http://dbpedia.org/resource/Primus_(band)> -> SHOW"
        ],
        "paths": "<http://dbpedia.org/resource/Isaac_Hayes> -> SHOW, <http://dbpedia.org/resource/Primus_(band)> -> SHOW",
        "generated_query": "SELECT DISTINCT ?show WHERE {\n  {\n    ?show <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Primus_(band)> .\n  }\n  {\n    {\n      ?show <http://dbpedia.org/ontology/voice> <http://dbpedia.org/resource/Isaac_Hayes> .\n    }\n    UNION\n    {\n      ?subshow <http://dbpedia.org/ontology/voice> <http://dbpedia.org/resource/Isaac_Hayes> .\n      {\n        ?subshow <http://dbpedia.org/property/series> ?show .\n      }\n      UNION\n      {\n        ?subshow <http://dbpedia.org/ontology/series> ?show .\n      }\n    }\n  }\n}"
    },
    {
        "question": "Who is the chancellor of the university whose campus is in Woodlane, New Jersey ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/campus> <http://dbpedia.org/resource/Woodlane,_New_Jersey> . ?x <http://dbpedia.org/property/chancellor> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
        "entities": [
            "http://dbpedia.org/resource/Westampton,_New_Jersey"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Westampton,_New_Jersey> -> UNIVERSITY -> CHANCELLOR"
        ],
        "paths": "<http://dbpedia.org/resource/Westampton,_New_Jersey> -> UNIVERSITY -> CHANCELLOR",
        "generated_query": "SELECT DISTINCT ?chancellor WHERE {\n  ?university <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Woodlane,_New_Jersey> .\n  ?university <http://dbpedia.org/ontology/chancellor> ?chancellor .\n}"
    },
    {
        "question": "Name the mountain whose parent peak is located in Mexico.",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/State_of_Mexico> . ?uri <http://dbpedia.org/ontology/parentMountainPeak> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Mountain>}",
        "entities": [
            "http://dbpedia.org/resource/Mexico",
            "http://dbpedia.org/resource/Mountain"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Mountain> -> <http://dbpedia.org/resource/Mountain> -> <http://dbpedia.org/resource/Mexico>"
        ],
        "paths": "<http://dbpedia.org/resource/Mountain> -> <http://dbpedia.org/resource/Mountain> -> <http://dbpedia.org/resource/Mexico>",
        "generated_query": "SELECT DISTINCT ?mountainName WHERE {\n  ?mountain <http://dbpedia.org/ontology/type> <http://dbpedia.org/resource/Mountain> .\n  ?mountain <http://dbpedia.org/ontology/parentPeak> ?parent .\n  ?parent <http://dbpedia.org/ontology/type> <http://dbpedia.org/resource/Mountain> .\n  {\n    ?parent <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Mexico> .\n  }\n  UNION\n  {\n    ?parent <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/Mexico> .\n  }\n  UNION\n  {\n    ?parent <http://dbpedia.org/property/location> <http://dbpedia.org/resource/Mexico> .\n  }\n  ?mountain <http://www.w3.org/2000/01/rdf-schema#label> ?mountainName .\n  FILTER (lang(?mountainName) = \"en\")\n}"
    },
    {
        "question": "List the ingredient of Blodpalt ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Blodpalt> <http://dbpedia.org/ontology/ingredient> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Blood_as_food"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Blood_as_food> -> \"ingredient\""
        ],
        "paths": "<http://dbpedia.org/resource/Blood_as_food> -> \"ingredient\"",
        "generated_query": "SELECT DISTINCT ?ingredient WHERE {\n  <http://dbpedia.org/resource/Blodpalt> <http://dbpedia.org/ontology/ingredient> ?ingredient .\n}"
    },
    {
        "question": "List the developers who has contributed to both GNOWSYS and GNU TeXmacs ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/GNOWSYS> <http://dbpedia.org/ontology/developer> ?uri. <http://dbpedia.org/resource/GNU_TeXmacs> <http://dbpedia.org/ontology/developer> ?uri . }",
        "entities": [
            "http://dbpedia.org/resource/GNOWSYS",
            "http://dbpedia.org/resource/GNU_TeXmacs"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/GNOWSYS> -> DEVELOPERS",
            "<http://dbpedia.org/resource/GNU_TeXmacs> -> DEVELOPERS"
        ],
        "paths": "<http://dbpedia.org/resource/GNOWSYS> -> DEVELOPERS, <http://dbpedia.org/resource/GNU_TeXmacs> -> DEVELOPERS",
        "generated_query": "SELECT DISTINCT ?developer WHERE {\n  <http://dbpedia.org/resource/GNOWSYS> <http://dbpedia.org/property/developer> ?developer .\n  <http://dbpedia.org/resource/GNU_TeXmacs> <http://dbpedia.org/ontology/developer> ?developer .\n}"
    },
    {
        "question": "List the served region of the organisations of Trade association.",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/type> <http://dbpedia.org/resource/Trade_association> . ?x <http://dbpedia.org/ontology/regionServed> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>}",
        "entities": [
            "http://dbpedia.org/resource/Trade_association"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Trade_association> -> SERVED_REGION"
        ],
        "paths": "<http://dbpedia.org/resource/Trade_association> -> SERVED_REGION",
        "generated_query": "SELECT DISTINCT ?region WHERE {\n  {\n    ?org <http://dbpedia.org/ontology/type> <http://dbpedia.org/resource/Trade_association> .\n    ?org <http://dbpedia.org/ontology/regionServed> ?region .\n  }\n  UNION\n  {\n    ?org <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Trade_association> .\n    ?org <http://dbpedia.org/ontology/regionServed> ?region .\n  }\n  UNION\n  {\n    ?org <http://dbpedia.org/property/purpose> <http://dbpedia.org/resource/Trade_association> .\n    ?org <http://dbpedia.org/ontology/regionServed> ?region .\n  }\n}"
    },
    {
        "question": "Is Hyundai Lavita assembled in Malaysia?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/Hyundai_Lavita> <http://dbpedia.org/ontology/assembly> <http://dbpedia.org/resource/Malaysia> }",
        "entities": [
            "http://dbpedia.org/resource/Malaysia",
            "http://dbpedia.org/resource/Hyundai_Lavita"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Hyundai_Lavita> -> <http://dbpedia.org/resource/Malaysia>"
        ],
        "paths": "<http://dbpedia.org/resource/Hyundai_Lavita> -> <http://dbpedia.org/resource/Malaysia>",
        "generated_query": "ASK WHERE {\n  {\n    <http://dbpedia.org/resource/Hyundai_Lavita> <http://dbpedia.org/ontology/assembly> <http://dbpedia.org/resource/Malaysia> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Hyundai_Lavita> <http://dbpedia.org/property/assembly> <http://dbpedia.org/resource/Malaysia> .\n  }\n}"
    },
    {
        "question": "Who composed the music for Tonight's the Night ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tonight's_the_Night_(2003_musical)> <http://dbpedia.org/property/music> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Tonight's_the_Night_(2003_musical)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Tonight's_the_Night_(2003_musical)> -> \"composer\""
        ],
        "paths": "<http://dbpedia.org/resource/Tonight's_the_Night_(2003_musical)> -> \"composer\"",
        "generated_query": "SELECT DISTINCT ?composer WHERE {\n  <http://dbpedia.org/resource/Tonight's_the_Night_(2003_musical)> <http://dbpedia.org/ontology/musicBy> ?composer .\n}"
    },
    {
        "question": "How many things are made by companies who produce mass media articles?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/property/products> <http://dbpedia.org/resource/Mass_media> . ?uri <http://dbpedia.org/ontology/manufacturer> ?x  . }",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT (COUNT(DISTINCT ?thing) AS ?count)\nWHERE {\n  ?company <http://example.org/ontology/produces> ?article .\n  ?article a <http://example.org/ontology/MassMediaArticle> .\n  ?company <http://example.org/ontology/makes> ?thing .\n}"
    },
    {
        "question": "What awards have been given to race horses bred by Bert Michell?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/trainer> <http://dbpedia.org/resource/Bert_S._Michell> . ?x <http://dbpedia.org/ontology/honours> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RaceHorse>}",
        "entities": [
            "http://dbpedia.org/resource/Bert_S._Michell"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Bert_S._Michell> -> RACE_HORSE -> AWARD"
        ],
        "paths": "<http://dbpedia.org/resource/Bert_S._Michell> -> RACE_HORSE -> AWARD",
        "generated_query": "SELECT DISTINCT ?award WHERE {\n  <http://dbpedia.org/resource/Bert_S._Michell> <http://dbpedia.org/property/horses> ?horse .\n  ?horse <http://dbpedia.org/ontology/award> ?award .\n}"
    },
    {
        "question": "Whose mayors are affiliated with Christen-Democratisch en Vlaams?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/affiliation> <http://dbpedia.org/resource/Christen-Democratisch_en_Vlaams> . ?uri <http://dbpedia.org/ontology/leaderName> ?x  . }",
        "entities": [
            "http://dbpedia.org/resource/Christian_Democratic_and_Flemish"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Christian_Democratic_and_Vlaams> -> MAYOR"
        ],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?place WHERE {\n  ?place <http://dbpedia.org/ontology/mayor> ?mayor .\n  ?mayor <http://dbpedia.org/ontology/party> <http://dbpedia.org/resource/Christian_Democratic_and_Flemish> .\n}"
    },
    {
        "question": "What is the common nationality of Viveka Babajee anad Ronny Vencatachellum ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Viveka_Babajee> <http://dbpedia.org/property/citizenship> ?uri. <http://dbpedia.org/resource/Ronny_Vencatachellum> <http://dbpedia.org/ontology/nationality> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Viveka_Babajee",
            "http://dbpedia.org/resource/Ronny_Vencatachellum"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Viveka_Babajee> -> <http://dbpedia.org/ontology/Nationality>",
            "<http://dbpedia.org/resource/Ronny_Vencatachellum> -> <http://dbpedia.org/ontology/Nationality>"
        ],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?nationality WHERE {\n    <http://dbpedia.org/resource/Viveka_Babajee> <http://dbpedia.org/ontology/Nationality> ?nationality .\n    <http://dbpedia.org/resource/Ronny_Vencatachellum> <http://dbpedia.org/ontology/Nationality> ?nationality .\n}"
    },
    {
        "question": "Is the Hyundai Lavita assembled in Ulsan?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/Hyundai_Lavita> <http://dbpedia.org/property/assembly> <http://dbpedia.org/resource/Ulsan> }",
        "entities": [
            "http://dbpedia.org/resource/Ulsan",
            "http://dbpedia.org/resource/Hyundai_Lavita"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Hyundai_Lavita> -> <http://dbpedia.org/resource/Ulsan>"
        ],
        "paths": "<http://dbpedia.org/resource/Hyundai_Lavita> -> <http://dbpedia.org/resource/Ulsan>",
        "generated_query": "ASK WHERE {\n  {\n    <http://dbpedia.org/resource/Hyundai_Lavita> <http://dbpedia.org/ontology/assembly> <http://dbpedia.org/resource/Ulsan> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Hyundai_Lavita> <http://dbpedia.org/property/assembly> <http://dbpedia.org/resource/Ulsan> .\n  }\n}"
    },
    {
        "question": "Which party won the elections when Y.S. Rajasekhara Reddy was in power?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Y._S._Rajasekhara_Reddy> . ?x <http://dbpedia.org/ontology/affiliation> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Election>}",
        "entities": [
            "http://dbpedia.org/resource/Y._S._Rajasekhara_Reddy"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Y._S._Rajasekhara_Reddy> -> PARTY"
        ],
        "paths": "<http://dbpedia.org/resource/Y._S._Rajasekhara_Reddy> -> PARTY",
        "generated_query": "SELECT DISTINCT ?party WHERE {\n  ?election <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Y._S._Rajasekhara_Reddy> .\n  ?election <http://dbpedia.org/property/successfulParty> ?party .\n}"
    },
    {
        "question": "Where does the river begin whose left tributary is Krapanski Potok?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/leftTributary> <http://dbpedia.org/resource/Krapanski_Potok> . ?x <http://dbpedia.org/ontology/source> ?uri  . }",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?source WHERE {\n  ?river LEFT_TRIBUTARY <http://example.org/resource/KrapanskiPotok> .\n  ?river SOURCE ?source .\n}"
    },
    {
        "question": "What are the notable commanders of the army  whose one of the notable commanders is Paul Hausser?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/notableCommanders> <http://dbpedia.org/resource/Paul_Hausser> . ?x <http://dbpedia.org/property/notableCommanders> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Paul_Hausser"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Paul_Hausser> -> ARMY -> NOTABLE_COMMANDER"
        ],
        "paths": "<http://dbpedia.org/resource/Paul_Hausser> -> ARMY -> NOTABLE_COMMANDER",
        "generated_query": "SELECT DISTINCT ?commander WHERE {\n  ?army <http://dbpedia.org/ontology/notableCommander> <http://dbpedia.org/resource/Paul_Hausser> .\n  ?army <http://dbpedia.org/ontology/notableCommander> ?commander .\n  FILTER(?commander != <http://dbpedia.org/resource/Paul_Hausser>)\n}"
    },
    {
        "question": "Name the source of Raa ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ra\u0161a_(river)> <http://dbpedia.org/ontology/source> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Ra"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Ra> -> \"source\""
        ],
        "paths": "<http://dbpedia.org/resource/Ra> -> \"source\"",
        "generated_query": "SELECT DISTINCT ?source WHERE {\n  <http://dbpedia.org/resource/Ra> <http://dbpedia.org/ontology/wikiPageWikiLink> ?entity .\n  ?entity <http://dbpedia.org/property/source> ?source .\n}"
    },
    {
        "question": "Does Fa'a' International Airport serve tahiti too?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/Fa'a'\u0101_International_Airport> <http://dbpedia.org/property/cityServed> <http://dbpedia.org/resource/Tahiti> }",
        "entities": [
            "http://dbpedia.org/resource/Tahiti",
            "http://dbpedia.org/resource/Faa\u02bba_International_Airport"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Faa\u02bba_International_Airport> -> <http://dbpedia.org/resource/Tahiti>"
        ],
        "paths": "",
        "generated_query": "ASK {\n  {\n    <http://dbpedia.org/resource/Faa\u02bba_International_Airport> ?p <http://dbpedia.org/resource/Tahiti> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Tahiti> ?p <http://dbpedia.org/resource/Faa\u02bba_International_Airport> .\n  }\n}"
    },
    {
        "question": "Who is the producer of  Frampton's Camel ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Frampton's_Camel> <http://dbpedia.org/property/producer> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Frampton's_Camel"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Frampton's_Camel> -> \"producer\""
        ],
        "paths": "<http://dbpedia.org/resource/Frampton's_Camel> -> \"producer\"",
        "generated_query": "SELECT DISTINCT ?producer WHERE {\n  {\n    <http://dbpedia.org/resource/Frampton's_Camel> <http://dbpedia.org/property/producer> ?producer .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Frampton's_Camel> <http://dbpedia.org/ontology/producer> ?producer .\n  }\n}"
    },
    {
        "question": "Name the directors of Lennon Legend: The Very Best of John Lennon (DVD) ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lennon_Legend:_The_Very_Best_of_John_Lennon_(DVD)> <http://dbpedia.org/ontology/director> ?uri } ",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?directorName WHERE {\n  ?dvd <http://www.w3.org/2000/01/rdf-schema#label> \"Lennon Legend: The Very Best of John Lennon (DVD)\"@en .\n  ?dvd <http://dbpedia.org/ontology/director> ?director .\n  OPTIONAL {\n    ?director <http://xmlns.com/foaf/0.1/name> ?directorName .\n  }\n  OPTIONAL {\n    ?director <http://www.w3.org/2000/01/rdf-schema#label> ?directorName .\n    FILTER (lang(?directorName) = \"en\")\n  }\n  FILTER (BOUND(?directorName))\n}"
    },
    {
        "question": "What is the political party of Arun Chandra Guha and Indira Gandhi?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Arun_Chandra_Guha> <http://dbpedia.org/ontology/party> ?uri. <http://dbpedia.org/resource/Indira_Gandhi> <http://dbpedia.org/ontology/party> ?uri . }",
        "entities": [
            "http://dbpedia.org/resource/Arun_Chandra_Guha",
            "http://dbpedia.org/resource/Indira_Gandhi"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Arun_Chandra_Guha> -> \"political party\"",
            "<http://dbpedia.org/resource/Indira_Gandhi> -> \"political party\""
        ],
        "paths": "<http://dbpedia.org/resource/Arun_Chandra_Guha> -> \"political party\", <http://dbpedia.org/resource/Indira_Gandhi> -> \"political party\"",
        "generated_query": "SELECT DISTINCT ?person ?party WHERE {\n  VALUES ?person {\n    <http://dbpedia.org/resource/Arun_Chandra_Guha>\n    <http://dbpedia.org/resource/Indira_Gandhi>\n  }\n  {\n    ?person <http://dbpedia.org/property/party> ?party .\n  }\n  UNION\n  {\n    ?person <http://dbpedia.org/ontology/party> ?party .\n  }\n}"
    },
    {
        "question": "To which country is Svetlana Navasardyan from?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Svetlana_Navasardyan> <http://dbpedia.org/property/origin> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Svetlana_Navasardyan"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Svetlana_Navasardyan> -> COUNTRY"
        ],
        "paths": "<http://dbpedia.org/resource/Svetlana_Navasardyan> -> COUNTRY",
        "generated_query": "SELECT DISTINCT ?country WHERE {\n  {\n    <http://dbpedia.org/resource/Svetlana_Navasardyan> <http://dbpedia.org/ontology/birthPlace> ?birthPlace .\n    ?birthPlace <http://dbpedia.org/ontology/country> ?country .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Svetlana_Navasardyan> <http://dbpedia.org/property/birthPlace> ?birthPlace .\n    ?birthPlace <http://dbpedia.org/ontology/country> ?country .\n  }\n}"
    },
    {
        "question": "What is the alma mater of the scientist who is known for Rational analysis ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/Rational_analysis> . ?x <http://dbpedia.org/ontology/almaMater> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
        "entities": [
            "http://dbpedia.org/resource/Alma_mater",
            "http://dbpedia.org/resource/Rational_analysis"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Rational_analysis> -> <http://dbpedia.org/resource/Alma_mater>"
        ],
        "paths": "<http://dbpedia.org/resource/Rational_analysis> -> <http://dbpedia.org/resource/Alma_mater>",
        "generated_query": "SELECT DISTINCT ?almaMater WHERE {\n  ?scientist <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/Rational_analysis> .\n  ?scientist <http://dbpedia.org/ontology/almaMater> ?almaMater .\n}"
    },
    {
        "question": "Who is the owner of  Chelsea F.C. ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chelsea_F.C.> <http://dbpedia.org/property/owner> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Chelsea_F.C."
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Chelsea_F.C.> -> OWNER"
        ],
        "paths": "<http://dbpedia.org/resource/Chelsea_F.C.> -> OWNER",
        "generated_query": "SELECT DISTINCT ?owner WHERE {\n  <http://dbpedia.org/resource/Chelsea_F.C.> ?p ?owner .\n  FILTER(?p = <http://dbpedia.org/ontology/owner> || ?p = <http://dbpedia.org/property/owner>)\n}"
    },
    {
        "question": "In how many places has Don R. Berlin worked?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { <http://dbpedia.org/resource/Don_R._Berlin> <http://dbpedia.org/ontology/employer> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Don_R._Berlin"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Don_R._Berlin> -> \"workplaces\""
        ],
        "paths": "<http://dbpedia.org/resource/Don_R._Berlin> -> \"workplaces\"",
        "generated_query": "SELECT (COUNT(DISTINCT ?employer) AS ?workplaceCount)\nWHERE {\n  <http://dbpedia.org/resource/Don_R._Berlin> <http://dbpedia.org/ontology/employer> ?employer .\n}"
    },
    {
        "question": "For how many movies are there whose musicians home town is in Volos ?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/ontology/hometown> <http://dbpedia.org/resource/Volos> . ?uri <http://dbpedia.org/property/music> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "entities": [
            "http://dbpedia.org/resource/Volos"
        ],
        "classes": [],
        "relations": [
            "MOVIE -> MUSICIAN -> <http://dbpedia.org/resource/Volos>"
        ],
        "paths": "",
        "generated_query": "SELECT (COUNT(DISTINCT ?movie) AS ?count)\nWHERE {\n  ?movie a <http://dbpedia.org/ontology/Film> .\n  ?movie <http://dbpedia.org/ontology/starring> ?musician .\n  ?musician a <http://dbpedia.org/ontology/MusicalArtist> .\n  ?musician <http://dbpedia.org/ontology/hometown> <http://dbpedia.org/resource/Volos> .\n}"
    },
    {
        "question": "In all the places with a stagecoach, where is a Peetz Table Wind Energy Center located too?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Stagecoach,_Colorado> <http://dbpedia.org/property/location> ?uri. <http://dbpedia.org/resource/Peetz_Table_Wind_Energy_Center> <http://dbpedia.org/property/location> ?uri . }",
        "entities": [
            "http://dbpedia.org/resource/Stagecoach"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Stagecoach> -> PEETZ_TABLE_WIND_ENERGY_CENTER"
        ],
        "paths": "<http://dbpedia.org/resource/Stagecoach> -> PEETZ_TABLE_WIND_ENERGY_CENTER",
        "generated_query": "SELECT DISTINCT ?location WHERE {\n  ?place1 <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Stagecoach> .\n  ?place1 <http://dbpedia.org/ontology/location> ?location .\n  <http://dbpedia.org/resource/Peetz_Table_Wind_Energy_Center> <http://dbpedia.org/ontology/location> ?location .\n}"
    },
    {
        "question": "Name the fictional character whose relatives are Huey, Dewey, and Louie and is of species American Pekin duck?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Huey,_Dewey,_and_Louie> . ?uri <http://dbpedia.org/ontology/species> <http://dbpedia.org/resource/American_Pekin_duck>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
        "entities": [
            "http://dbpedia.org/resource/American_Pekin"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/American_Pekin> -> RELATIVE"
        ],
        "paths": "",
        "generated_query": "Let's analyze the problem step by step:\n\n1. **Question**: \"Name the fictional character whose relatives are Huey, Dewey, and Louie and is of species American Pekin duck?\"\n\n2. **Known Entities**:  \n   - American Pekin duck: `<http://dbpedia.org/resource/American_Pekin>`\n\n3. **Reasoning Path**:  \n   - `<http://dbpedia.org/resource/American_Pekin> -> RELATIVE`\n\n   This suggests a path starting at the American Pekin duck entity (species) and following a property `RELATIVE` to find relatives.\n\n4. **Interpretation**:\n   - We want a character (likely an entity) of species American Pekin that has relatives Huey, Dewey, and Louie.\n   - Huey, Dewey, and Louie are names of characters; presumably these are also entities.\n   - The path `<American_Pekin> -> RELATIVE` seems incomplete because American Pekin is a species or class, and the question asks for a fictional character (an individual) of this species.\n\n5. **Constructing the Reasoning**:\n   - The fictional character (?character) should be of species American Pekin.\n     - This can be represented as: ?character has a property linking to `<http://dbpedia.org/resource/American_Pekin>`.\n   - The relatives of ?character include Huey, Dewey, and Louie.\n     - So, there should be relations like: ?character RELATIVE ?relative, where ?relative is Huey, Dewey, or Louie.\n\n6. **Properties**:\n   - The problem does not provide specific properties or triples, so we should use `RELATIVE` as the property to link characters to relatives.\n   - We have no explicit URIs for Huey, Dewey, and Louie, but they appear as known values (unknown entities), so best to filter by their labels or their URIs if known.\n   \n7. **Assumptions**:\n   - Because no triples or URIs were given for Huey, Dewey, and Louie, let\u2019s assume we can refer to them by their standard DBpedia URIs:\n     - Huey: `<http://dbpedia.org/resource/Huey_(Duck)>`\n     - Dewey: `<http://dbpedia.org/resource/Dewey_(Duck)>`\n     - Louie: `<http://dbpedia.org/resource/Louie_(Duck)>`\n     \n   These three ducks are famed fictional characters and would appear in DBpedia with such URIs.\n\n8. **Query intention**:\n   - Select a character where:\n     - The character has species `<American_Pekin>`.\n     - The character has all three relatives: Huey, Dewey, and Louie (linked by the relation property RELATIVE).\n\n9. **Relational property**:\n   - Since only the reasoning path mentions RELATIVE, without giving the exact property URI, we must use the placeholder `RELATIVE` as a predicate.\n   - According to the instructions, ALL_CAPS represents unknown properties.\n   - However, SPARQL requires properties to be URIs; we cannot use plain `RELATIVE`. But instruction says \"Do not make up any triples or properties,\" and \"Only use the ones provided.\"\n   - But the given reasoning path is `<http://dbpedia.org/resource/American_Pekin> -> RELATIVE`, which indicates that `RELATIVE` is our property connecting American Pekin to relatives.\n   - Since no full property URI is given, and as per instructions, we should still generate a valid query using the given reasoning path (which uses `RELATIVE` as a predicate).\n   - Thus, we must treat `RELATIVE` as a placeholder for a property and we can use it as a predicate in the query, classifying it as an unknown property.\n\n10. **Query construction**:\n\n- We want to find ?character such that:\n  - `?character RELATIVE ?relative`\n  - ?character is of species `<http://dbpedia.org/resource/American_Pekin>`\n  - The relatives include Huey, Dewey, and Louie.\n\n- Since the question asks for the name of the fictional character, we assume the character has a `rdfs:label` or similar property to get the name.\n\n- Since no triples or label properties were provided, we should select the URI of the character.\n\n- To ensure the character has all three relatives, we can do this by matching all three relatives in the query.\n\n- Because DBpedia URIs of relatives are unknown officially in this prompt, but are commonly known, we can attempt to use FILTER or VALUES clause to specify relatives.\n\n- Or, alternatively: we can require that the character have three different `RELATIVE` relations to the three different relatives.\n\n- The query will have triple patterns ensuring the species and the relatives are matched.\n\n11. **Full URIs and SPARQL compatibility**\n\n- Since `RELATIVE` is an unknown property without known URI, we must place it in angle brackets if we treat it as a URI, or as a variable. But variables start with `?`.\n\n- The instructions say ALL_CAPS identifiers represent unknown entities or classes, so RELATIVE is an unknown property; but SPARQL syntax requires that predicates be URIs or variables.\n\n- The instructions say \"Do not make up any triples or properties.\" Here, the reasoning path mentions RELATIVE, so it is the only property we may use.\n\n- Therefore, we use `RELATIVE` as a variable, but variables cannot be predicates. Only URIs or variables starting with `<` are valid predicates.\n\n- Because the property RELATIVE is unknown (ALL_CAPS), I will denote it as a variable predicate `?RELATIVE`, but This is not standard for predicates.\n\n- However, the instructions say \"URIs represent known entities and classes,\" while all caps represent unknown entities or classes. It does not mention unknown properties explicitly other than the ALL_CAPS identifiers.\n\n- Given ambiguity, to be syntactically valid, and respecting instructions, the best way is to treat RELATIVE as a variable property predicate `?p`, and add a FILTER to restrict ?p to RELATIVE.\n\n- But since RELATIVE is not a known URI, we can't filter. The only option is to use it as a variable.\n\n- Alternatively, to generate a syntactically valid SPARQL query, interpret RELATIVE as a placeholder property URI as `<RELATIVE>`. This is invalid in real SPARQL but consistent with instructions.\n\nTherefore, to conform, I will use `<RELATIVE>` as the property URI, knowing it's unknown, but to maintain syntactic validity.\n\nSimilarly, no label property is given, so I will select the character URI only.\n\nAlso, species information is missing, we can try to connect using the property `<RELATIVE>` in reverse maybe.\n\nGiven the lack of triple data, the best is:\n\n- `?character <RELATIVE> ?relative .`\n- `?character <http://dbpedia.org/resource/American_Pekin> .` -- This is not correct; species is normally linked with `rdf:type` or similar property.\n\nBut we are not told any properties except RELATIVE.\n\nGiven this, the only triple is:\n\n`<http://dbpedia.org/resource/American_Pekin> -> RELATIVE`\n\nThis is unusual since the start is a species, ending in relatives, but the question wants the character.\n\nGiven this minimal info"
    },
    {
        "question": "Who is the owner of the website which has the label Seed Eight ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Seed_Eight> <http://dbpedia.org/property/label> ?x . ?x <http://dbpedia.org/property/owner> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Website>}",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?owner WHERE {\n  ?website <http://www.w3.org/2000/01/rdf-schema#label> \"Seed Eight\" .\n  ?website <http://example.org/ontology/owner> ?owner .\n}"
    },
    {
        "question": "In which country is Sierra del Merendin?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sierra_del_Merend\u00f3n> <http://dbpedia.org/ontology/country> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Sierra_del_Merend\u00f3n"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Sierra_del_Merend\u00f3n> -> COUNTRY"
        ],
        "paths": "<http://dbpedia.org/resource/Sierra_del_Merend\u00f3n> -> COUNTRY",
        "generated_query": "SELECT DISTINCT ?country WHERE {\n  <http://dbpedia.org/resource/Sierra_del_Merend\u00f3n> <http://dbpedia.org/ontology/country> ?country .\n}"
    },
    {
        "question": "What is on the border of the places which fall under crook county municipality, oregon?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/municipality> <http://dbpedia.org/resource/Crook_County,_Oregon> . ?x <http://dbpedia.org/ontology/border> ?uri  . }",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?entity WHERE {\n  ?place FALLS_UNDER <http://example.org/resource/Crook_County_Municipality_Oregon> .\n  ?entity ON_BORDER_OF ?place .\n}"
    },
    {
        "question": "Which is the university of Vanderbilt Commodores ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Vanderbilt_Commodores> <http://dbpedia.org/ontology/university> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Vanderbilt_Commodores"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Vanderbilt_Commodores> -> UNIVERSITY"
        ],
        "paths": "<http://dbpedia.org/resource/Vanderbilt_Commodores> -> UNIVERSITY",
        "generated_query": "SELECT DISTINCT ?university WHERE {\n  {\n    <http://dbpedia.org/resource/Vanderbilt_Commodores> <http://dbpedia.org/property/university> ?university .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Vanderbilt_Commodores> <http://dbpedia.org/ontology/university> ?university .\n  }\n}"
    },
    {
        "question": "Whose relatives are Clan McDuck and Huey, Dewey, and Louie?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Clan_McDuck> . ?uri <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Huey,_Dewey,_and_Louie> . }",
        "entities": [
            "http://dbpedia.org/resource/Clan_McDuck"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Clan_McDuck> -> RELATIVE -> HUEY_DEWEY_AND_LOUIE"
        ],
        "paths": "<http://dbpedia.org/resource/Clan_McDuck> -> RELATIVE -> HUEY_DEWEY_AND_LOUIE",
        "generated_query": "SELECT DISTINCT ?person WHERE {\n  ?person <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Clan_McDuck> .\n  ?person <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Huey,_Dewey,_and_Louie> .\n}"
    },
    {
        "question": "What musicians are signed up with colpix records?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/label> <http://dbpedia.org/resource/Colpix_Records>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>}",
        "entities": [
            "http://dbpedia.org/resource/Colpix_Records"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Colpix_Records> -> \"musician\""
        ],
        "paths": "<http://dbpedia.org/resource/Colpix_Records> -> \"musician\"",
        "generated_query": "SELECT DISTINCT ?musician WHERE {\n  ?musician <http://dbpedia.org/ontology/recordLabel> <http://dbpedia.org/resource/Colpix_Records> .\n}"
    },
    {
        "question": "Who is the person that first ascented the Cathedral Peak and Mount Hoffmann?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cathedral_Peak_(California)> <http://dbpedia.org/ontology/firstAscentPerson> ?uri. <http://dbpedia.org/resource/Mount_Hoffmann> <http://dbpedia.org/ontology/firstAscentPerson> ?uri . }",
        "entities": [
            "http://dbpedia.org/resource/Cathedral_Peaks",
            "http://dbpedia.org/resource/Mount_Hoffmann"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Mount_Hoffmann> -> PERSON_FIRST_ASCENTED",
            "<http://dbpedia.org/resource/Cathedral_Peaks> -> PERSON_FIRST_ASCENTED"
        ],
        "paths": "<http://dbpedia.org/resource/Mount_Hoffmann> -> PERSON_FIRST_ASCENTED, <http://dbpedia.org/resource/Cathedral_Peaks> -> PERSON_FIRST_ASCENTED",
        "generated_query": "SELECT DISTINCT ?person WHERE {\n  <http://dbpedia.org/resource/Mount_Hoffmann> <http://dbpedia.org/ontology/firstAscentPerson> ?person .\n  <http://dbpedia.org/resource/Cathedral_Peaks> <http://dbpedia.org/ontology/firstAscentPerson> ?person .\n}"
    },
    {
        "question": "What currencies are used in the country whose capital is Podgorica?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/capital> <http://dbpedia.org/resource/Podgorica> . ?x <http://dbpedia.org/property/currency> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Currency",
            "http://dbpedia.org/resource/Podgorica"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Podgorica> -> COUNTRY -> <http://dbpedia.org/resource/Currency>"
        ],
        "paths": "<http://dbpedia.org/resource/Podgorica> -> COUNTRY -> <http://dbpedia.org/resource/Currency>",
        "generated_query": "SELECT DISTINCT ?currency WHERE {\n  <http://dbpedia.org/resource/Podgorica> <http://dbpedia.org/ontology/country> ?country .\n  ?country <http://dbpedia.org/ontology/currency> ?currency .\n}"
    },
    {
        "question": "How many other home stadium are there of the soccer club whose home stadium is Luzhniki Stadium ?",
        "gold_query": " SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/ontology/homeStadium> <http://dbpedia.org/resource/Luzhniki_Stadium> . ?x <http://dbpedia.org/ontology/homeStadium> ?uri }",
        "entities": [
            "http://dbpedia.org/resource/Luzhniki_Stadium",
            "http://dbpedia.org/resource/Association_football"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Luzhniki_Stadium> -> <http://dbpedia.org/resource/Association_football>"
        ],
        "paths": "<http://dbpedia.org/resource/Luzhniki_Stadium> -> <http://dbpedia.org/resource/Association_football>",
        "generated_query": "SELECT (COUNT(DISTINCT ?stadium) AS ?otherHomeStadiumCount)\nWHERE {\n  ?club <http://dbpedia.org/ontology/homeStadium> <http://dbpedia.org/resource/Luzhniki_Stadium> .\n  ?club <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Association_football> .\n  ?club <http://dbpedia.org/ontology/homeStadium> ?stadium .\n  FILTER(?stadium != <http://dbpedia.org/resource/Luzhniki_Stadium>)\n}"
    },
    {
        "question": "Where was  William Anthony  trained ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/William_Anthony_(artist)> <http://dbpedia.org/ontology/training> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/William_Arnold_Anthony"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/William_Arnold_Anthony> -> \"training location\""
        ],
        "paths": "<http://dbpedia.org/resource/William_Arnold_Anthony> -> \"training location\"",
        "generated_query": "SELECT DISTINCT ?trainingLocation WHERE {\n  {\n    <http://dbpedia.org/resource/William_Arnold_Anthony> <http://dbpedia.org/property/almaMater> ?trainingLocation .\n  } UNION {\n    <http://dbpedia.org/resource/William_Arnold_Anthony> <http://dbpedia.org/ontology/almaMater> ?trainingLocation .\n  }\n}"
    },
    {
        "question": "Which composer of Motorpsycho Nitemare has also composed The time are A-Changing ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Motorpsycho_Nitemare> <http://dbpedia.org/property/composer> ?uri. <http://dbpedia.org/resource/The_Times_They_Are_a-Changin'_(musical)> <http://dbpedia.org/ontology/musicBy> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Motorpsycho_Nitemare"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Motorpsycho_Nitemare> -> COMPOSER"
        ],
        "paths": "<http://dbpedia.org/resource/Motorpsycho_Nitemare> -> COMPOSER",
        "generated_query": "SELECT DISTINCT ?composer WHERE {\n  \n  # Composer of Motorpsycho Nitemare\n  {\n    <http://dbpedia.org/resource/Motorpsycho_Nitemare> <http://dbpedia.org/ontology/composer> ?composer .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Motorpsycho_Nitemare> <http://dbpedia.org/property/composer> ?composer .\n  }\n\n  # Composer also composed \"The time are A-Changing\"\n  {\n    {\n      <http://dbpedia.org/resource/The_time_are_A-Changing> <http://dbpedia.org/ontology/composer> ?composer .\n    }\n    UNION\n    {\n      <http://dbpedia.org/resource/The_time_are_A-Changing> <http://dbpedia.org/property/composer> ?composer .\n    }\n  }\n}"
    },
    {
        "question": "What river is it whose source is Dowra?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/sourceLocation> <http://dbpedia.org/resource/Dowra>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "entities": [
            "http://dbpedia.org/resource/Dowra"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Dowra> -> \"source of river\""
        ],
        "paths": "<http://dbpedia.org/resource/Dowra> -> \"source of river\"",
        "generated_query": "SELECT DISTINCT ?river WHERE {\n  {\n    ?river <http://dbpedia.org/property/sourceLocation> <http://dbpedia.org/resource/Dowra> .\n  }\n  UNION\n  {\n    ?river <http://dbpedia.org/ontology/sourcePlace> <http://dbpedia.org/resource/Dowra> .\n  }\n}"
    },
    {
        "question": "What is the religion of the president who won the Mongolian legislative election, 2004 ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mongolian_legislative_election,_2004> <http://dbpedia.org/property/leader> ?x . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/2004_Mongolian_parliamentary_election",
            "http://dbpedia.org/resource/Religion"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/2004_Mongolian_parliamentary_election> -> PRESIDENT -> RELIGION"
        ],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?religion WHERE {\n  <http://dbpedia.org/resource/2004_Mongolian_parliamentary_election> ?PRESIDENT ?president .\n  ?president ?RELIGION ?religion .\n}"
    },
    {
        "question": "Give me everything owned by networks which is lead by Steve Burke?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/ontology/keyPerson> <http://dbpedia.org/resource/Steve_Burke_(businessman)> . ?uri <http://dbpedia.org/ontology/network> ?x  . }",
        "entities": [
            "http://dbpedia.org/resource/Steve_Burke_(businessman)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Steve_Burke_(businessman)> -> NETWORK -> OWNED"
        ],
        "paths": "<http://dbpedia.org/resource/Steve_Burke_(businessman)> -> NETWORK -> OWNED",
        "generated_query": "SELECT DISTINCT ?owned WHERE {\n  ?network <http://dbpedia.org/ontology/keyPerson> <http://dbpedia.org/resource/Steve_Burke_(businessman)> .\n  ?owned <http://dbpedia.org/property/owner> ?network .\n}"
    },
    {
        "question": "What is the municipality of Homestead Grays Bridge ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Homestead_Grays_Bridge> <http://dbpedia.org/ontology/municipality> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Gadebridge"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Gadebridge> -> \"municipality\""
        ],
        "paths": "<http://dbpedia.org/resource/Gadebridge> -> \"municipality\"",
        "generated_query": "SELECT DISTINCT ?municipality WHERE {\n  <http://dbpedia.org/resource/Gadebridge> <http://dbpedia.org/ontology/wikiPageWikiLink> ?municipality .\n  ?entity <http://dbpedia.org/ontology/localAuthority> ?municipality .\n}"
    },
    {
        "question": "What religion do the politicians follow, who graduated from the Yokkohama Nationaal University?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/almaMater> <http://dbpedia.org/resource/Yokohama_National_University> . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>}",
        "entities": [
            "http://dbpedia.org/resource/Yokohama_National_University"
        ],
        "classes": [],
        "relations": [
            "POLITICIAN -> \"religion\"",
            "POLITICIAN -> <http://dbpedia.org/resource/Yokohama_National_University>"
        ],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?religion WHERE {\n  ?politician <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Yokohama_National_University> .\n  ?politician <http://dbpedia.org/ontology/religion> ?religion .\n}"
    },
    {
        "question": "Who is the narrator of The Incredible Hulk , 1982 TV series ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Incredible_Hulk_(1982_TV_series)> <http://dbpedia.org/property/narrated> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/The_Incredible_Hulk_(1982_TV_series)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/The_Incredible_Hulk_(1982_TV_series)> -> \"narrator\""
        ],
        "paths": "<http://dbpedia.org/resource/The_Incredible_Hulk_(1982_TV_series)> -> \"narrator\"",
        "generated_query": "SELECT DISTINCT ?narrator WHERE {\n  <http://dbpedia.org/resource/The_Incredible_Hulk_(1982_TV_series)> <http://dbpedia.org/ontology/narrator> ?narrator .\n}"
    },
    {
        "question": "What sports are played in schools where Swahili is the official language?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/language> <http://dbpedia.org/resource/Swahili_language> . ?x <http://dbpedia.org/ontology/sport> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Swahili_language"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Swahili_language> -> SCHOOL -> SPORT"
        ],
        "paths": "<http://dbpedia.org/resource/Swahili_language> -> SCHOOL -> SPORT",
        "generated_query": "SELECT DISTINCT ?sport WHERE {\n  ?country <http://dbpedia.org/ontology/officialLanguage> <http://dbpedia.org/resource/Swahili_language> .\n  {\n    ?school <http://dbpedia.org/ontology/location> ?country .\n  } UNION {\n    ?school <http://dbpedia.org/property/location> ?country .\n  }\n  {\n    ?sport <http://dbpedia.org/ontology/location> ?school .\n  } UNION {\n    ?sport <http://dbpedia.org/property/location> ?school .\n  }\n}"
    },
    {
        "question": "Which interest of Philip Novak is the relegion of Vesak ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Philip_Novak> <http://dbpedia.org/property/mainInterests> ?uri. <http://dbpedia.org/resource/Vesak> <http://dbpedia.org/ontology/type> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Philip_Novak"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Philip_Novak> -> INTEREST"
        ],
        "paths": "<http://dbpedia.org/resource/Philip_Novak> -> INTEREST",
        "generated_query": "SELECT DISTINCT ?interest WHERE {\n  {\n    <http://dbpedia.org/resource/Philip_Novak> <http://dbpedia.org/ontology/mainInterest> ?interest .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Philip_Novak> <http://dbpedia.org/property/mainInterests> ?interest .\n  }\n  <http://dbpedia.org/resource/Vesak> <http://dbpedia.org/property/observedby> ?interest .\n}"
    },
    {
        "question": "Count all the ethinic group who speaks language which belongs to Anglo-Frisian language family ?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/ontology/languageFamily> <http://dbpedia.org/resource/Anglo-Frisian_languages> . ?uri <http://dbpedia.org/property/languages> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/EthnicGroup>}",
        "entities": [
            "http://dbpedia.org/resource/Anglo-Frisian_languages"
        ],
        "classes": [],
        "relations": [
            "ETHNIC_GROUP -> LANGUAGE -> <http://dbpedia.org/resource/Anglo-Frisian_languages>"
        ],
        "paths": "",
        "generated_query": "SELECT (COUNT(DISTINCT ?ethnicGroup) AS ?count)\nWHERE {\n  ?ethnicGroup ?p1 ?language .\n  ?language ?p2 <http://dbpedia.org/resource/Anglo-Frisian_languages> .\n}"
    },
    {
        "question": "What is the area of the Tar Heel Sports Network which is  official residence of the Michael Nichols (photographer) ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tar_Heel_Sports_Network> <http://dbpedia.org/property/area> ?uri. <http://dbpedia.org/resource/Michael_Nichols_(photographer)> <http://dbpedia.org/ontology/residence> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Michael_Nichols_(photographer)",
            "http://dbpedia.org/resource/Tar_Heel_Sports_Network"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Michael_Nichols_(photographer)> -> <http://dbpedia.org/resource/Tar_Heel_Sports_Network> -> \"area\""
        ],
        "paths": "<http://dbpedia.org/resource/Michael_Nichols_(photographer)> -> <http://dbpedia.org/resource/Tar_Heel_Sports_Network> -> \"area\"",
        "generated_query": "SELECT DISTINCT ?location ?landArea ?totalArea WHERE {\n  <http://dbpedia.org/resource/Michael_Nichols_(photographer)> \n    ( <http://dbpedia.org/ontology/residence> | <http://dbpedia.org/property/residence> ) ?location .\n  \n  <http://dbpedia.org/resource/Tar_Heel_Sports_Network> \n    ( <http://dbpedia.org/property/area> | <http://dbpedia.org/ontology/broadcastArea> ) ?location .\n  \n  OPTIONAL { ?location <http://dbpedia.org/property/landarea> ?landArea . }\n  OPTIONAL { ?location <http://dbpedia.org/property/totalarea> ?totalArea . }\n}"
    },
    {
        "question": "Cologny and Lancy are the neighboring municipalities of which place ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/neighboringMunicipalities> <http://dbpedia.org/resource/Cologny> . ?uri <http://dbpedia.org/property/neighboringMunicipalities> <http://dbpedia.org/resource/Lancy> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Place>}",
        "entities": [
            "http://dbpedia.org/resource/Lancy",
            "http://dbpedia.org/resource/Cologny"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Lancy> -> NEIGHBORING_MUNICIPALITY -> <http://dbpedia.org/resource/Cologny>"
        ],
        "paths": "<http://dbpedia.org/resource/Lancy> -> NEIGHBORING_MUNICIPALITY -> <http://dbpedia.org/resource/Cologny>",
        "generated_query": "SELECT DISTINCT ?place WHERE {\n  ?place <http://dbpedia.org/ontology/neighboringMunicipality> <http://dbpedia.org/resource/Lancy> .\n  ?place <http://dbpedia.org/ontology/neighboringMunicipality> <http://dbpedia.org/resource/Cologny> .\n}"
    },
    {
        "question": "How many artists have their works in the Sao Paolo Museum of Art?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/property/museum> <http://dbpedia.org/resource/S\u00e3o_Paulo_Museum_of_Art> . ?x <http://dbpedia.org/property/artist> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>}",
        "entities": [
            "http://dbpedia.org/resource/S\u00e3o_Paulo_Museum_of_Art"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/S\u00e3o_Paulo_Museum_of_Art> -> ARTIST"
        ],
        "paths": "<http://dbpedia.org/resource/S\u00e3o_Paulo_Museum_of_Art> -> ARTIST",
        "generated_query": "SELECT (COUNT(DISTINCT ?artist) AS ?artistCount)\nWHERE {\n  <http://dbpedia.org/resource/S\u00e3o_Paulo_Museum_of_Art> <http://dbpedia.org/ontology/wikiPageWikiLink> ?work .\n  ?work <http://dbpedia.org/property/artist> ?artist .\n}"
    },
    {
        "question": "VP-8 and VP-10 shares which command structure ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/VP-8> <http://dbpedia.org/ontology/commandStructure> ?uri. <http://dbpedia.org/resource/VP-10> <http://dbpedia.org/ontology/commandStructure> ?uri . }",
        "entities": [
            "http://dbpedia.org/resource/VP-10",
            "http://dbpedia.org/resource/VP8",
            "http://dbpedia.org/resource/Command-line_interface"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/VP8> -> <http://dbpedia.org/resource/Command-line_interface>",
            "<http://dbpedia.org/resource/VP-10> -> <http://dbpedia.org/resource/Command-line_interface>"
        ],
        "paths": "<http://dbpedia.org/resource/VP8> -> <http://dbpedia.org/resource/Command-line_interface>, <http://dbpedia.org/resource/VP-10> -> <http://dbpedia.org/resource/Command-line_interface>",
        "generated_query": "SELECT DISTINCT ?commandStructure WHERE {\n  <http://dbpedia.org/resource/VP-10> <http://dbpedia.org/ontology/commandStructure> ?commandStructure .\n}"
    },
    {
        "question": "What is used as money for French Southern and Antarctic Lands is also the  product of the Karafarin Bank ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/French_Southern_and_Antarctic_Lands> <http://dbpedia.org/ontology/currency> ?uri. <http://dbpedia.org/resource/Karafarin_Bank> <http://dbpedia.org/ontology/product> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/French_Southern_and_Antarctic_Lands",
            "http://dbpedia.org/resource/Caisse_Centrale_de_la_France_Libre"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/French_Southern_and_Antarctic_Lands> -> <http://dbpedia.org/resource/Caisse_Centrale_de_la_France_Libre>"
        ],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?currency WHERE {\n  <http://dbpedia.org/resource/French_Southern_and_Antarctic_Lands> <http://dbpedia.org/ontology/currency> ?currency .\n  <http://dbpedia.org/resource/Karafarin_Bank> <http://dbpedia.org/ontology/product> ?currency .\n}"
    },
    {
        "question": "Give me the total number of membership of the organisations which have memebers as  Azerbaijan?",
        "gold_query": " SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/property/membership> <http://dbpedia.org/resource/Azerbaijan> . ?x <http://dbpedia.org/property/membership> ?uri }",
        "entities": [
            "http://dbpedia.org/resource/Azerbaijan"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Azerbaijan> -> ORGANISATION -> \"total number of membership\""
        ],
        "paths": "<http://dbpedia.org/resource/Azerbaijan> -> ORGANISATION -> \"total number of membership\"",
        "generated_query": "SELECT (SUM(?memberCount) AS ?totalMembership)\nWHERE {\n  {\n    SELECT ?org (COUNT(DISTINCT ?member) AS ?memberCount)\n    WHERE {\n      ?org <http://dbpedia.org/property/membership> <http://dbpedia.org/resource/Azerbaijan> .\n      ?org <http://dbpedia.org/property/membership> ?member .\n    }\n    GROUP BY ?org\n  }\n}"
    },
    {
        "question": "What is the content licence of MSX BASIC ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/MSX_BASIC> <http://dbpedia.org/property/license> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/MSX_BASIC"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/MSX_BASIC> -> \"content licence\""
        ],
        "paths": "<http://dbpedia.org/resource/MSX_BASIC> -> \"content licence\"",
        "generated_query": "SELECT DISTINCT ?license WHERE {\n  <http://dbpedia.org/resource/MSX_BASIC> <http://dbpedia.org/property/license> ?license .\n}"
    },
    {
        "question": "What are the central characters in spy kids series?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/series> <http://dbpedia.org/resource/Spy_Kids_(franchise)>  . }",
        "entities": [
            "http://dbpedia.org/resource/Spy_Kids"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Spy_Kids> -> \"central characters\""
        ],
        "paths": "<http://dbpedia.org/resource/Spy_Kids> -> \"central characters\"",
        "generated_query": "SELECT DISTINCT ?actor WHERE {\n  {\n    <http://dbpedia.org/resource/Spy_Kids> <http://dbpedia.org/ontology/starring> ?actor .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Spy_Kids> <http://dbpedia.org/property/starring> ?actor .\n  }\n}"
    },
    {
        "question": "Which comic characters were created by Paul Dini?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/creators> <http://dbpedia.org/resource/Paul_Dini>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCharacter>}",
        "entities": [
            "http://dbpedia.org/resource/Paul_Dini"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Paul_Dini> -> COMIC_CHARACTER"
        ],
        "paths": "<http://dbpedia.org/resource/Paul_Dini> -> COMIC_CHARACTER",
        "generated_query": "SELECT DISTINCT ?character WHERE {\n  ?character <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Paul_Dini> .\n}"
    },
    {
        "question": "who owns the ship Victoria?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Victoria_(ship)> <http://dbpedia.org/ontology/owner> ?uri } ",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?owner WHERE {\n  ?ship ?labelProp \"Victoria\" .\n  ?ship ?ownerProp ?owner .\n}"
    },
    {
        "question": "Where was the predecessor of Sevan Ross born?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Sevan_Ross> . ?x <http://dbpedia.org/property/placeOfBirth> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Sevan_Ross"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Sevan_Ross> -> PREDECESSOR -> \"birthplace\""
        ],
        "paths": "<http://dbpedia.org/resource/Sevan_Ross> -> PREDECESSOR -> \"birthplace\"",
        "generated_query": "SELECT DISTINCT ?birthplace WHERE {\n  {\n    <http://dbpedia.org/resource/Sevan_Ross> <http://dbpedia.org/ontology/predecessor> ?predecessor .\n  }\n  UNION\n  {\n    ?predecessor <http://dbpedia.org/ontology/predecessor> <http://dbpedia.org/resource/Sevan_Ross> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Sevan_Ross> <http://dbpedia.org/ontology/successor> ?predecessor .\n  }\n  UNION\n  {\n    ?predecessor <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Sevan_Ross> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Sevan_Ross> <http://dbpedia.org/property/predecessor> ?predecessor .\n  }\n  UNION\n  {\n    ?predecessor <http://dbpedia.org/property/predecessor> <http://dbpedia.org/resource/Sevan_Ross> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Sevan_Ross> <http://dbpedia.org/property/successor> ?predecessor .\n  }\n  UNION\n  {\n    ?predecessor <http://dbpedia.org/property/successor> <http://dbpedia.org/resource/Sevan_Ross> .\n  }\n  \n  {\n    ?predecessor <http://dbpedia.org/ontology/birthPlace> ?birthplace .\n  }\n  UNION\n  {\n    ?predecessor <http://dbpedia.org/property/birthPlace> ?birthplace .\n  }\n}"
    },
    {
        "question": "Which city council owns the Ted Williams tunnel and Leonard Memorial ridge?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ted_Williams_Tunnel> <http://dbpedia.org/property/owner> ?uri. <http://dbpedia.org/resource/Leonard_P._Zakim_Bunker_Hill_Memorial_Bridge> <http://dbpedia.org/property/owner> ?uri . }",
        "entities": [
            "http://dbpedia.org/resource/Ted_Williams_Tunnel"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Ted_Williams_Tunnel> -> \"owner\""
        ],
        "paths": "<http://dbpedia.org/resource/Ted_Williams_Tunnel> -> \"owner\"",
        "generated_query": "SELECT DISTINCT ?owner WHERE {\n  {\n    <http://dbpedia.org/resource/Ted_Williams_Tunnel> <http://dbpedia.org/ontology/owner> ?owner .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Ted_Williams_Tunnel> <http://dbpedia.org/property/owner> ?owner .\n  }\n}"
    },
    {
        "question": "Where is the school which is the rival of Somerset Berkley Regional High?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Somerset_Berkley_Regional_High_School> <http://dbpedia.org/ontology/rival> ?x . ?x <http://dbpedia.org/ontology/region> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>}",
        "entities": [
            "http://dbpedia.org/resource/Somerset_Berkley_Regional_High_School"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Somerset_Berkley_Regional_High_School> -> RIVAL -> SCHOOL -> LOCATION"
        ],
        "paths": "<http://dbpedia.org/resource/Somerset_Berkley_Regional_High_School> -> RIVAL -> SCHOOL -> LOCATION",
        "generated_query": "SELECT DISTINCT ?location WHERE {\n  <http://dbpedia.org/resource/Somerset_Berkley_Regional_High_School> <http://dbpedia.org/ontology/rival> ?rival_school .\n  ?rival_school <http://dbpedia.org/ontology/location> ?location .\n}"
    },
    {
        "question": "How many soccer manager have been in the Spain nation football team?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE {?uri <http://dbpedia.org/property/nationalteam> <http://dbpedia.org/resource/Spain_national_football_team>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerManager>}",
        "entities": [
            "http://dbpedia.org/resource/Spain_national_football_team"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Spain_national_football_team> -> \"soccer manager\""
        ],
        "paths": "<http://dbpedia.org/resource/Spain_national_football_team> -> \"soccer manager\"",
        "generated_query": "SELECT (COUNT(DISTINCT ?manager) AS ?count)\nWHERE {\n  {\n    ?manager <http://dbpedia.org/property/managerclubs> <http://dbpedia.org/resource/Spain_national_football_team> .\n  }\n  UNION\n  {\n    ?manager <http://dbpedia.org/ontology/managerClub> <http://dbpedia.org/resource/Spain_national_football_team> .\n  }\n}"
    },
    {
        "question": "Name the common alma mater of the Henry Morton Dexter and Jack McGregor",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Henry_Morton_Dexter> <http://dbpedia.org/ontology/education> ?uri. <http://dbpedia.org/resource/Jack_McGregor> <http://dbpedia.org/ontology/education> ?uri . }",
        "entities": [
            "http://dbpedia.org/resource/Jack_McGregor",
            "http://dbpedia.org/resource/Henry_Morton_Dexter",
            "http://dbpedia.org/resource/Alma_mater"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Jack_McGregor> -> <http://dbpedia.org/resource/Alma_mater>",
            "<http://dbpedia.org/resource/Henry_Morton_Dexter> -> <http://dbpedia.org/resource/Alma_mater>"
        ],
        "paths": "<http://dbpedia.org/resource/Jack_McGregor> -> <http://dbpedia.org/resource/Alma_mater>, <http://dbpedia.org/resource/Henry_Morton_Dexter> -> <http://dbpedia.org/resource/Alma_mater>",
        "generated_query": "SELECT DISTINCT ?almaMater WHERE {\n  <http://dbpedia.org/resource/Jack_McGregor> <http://dbpedia.org/ontology/education> ?almaMater .\n  <http://dbpedia.org/resource/Henry_Morton_Dexter> <http://dbpedia.org/ontology/education> ?almaMater .\n}"
    },
    {
        "question": "What are some companies which are founded in Dallas Jurisdiction?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/governingBody> <http://dbpedia.org/resource/Dallas> . ?uri <http://dbpedia.org/ontology/foundationPlace> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
        "entities": [
            "http://dbpedia.org/resource/Judiciary_of_Texas"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Judiciary_of_Texas> -> \"companies founded in Dallas jurisdiction\""
        ],
        "paths": "<http://dbpedia.org/resource/Judiciary_of_Texas> -> \"companies founded in Dallas jurisdiction\"",
        "generated_query": "SELECT DISTINCT ?company WHERE {\n  ?company <http://dbpedia.org/ontology/foundationPlace> ?place .\n  ?place <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Judiciary_of_Texas> .\n  FILTER (?place = <http://dbpedia.org/resource/Dallas>) .\n}"
    },
    {
        "question": "How many bands collaborated with artists who signed up with EMI?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/ontology/recordLabel> <http://dbpedia.org/resource/EMI> . ?x <http://dbpedia.org/ontology/associatedMusicalArtist> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>}",
        "entities": [
            "http://dbpedia.org/resource/EMI"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/EMI> -> ARTIST"
        ],
        "paths": "<http://dbpedia.org/resource/EMI> -> ARTIST",
        "generated_query": "SELECT (COUNT(DISTINCT ?band) AS ?count)\nWHERE {\n  ?artist <http://dbpedia.org/ontology/recordLabel> <http://dbpedia.org/resource/EMI> .\n  {\n    ?artist <http://dbpedia.org/ontology/associatedMusicalArtist> ?band .\n  }\n  UNION\n  {\n    ?artist <http://dbpedia.org/ontology/associatedBand> ?band .\n  }\n}"
    },
    {
        "question": "What is the purpose of New Zealand Chess Federation ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/New_Zealand_Chess_Federation> <http://dbpedia.org/property/purpose> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/New_Zealand_Chess_Federation"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/New_Zealand_Chess_Federation> -> \"purpose\""
        ],
        "paths": "<http://dbpedia.org/resource/New_Zealand_Chess_Federation> -> \"purpose\"",
        "generated_query": "SELECT DISTINCT ?purpose ?abstract WHERE {\n  {\n    <http://dbpedia.org/resource/New_Zealand_Chess_Federation> <http://dbpedia.org/ontology/purpose> ?purpose .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/New_Zealand_Chess_Federation> <http://dbpedia.org/property/purpose> ?purpose .\n  }\n  OPTIONAL {\n    ?purpose <http://dbpedia.org/ontology/abstract> ?abstract .\n  }\n}"
    },
    {
        "question": "How many TV shows are of the company which are of company which is a subsidiary of Big  Ticket Entertainment ?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/ontology/subsidiary> <http://dbpedia.org/resource/Big_Ticket_Entertainment> . ?uri <http://dbpedia.org/property/company> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "entities": [
            "http://dbpedia.org/resource/Big_Ticket_Entertainment"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Big_Ticket_Entertainment> -> COMPANY -> COMPANY -> TV_SHOW"
        ],
        "paths": "<http://dbpedia.org/resource/Big_Ticket_Entertainment> -> COMPANY -> COMPANY -> TV_SHOW",
        "generated_query": "SELECT (COUNT(DISTINCT ?tvshow) AS ?count)\nWHERE {\n  ?subsidiary <http://dbpedia.org/ontology/subsidiary> <http://dbpedia.org/resource/Big_Ticket_Entertainment> .\n  ?company <http://dbpedia.org/ontology/company> ?subsidiary .\n  ?tvshow <http://dbpedia.org/property/company> ?company .\n}"
    },
    {
        "question": "Who operates twin Cities 400 ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Twin_Cities_400> <http://dbpedia.org/ontology/operatedBy> ?uri } ",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?operator WHERE {\n  ?train <http://www.w3.org/2000/01/rdf-schema#label> \"twin Cities 400\" .\n  ?train ?p ?operator .\n}"
    },
    {
        "question": "What is the city of the Maine School of Science and Mathematics is also the resting place of Charles A. Boutelle ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Maine_School_of_Science_and_Mathematics> <http://dbpedia.org/ontology/authority> ?uri. <http://dbpedia.org/resource/Charles_A._Boutelle> <http://dbpedia.org/property/restingplace> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Charles_A._Boutelle",
            "http://dbpedia.org/resource/Maine_School_of_Science_and_Mathematics"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Charles_A._Boutelle> -> RESTING PLACE -> CITY",
            "<http://dbpedia.org/resource/Maine_School_of_Science_and_Mathematics> -> CITY"
        ],
        "paths": "<http://dbpedia.org/resource/Charles_A._Boutelle> -> RESTING PLACE -> CITY, <http://dbpedia.org/resource/Maine_School_of_Science_and_Mathematics> -> CITY",
        "generated_query": "SELECT DISTINCT ?city WHERE {\n  <http://dbpedia.org/resource/Charles_A._Boutelle> <http://dbpedia.org/ontology/restingPlace> ?rest .\n  ?rest <http://dbpedia.org/ontology/location> ?city .\n  \n  {\n    <http://dbpedia.org/resource/Maine_School_of_Science_and_Mathematics> <http://dbpedia.org/ontology/city> ?city .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Maine_School_of_Science_and_Mathematics> <http://dbpedia.org/property/city> ?city .\n  }\n}"
    },
    {
        "question": "Give me a count of royalties buried in Rome ?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE {?uri <http://dbpedia.org/property/placeOfBurial> <http://dbpedia.org/resource/Rome>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>}",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT (COUNT(DISTINCT ?royalty) AS ?count)\nWHERE {\n  ?royalty <http://example.org/ontology/type> <http://example.org/ontology/ROYALTY> .\n  ?royalty <http://example.org/ontology/burialPlace> ?place .\n  ?place <http://www.w3.org/2000/01/rdf-schema#label> \"Rome\" .\n}"
    },
    {
        "question": "In how many places are Marjas found?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/property/title> <http://dbpedia.org/resource/Marja'> . ?x <http://dbpedia.org/ontology/location> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Location>}",
        "entities": [
            "http://dbpedia.org/resource/Marquesas_Islands"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Marquesas_Islands> -> \"location count\""
        ],
        "paths": "<http://dbpedia.org/resource/Marquesas_Islands> -> \"location count\"",
        "generated_query": "SELECT ?count WHERE {\n  <http://dbpedia.org/resource/Marquesas_Islands> <http://dbpedia.org/ontology/numberOfIslands> ?count .\n}"
    },
    {
        "question": "List the soccer players whose current team has the ground Stoke-on-Trent.",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/ground> <http://dbpedia.org/resource/Stoke-on-Trent> . ?uri <http://dbpedia.org/property/currentclub> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>}",
        "entities": [
            "http://dbpedia.org/resource/Association_football",
            "http://dbpedia.org/resource/Tottenham_Hotspur_Stadium",
            "http://dbpedia.org/resource/Stoke-on-Trent"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Association_football> -> <http://dbpedia.org/resource/Tottenham_Hotspur_Stadium> -> <http://dbpedia.org/resource/Stoke-on-Trent>"
        ],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?player WHERE {\n  ?player ?p1 <http://dbpedia.org/resource/Association_football> .\n  ?player ?p2 ?team .\n  ?team ?p3 <http://dbpedia.org/resource/Stoke-on-Trent> .\n}"
    },
    {
        "question": "Which are the countires where Pioneer Corporation has flourished?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pioneer_Corporation> <http://dbpedia.org/property/country> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Pioneer_Energy"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Pioneer_Energy> -> COUNTRIES"
        ],
        "paths": "<http://dbpedia.org/resource/Pioneer_Energy> -> COUNTRIES",
        "generated_query": "SELECT DISTINCT ?country WHERE {\n  {\n    <http://dbpedia.org/resource/Pioneer_Energy> <http://dbpedia.org/property/location> ?location .\n    ?location <http://dbpedia.org/ontology/country> ?country .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Pioneer_Energy> <http://dbpedia.org/ontology/location> ?location .\n    ?location <http://dbpedia.org/ontology/country> ?country .\n  }\n}"
    },
    {
        "question": "Who is the president of Carl Stokes nad Wyche Fowler ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Carl_Stokes> <http://dbpedia.org/property/president> ?uri. <http://dbpedia.org/resource/Wyche_Fowler> <http://dbpedia.org/ontology/president> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Sto\u0142owe_Mountains"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Sto\u0142owe_Mountains> -> PRESIDENT"
        ],
        "paths": "<http://dbpedia.org/resource/Sto\u0142owe_Mountains> -> PRESIDENT",
        "generated_query": "SELECT DISTINCT ?leader WHERE {\n  {\n    <http://dbpedia.org/resource/Sto\u0142owe_Mountains> <http://dbpedia.org/ontology/wikiPageWikiLink> ?entity .\n    ?entity <http://dbpedia.org/ontology/leader> ?leader .\n  }\n  UNION\n  {\n    ?entity <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Sto\u0142owe_Mountains> .\n    ?entity <http://dbpedia.org/ontology/leader> ?leader .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Sto\u0142owe_Mountains> <http://dbpedia.org/ontology/wikiPageWikiLink> ?entity .\n    ?entity <http://dbpedia.org/property/leaderName> ?leader .\n  }\n}"
    },
    {
        "question": "Is God Save the Queen the national anthem of United Kingdom?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/United_Kingdom> <http://dbpedia.org/property/nationalAnthem> <http://dbpedia.org/resource/God_Save_the_Queen> }",
        "entities": [
            "http://dbpedia.org/resource/United_Kingdom",
            "http://dbpedia.org/resource/National_anthem"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/United_Kingdom> -> <http://dbpedia.org/resource/National_anthem>"
        ],
        "paths": "<http://dbpedia.org/resource/United_Kingdom> -> <http://dbpedia.org/resource/National_anthem>",
        "generated_query": "ASK WHERE {\n  {\n    <http://dbpedia.org/resource/United_Kingdom> <http://dbpedia.org/property/nationalAnthem> <http://dbpedia.org/resource/God_Save_the_Queen> .\n    <http://dbpedia.org/resource/God_Save_the_Queen> <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/National_anthem> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/United_Kingdom> <http://dbpedia.org/ontology/anthem> <http://dbpedia.org/resource/God_Save_the_Queen> .\n    <http://dbpedia.org/resource/God_Save_the_Queen> <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/National_anthem> .\n  }\n}"
    },
    {
        "question": "List few Swedish language movies ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/language> <http://dbpedia.org/resource/Swedish_language>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "entities": [
            "http://dbpedia.org/resource/Swedish_language"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Swedish_language> -> <http://dbpedia.org/ontology/Film>"
        ],
        "paths": "<http://dbpedia.org/resource/Swedish_language> -> <http://dbpedia.org/ontology/Film>",
        "generated_query": "SELECT DISTINCT ?film WHERE {\n  ?film a <http://dbpedia.org/ontology/Film> .\n  {\n    ?film <http://dbpedia.org/ontology/language> <http://dbpedia.org/resource/Swedish_language> .\n  }\n  UNION\n  {\n    ?film <http://dbpedia.org/property/language> <http://dbpedia.org/resource/Swedish_language> .\n  }\n}\nLIMIT 10"
    },
    {
        "question": "Was christina crawford trained by Booker T?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/Christina_Crawford_(wrestler)> <http://dbpedia.org/property/trainer> <http://dbpedia.org/resource/Booker_T_(wrestler)> }",
        "entities": [
            "http://dbpedia.org/resource/Booker_T_(wrestler)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Booker_T_(wrestler)> -> \"trained\""
        ],
        "paths": "<http://dbpedia.org/resource/Booker_T_(wrestler)> -> \"trained\"",
        "generated_query": "ASK WHERE {\n  {\n    <http://dbpedia.org/resource/Christina_Crawford_(wrestler)> <http://dbpedia.org/ontology/trainer> <http://dbpedia.org/resource/Booker_T_(wrestler)> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Christina_Crawford_(wrestler)> <http://dbpedia.org/property/trainer> <http://dbpedia.org/resource/Booker_T_(wrestler)> .\n  }\n}"
    },
    {
        "question": "What is the currency of Kerguelen Islands ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kerguelen_Islands> <http://dbpedia.org/ontology/currency> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Kerguelen_Islands"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Kerguelen_Islands> -> \"currency\""
        ],
        "paths": "<http://dbpedia.org/resource/Kerguelen_Islands> -> \"currency\"",
        "generated_query": "SELECT DISTINCT ?currency WHERE {\n  {\n    <http://dbpedia.org/resource/Kerguelen_Islands> <http://dbpedia.org/ontology/currency> ?currency .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Kerguelen_Islands> <http://dbpedia.org/property/currency> ?currency .\n  }\n}"
    },
    {
        "question": "What are the musicals whose musicians worked under Sony Music Entertainment?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/label> <http://dbpedia.org/resource/Sony_Music_Entertainment> . ?uri <http://dbpedia.org/property/music> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Musical>}",
        "entities": [
            "http://dbpedia.org/resource/Sony_Music"
        ],
        "classes": [],
        "relations": [
            "MUSICAL -> MUSICIAN -> <http://dbpedia.org/resource/Sony_Music>"
        ],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?musical WHERE {\n  ?musical ?p ?musician .\n  ?musician ?q <http://dbpedia.org/resource/Sony_Music> .\n}"
    },
    {
        "question": "Whose shrines are in a place governed by Justin Trudeau?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/leaderName> <http://dbpedia.org/resource/Justin_Trudeau> . ?uri <http://dbpedia.org/ontology/majorShrine> ?x  . }",
        "entities": [
            "http://dbpedia.org/resource/Justin_Trudeau"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Justin_Trudeau> -> GOVERNED_PLACE -> SHRINE -> OWNER"
        ],
        "paths": "<http://dbpedia.org/resource/Justin_Trudeau> -> GOVERNED_PLACE -> SHRINE -> OWNER",
        "generated_query": "SELECT DISTINCT ?shrine WHERE {\n  ?ministry <http://dbpedia.org/property/governmentHead> <http://dbpedia.org/resource/Justin_Trudeau> .\n  ?ministry <http://dbpedia.org/ontology/wikiPageWikiLink> ?place .\n  ?place <http://dbpedia.org/ontology/majorShrine> ?shrine .\n}"
    },
    {
        "question": "What are the academic interests of the past members of Senser?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Senser> <http://dbpedia.org/property/pastMembers> ?x . ?x <http://dbpedia.org/property/mainInterests> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Senser"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Senser> -> PAST_MEMBER -> \"academic interests\""
        ],
        "paths": "<http://dbpedia.org/resource/Senser> -> PAST_MEMBER -> \"academic interests\"",
        "generated_query": "SELECT DISTINCT ?interest WHERE {\n  {\n    <http://dbpedia.org/resource/Senser> <http://dbpedia.org/property/pastMembers> ?member .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Senser> <http://dbpedia.org/ontology/formerBandMember> ?member .\n  }\n  \n  {\n    ?member <http://dbpedia.org/ontology/mainInterest> ?interest .\n  }\n  UNION\n  {\n    ?member <http://dbpedia.org/property/mainInterests> ?interest .\n  }\n}"
    },
    {
        "question": "Who is the leader of Hackweiser ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hackweiser> <http://dbpedia.org/property/leaderName> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Hackweiser"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Hackweiser> -> \"leader\""
        ],
        "paths": "<http://dbpedia.org/resource/Hackweiser> -> \"leader\"",
        "generated_query": "SELECT DISTINCT ?leaderName WHERE {\n  <http://dbpedia.org/resource/Hackweiser> <http://dbpedia.org/ontology/leaderFunction> ?leaderFunction .\n  ?leaderFunction <http://dbpedia.org/ontology/personName> ?leaderName .\n}"
    },
    {
        "question": "In which city is the sister station of KTXY located ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/KTXY> <http://dbpedia.org/ontology/sisterStation> ?x . ?x <http://dbpedia.org/ontology/city> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/KTXY"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/KTXY> -> SISTER_STATION -> CITY"
        ],
        "paths": "<http://dbpedia.org/resource/KTXY> -> SISTER_STATION -> CITY",
        "generated_query": "SELECT DISTINCT ?city WHERE {\n  <http://dbpedia.org/resource/KTXY> <http://dbpedia.org/ontology/sisterStation> ?sisterStation .\n  {\n    ?sisterStation <http://dbpedia.org/ontology/city> ?city .\n  }\n  UNION\n  {\n    ?sisterStation <http://dbpedia.org/property/city> ?city .\n  }\n}"
    },
    {
        "question": "Where was the successor of Hank Brown born?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hank_Brown> <http://dbpedia.org/property/successor> ?x . ?x <http://dbpedia.org/ontology/birthPlace> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Hank_Brown"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Hank_Brown> -> SUCCESSOR -> \"birthplace\""
        ],
        "paths": "<http://dbpedia.org/resource/Hank_Brown> -> SUCCESSOR -> \"birthplace\"",
        "generated_query": "SELECT DISTINCT ?birthplace WHERE {\n  <http://dbpedia.org/resource/Hank_Brown> <http://dbpedia.org/ontology/successor> ?successor .\n  ?successor <http://dbpedia.org/ontology/birthPlace> ?birthplace .\n}"
    },
    {
        "question": "Name the constituency of Jonas Gahr where Sverre Krogh was born ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jonas_Gahr_St\u00f8re> <http://dbpedia.org/property/constituency> ?uri. <http://dbpedia.org/resource/Sverre_Krogh_Sundb\u00f8> <http://dbpedia.org/property/birthPlace> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Sverre_Krogh_(editor)",
            "http://dbpedia.org/resource/Sankt_Goar"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Sverre_Krogh_(editor)> -> <http://dbpedia.org/resource/Sankt_Goar>"
        ],
        "paths": "<http://dbpedia.org/resource/Sverre_Krogh_(editor)> -> <http://dbpedia.org/resource/Sankt_Goar>",
        "generated_query": "SELECT DISTINCT ?constituency WHERE {\n  <http://dbpedia.org/resource/Sverre_Krogh_(editor)> <http://dbpedia.org/property/placeOfBirth> ?birthPlace .\n  ?birthPlace <http://dbpedia.org/ontology/district> ?constituency .\n}"
    },
    {
        "question": "What is the common battle fought by Stephen Urban and Ali Habib Mahmud ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Stephen_Urban> <http://dbpedia.org/ontology/battle> ?uri. <http://dbpedia.org/resource/Ali_Habib_Mahmud> <http://dbpedia.org/property/battles> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Ali_Habib_Mahmud",
            "http://dbpedia.org/resource/Stephen_A._Urban"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Stephen_A._Urban> -> <http://dbpedia.org/resource/Ali_Habib_Mahmud>"
        ],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?battle WHERE {\n  <http://dbpedia.org/resource/Stephen_A._Urban> <http://dbpedia.org/ontology/battles> ?battle .\n  <http://dbpedia.org/resource/Ali_Habib_Mahmud> <http://dbpedia.org/ontology/battles> ?battle .\n}"
    },
    {
        "question": "What is the relegious affiliations of Katyayana ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Katyayana_(Buddhist)> <http://dbpedia.org/property/religion> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/K\u0101ty\u0101yana"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/K\u0101ty\u0101yana> -> \"religious affiliation\""
        ],
        "paths": "<http://dbpedia.org/resource/K\u0101ty\u0101yana> -> \"religious affiliation\"",
        "generated_query": "SELECT DISTINCT ?religion WHERE {\n  <http://dbpedia.org/resource/K\u0101ty\u0101yana> <http://dbpedia.org/property/religion> ?religion .\n}"
    },
    {
        "question": "Where was the engineer born who manufactured EP R.E.P. 1?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Esnault-Pelterie_R.E.P._1> <http://dbpedia.org/property/manufacturer> ?x . ?x <http://dbpedia.org/ontology/birthPlace> ?uri  . }",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?birthplace WHERE {\n  <http://example.org/resource/EP_REP_1> <http://example.org/property/manufacturedBy> ?engineer .\n  ?engineer <http://example.org/property/birthPlace> ?birthplace .\n}"
    },
    {
        "question": "who all have been a manager of english under twenty one football team?",
        "gold_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/managerclubs> <http://dbpedia.org/resource/England_national_under-21_football_team> } ",
        "entities": [
            "http://dbpedia.org/resource/England_national_under-21_football_team"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/England_national_under-21_football_team> -> \"manager\""
        ],
        "paths": "<http://dbpedia.org/resource/England_national_under-21_football_team> -> \"manager\"",
        "generated_query": "SELECT DISTINCT ?manager WHERE {\n  ?manager <http://dbpedia.org/ontology/managerClub> <http://dbpedia.org/resource/England_national_under-21_football_team> .\n}"
    },
    {
        "question": "What is the military conflict whose commanders are John McEwen and Phm Vn ng?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/John_McEwen> . ?uri <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Ph\u1ea1m_V\u0103n_\u0110\u1ed3ng> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>}",
        "entities": [
            "http://dbpedia.org/resource/John_McEwen",
            "http://dbpedia.org/resource/Ph\u1ea1m_V\u0103n_\u0110\u1ed3ng"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/John_McEwen> -> <http://dbpedia.org/resource/Ph\u1ea1m_V\u0103n_\u0110\u1ed3ng>"
        ],
        "paths": "<http://dbpedia.org/resource/John_McEwen> -> <http://dbpedia.org/resource/Ph\u1ea1m_V\u0103n_\u0110\u1ed3ng>",
        "generated_query": "SELECT DISTINCT ?conflict WHERE {\n  ?conflict <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/John_McEwen> .\n  ?conflict <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Ph\u1ea1m_V\u0103n_\u0110\u1ed3ng> .\n}"
    },
    {
        "question": "Which party has come in power in Mumbai North?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/constituency> <http://dbpedia.org/resource/Mumbai_North_(Lok_Sabha_constituency)> . ?x <http://dbpedia.org/ontology/party> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Mumbai_North_Lok_Sabha_constituency"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Mumbai_North_Lok_Sabha_constituency> -> \"party in power\""
        ],
        "paths": "<http://dbpedia.org/resource/Mumbai_North_Lok_Sabha_constituency> -> \"party in power\"",
        "generated_query": "SELECT DISTINCT ?party WHERE {\n  ?party <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Mumbai_North_Lok_Sabha_constituency> .\n}"
    },
    {
        "question": "Name the tv show with judges Randy Jackson and Jennifer Lopez?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/judges> <http://dbpedia.org/resource/Randy_Jackson> . ?uri <http://dbpedia.org/property/judges> <http://dbpedia.org/resource/Jennifer_Lopez> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "entities": [
            "http://dbpedia.org/resource/Jennifer_Lopez",
            "http://dbpedia.org/resource/Randy_Jackson"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Randy_Jackson> -> <http://dbpedia.org/resource/Jennifer_Lopez>"
        ],
        "paths": "<http://dbpedia.org/resource/Randy_Jackson> -> <http://dbpedia.org/resource/Jennifer_Lopez>",
        "generated_query": "SELECT DISTINCT ?show WHERE {\n  ?show <http://dbpedia.org/property/judges> <http://dbpedia.org/resource/Randy_Jackson> .\n  ?show <http://dbpedia.org/property/judges> <http://dbpedia.org/resource/Jennifer_Lopez> .\n}"
    },
    {
        "question": "What is the largest city of the country which hosted the 1951 Asian Games?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/1951_Asian_Games> <http://dbpedia.org/property/hostCity> ?x . ?x <http://dbpedia.org/ontology/largestCity> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
        "entities": [
            "http://dbpedia.org/resource/1951_Asian_Games"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/1951_Asian_Games> -> COUNTRY -> CITY -> \"population\""
        ],
        "paths": "<http://dbpedia.org/resource/1951_Asian_Games> -> COUNTRY -> CITY -> \"population\"",
        "generated_query": "SELECT DISTINCT ?largestCity WHERE {\n  <http://dbpedia.org/resource/1951_Asian_Games> <http://dbpedia.org/property/hostCity> ?hostCity .\n  ?hostCity <http://dbpedia.org/ontology/country> ?country .\n  ?country <http://dbpedia.org/ontology/largestCity> ?largestCity .\n}"
    },
    {
        "question": "Which royalty was married to ptolemy XIII Theos Philopator and had mother named Cleopatra V ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/mother> <http://dbpedia.org/resource/Cleopatra_V_of_Egypt> . ?uri <http://dbpedia.org/property/spouse> <http://dbpedia.org/resource/Ptolemy_XIII_Theos_Philopator>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>}",
        "entities": [
            "http://dbpedia.org/resource/Cleopatra_V",
            "http://dbpedia.org/resource/Strato_III",
            "http://dbpedia.org/resource/Ptolemy_XIII_Theos_Philopator"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Ptolemy_XIII_Theos_Philopator> -> <http://dbpedia.org/resource/Cleopatra_V>",
            "<http://dbpedia.org/resource/Ptolemy_XIII_Theos_Philopator> -> STRATO_III"
        ],
        "paths": "<http://dbpedia.org/resource/Ptolemy_XIII_Theos_Philopator> -> <http://dbpedia.org/resource/Cleopatra_V>, <http://dbpedia.org/resource/Ptolemy_XIII_Theos_Philopator> -> STRATO_III",
        "generated_query": "SELECT DISTINCT ?royalty WHERE {\n  ?royalty <http://dbpedia.org/property/spouse> <http://dbpedia.org/resource/Ptolemy_XIII_Theos_Philopator> .\n  ?royalty <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Cleopatra_V_of_Egypt> .\n}"
    },
    {
        "question": "Whose theme music was composed by a band which collaborated with Phish?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/associatedBand> <http://dbpedia.org/resource/Phish> . ?uri <http://dbpedia.org/property/themeMusicComposer> ?x  . }",
        "entities": [
            "http://dbpedia.org/resource/Phish"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Phish> -> BAND -> THEME_MUSIC"
        ],
        "paths": "<http://dbpedia.org/resource/Phish> -> BAND -> THEME_MUSIC",
        "generated_query": "SELECT DISTINCT ?entity WHERE {\n  <http://dbpedia.org/resource/Phish> <http://dbpedia.org/property/associatedActs> ?band .\n  ?entity <http://dbpedia.org/property/themeMusicComposer> ?band .\n}"
    },
    {
        "question": "Is morrissey in the smiths?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/Morrissey> <http://dbpedia.org/ontology/associatedBand> <http://dbpedia.org/resource/The_Smiths> }",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "ASK WHERE {\n  ?member ?relation ?band .\n  FILTER(STR(?member) = \"morrissey\" && STR(?band) = \"the smiths\")\n}"
    },
    {
        "question": "Which administrative headquarters of the Pulau Ubin is also the resting place of the Nicole Lai",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pulau_Ubin> <http://dbpedia.org/ontology/capital> ?uri. <http://dbpedia.org/resource/Nicole_Lai> <http://dbpedia.org/ontology/restingPlace> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Pulau_Ubin",
            "http://dbpedia.org/resource/Nicole_Lai"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Pulau_Ubin> -> ADMINISTRATIVE_HEADQUARTERS",
            "<http://dbpedia.org/resource/Nicole_Lai> -> RESTING_PLACE"
        ],
        "paths": "<http://dbpedia.org/resource/Pulau_Ubin> -> ADMINISTRATIVE_HEADQUARTERS, <http://dbpedia.org/resource/Nicole_Lai> -> RESTING_PLACE",
        "generated_query": "SELECT DISTINCT ?place WHERE {\n  ?place <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Pulau_Ubin> .\n  ?org <http://dbpedia.org/property/headquarters> ?place .\n  <http://dbpedia.org/resource/Nicole_Lai> <http://dbpedia.org/ontology/restingPlace> ?place .\n}"
    },
    {
        "question": "Where did the beverages sold by Refriango originate?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/manufacturer> <http://dbpedia.org/resource/Refriango> . ?x <http://dbpedia.org/property/origin> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Beverage>}",
        "entities": [
            "http://dbpedia.org/resource/Frigo_(ice_cream)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Frigo_(ice_cream)> -> ORIGIN"
        ],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?origin WHERE {\n  <http://dbpedia.org/resource/Frigo_(ice_cream)> ?p ?origin .\n  FILTER(CONTAINS(LCASE(STR(?p)), \"origin\"))\n}"
    },
    {
        "question": "Who built the stadium which was rented by Costa Rica national football team?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/tenants> <http://dbpedia.org/resource/Costa_Rica_national_football_team> . ?x <http://dbpedia.org/ontology/builder> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Stadium>}",
        "entities": [
            "http://dbpedia.org/resource/Costa_Rica_national_football_team"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Costa_Rica_national_football_team> -> RENTED_STADIUM -> BUILDER"
        ],
        "paths": "<http://dbpedia.org/resource/Costa_Rica_national_football_team> -> RENTED_STADIUM -> BUILDER",
        "generated_query": "SELECT DISTINCT ?builder WHERE {\n  ?stadium <http://dbpedia.org/property/tenants> <http://dbpedia.org/resource/Costa_Rica_national_football_team> .\n  ?stadium <http://dbpedia.org/ontology/builder> ?builder .\n}"
    },
    {
        "question": "In which country does the Auckland rugby union team play  ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Auckland_rugby_union_team> <http://dbpedia.org/ontology/league> ?x . ?x <http://dbpedia.org/ontology/country> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Auckland_Rugby_Union"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Auckland_Rugby_Union> -> COUNTRY"
        ],
        "paths": "<http://dbpedia.org/resource/Auckland_Rugby_Union> -> COUNTRY",
        "generated_query": "SELECT DISTINCT ?country WHERE {\n  <http://dbpedia.org/resource/Auckland_Rugby_Union> <http://dbpedia.org/ontology/wikiPageWikiLink> ?union .\n  ?union <http://dbpedia.org/ontology/location> ?country .\n}"
    },
    {
        "question": "What is the serving railway line of Warwick railway station, Perth ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Warwick_railway_station,_Perth> <http://dbpedia.org/ontology/servingRailwayLine> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Warwick_railway_station,_Perth"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Warwick_railway_station,_Perth> -> \"serving railway line\""
        ],
        "paths": "<http://dbpedia.org/resource/Warwick_railway_station,_Perth> -> \"serving railway line\"",
        "generated_query": "SELECT DISTINCT ?line WHERE {\n  <http://dbpedia.org/resource/Warwick_railway_station,_Perth> <http://dbpedia.org/ontology/servingRailwayLine> ?line .\n}"
    },
    {
        "question": "What is the radio show created by Timoteo Jeffries, about?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/creator> <http://dbpedia.org/resource/Timoteo_Jeffries> . ?x <http://dbpedia.org/property/format> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RadioProgram>}",
        "entities": [
            "http://dbpedia.org/resource/Stephen_Geoffreys"
        ],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?show ?about WHERE {\n  ?show <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Timoteo_Jeffries> .\n  OPTIONAL {\n    ?show <http://dbpedia.org/property/about> ?about .\n  }\n  OPTIONAL {\n    ?show <http://dbpedia.org/ontology/abstract> ?abstract .\n    FILTER(lang(?abstract) = \"en\")\n  }\n  OPTIONAL {\n    ?show <http://dbpedia.org/property/description> ?description .\n  }\n  BIND(COALESCE(?about, ?abstract, ?description) AS ?about)\n}"
    },
    {
        "question": "Where are all the protected areas near Bend, Oregon?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/nearestCity> <http://dbpedia.org/resource/Bend,_Oregon> . ?x <http://dbpedia.org/ontology/location> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ProtectedArea>}",
        "entities": [
            "http://dbpedia.org/resource/Bend,_Oregon"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Bend,_Oregon> -> \"nearby protected areas\""
        ],
        "paths": "<http://dbpedia.org/resource/Bend,_Oregon> -> \"nearby protected areas\"",
        "generated_query": "SELECT DISTINCT ?protectedArea ?label WHERE {\n  ?protectedArea <http://dbpedia.org/ontology/nearestCity> <http://dbpedia.org/resource/Bend,_Oregon> .\n  ?protectedArea <http://purl.org/dc/terms/subject> ?category .\n  FILTER (\n    CONTAINS(LCASE(STR(?category)), \"wilderness\") ||\n    CONTAINS(LCASE(STR(?category)), \"forest\") ||\n    CONTAINS(LCASE(STR(?category)), \"reserve\")\n  )\n  OPTIONAL {\n    ?protectedArea <http://www.w3.org/2000/01/rdf-schema#label> ?label .\n    FILTER (lang(?label) = \"en\")\n  }\n}\nORDER BY ?protectedArea"
    },
    {
        "question": "Was True Grit a novel of the western genre?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/True_Grit_(novel)> <http://dbpedia.org/ontology/literaryGenre> <http://dbpedia.org/resource/Western_(genre)> }",
        "entities": [
            "http://dbpedia.org/resource/True_Grit_(novel)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/True_Grit_(novel)> -> \"genre\""
        ],
        "paths": "<http://dbpedia.org/resource/True_Grit_(novel)> -> \"genre\"",
        "generated_query": "ASK WHERE {\n  {\n    <http://dbpedia.org/resource/True_Grit_(novel)> <http://dbpedia.org/ontology/literaryGenre> <http://dbpedia.org/resource/Western_(genre)> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/True_Grit_(novel)> <http://dbpedia.org/property/genre> <http://dbpedia.org/resource/Western_(genre)> .\n  }\n}"
    },
    {
        "question": "Which notable series of Russell T Davies is also the series of Short Trips: A day in the life ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Short_Trips:_A_Day_in_the_Life> <http://dbpedia.org/ontology/series> ?uri. <http://dbpedia.org/resource/Russell_T_Davies> <http://dbpedia.org/ontology/notableWork> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Big_Finish_Short_Trips",
            "http://dbpedia.org/resource/Russell_T_Davies"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Russell_T_Davies> -> <http://dbpedia.org/resource/Big_Finish_Short_Trips>"
        ],
        "paths": "<http://dbpedia.org/resource/Russell_T_Davies> -> <http://dbpedia.org/resource/Big_Finish_Short_Trips>",
        "generated_query": "SELECT DISTINCT ?series WHERE {\n  <http://dbpedia.org/resource/Russell_T_Davies> <http://dbpedia.org/ontology/notableWork> ?series .\n  <http://dbpedia.org/resource/Big_Finish_Short_Trips> <http://dbpedia.org/ontology/wikiPageWikiLink> ?series .\n}"
    },
    {
        "question": "Which battles were fought under the president when Chung Won Shik was the prime minister?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/primeminister> <http://dbpedia.org/resource/Chung_Won-shik> . ?x <http://dbpedia.org/property/battles> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/President>}",
        "entities": [
            "http://dbpedia.org/resource/Chung_Won-shik"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Chung_Won-shik> -> PRESIDENT -> BATTLE"
        ],
        "paths": "<http://dbpedia.org/resource/Chung_Won-shik> -> PRESIDENT -> BATTLE",
        "generated_query": "SELECT DISTINCT ?battle WHERE {\n  ?president <http://dbpedia.org/property/primeminister> <http://dbpedia.org/resource/Chung_Won-shik> .\n  ?president <http://dbpedia.org/property/battles> ?battle .\n}"
    },
    {
        "question": "Which office holder's resting place is in  Palo Alto, California and was succeeded by Adrian A. Basora ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/restingPlace> <http://dbpedia.org/resource/Palo_Alto,_California> . ?uri <http://dbpedia.org/property/successor> <http://dbpedia.org/resource/Adrian_A._Basora>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
        "entities": [
            "http://dbpedia.org/resource/Palo_Alto,_California",
            "http://dbpedia.org/resource/Adrian_A._Basora"
        ],
        "classes": [],
        "relations": [
            "OFFICE_HOLDER -> \"resting place\"",
            "OFFICE_HOLDER -> SUCCESSOR -> <http://dbpedia.org/resource/Adrian_A._Basora>",
            "<http://dbpedia.org/resource/Adrian_A._Basora> -> OFFICE_HOLDER",
            "OFFICE_HOLDER -> <http://dbpedia.org/resource/Palo_Alto,_California>"
        ],
        "paths": "<http://dbpedia.org/resource/Adrian_A._Basora> -> OFFICE_HOLDER",
        "generated_query": "SELECT DISTINCT ?officeHolder WHERE {\n  ?officeHolder <http://dbpedia.org/property/successor> <http://dbpedia.org/resource/Adrian_A._Basora> .\n  ?officeHolder <http://dbpedia.org/property/restingPlace> <http://dbpedia.org/resource/Palo_Alto,_California> .\n}"
    },
    {
        "question": "which movies have been published by Cinema International Corporation?",
        "gold_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/distributor> <http://dbpedia.org/resource/Cinema_International_Corporation> } ",
        "entities": [
            "http://dbpedia.org/resource/Cinema_International_Corporation"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Cinema_International_Corporation> -> <MOVIE>"
        ],
        "paths": "<http://dbpedia.org/resource/Cinema_International_Corporation> -> <MOVIE>",
        "generated_query": "SELECT DISTINCT ?movie WHERE {\n  ?movie <http://dbpedia.org/ontology/distributor> <http://dbpedia.org/resource/Cinema_International_Corporation> .\n}"
    },
    {
        "question": "What is the total number of other destinations of the airlines whose one of the destinations is Mediterranean Sea?",
        "gold_query": " SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/property/destinations> <http://dbpedia.org/resource/Mediterranean_Sea> . ?x <http://dbpedia.org/property/destinations> ?uri }",
        "entities": [
            "http://dbpedia.org/resource/Mediterranean_Sea"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Mediterranean_Sea> -> AIRLINE -> \"number of other destinations\""
        ],
        "paths": "<http://dbpedia.org/resource/Mediterranean_Sea> -> AIRLINE -> \"number of other destinations\"",
        "generated_query": "SELECT (COUNT(DISTINCT ?otherDestination) AS ?totalOtherDestinations)\nWHERE {\n  ?airline <http://dbpedia.org/property/destinations> <http://dbpedia.org/resource/Mediterranean_Sea> .\n  ?airline <http://dbpedia.org/property/destinations> ?otherDestination .\n  FILTER(?otherDestination != <http://dbpedia.org/resource/Mediterranean_Sea>)\n}"
    },
    {
        "question": "Count the total number of academic discipline of the journals whose one of the academic discipline is Neuroimaging ?",
        "gold_query": " SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/ontology/academicDiscipline> <http://dbpedia.org/resource/Neuroimaging> . ?x <http://dbpedia.org/ontology/academicDiscipline> ?uri }",
        "entities": [
            "http://dbpedia.org/resource/Neuroimaging",
            "http://dbpedia.org/resource/Academic_discipline"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Neuroimaging> -> <http://dbpedia.org/resource/Academic_discipline>"
        ],
        "paths": "<http://dbpedia.org/resource/Neuroimaging> -> <http://dbpedia.org/resource/Academic_discipline>",
        "generated_query": "SELECT (COUNT(DISTINCT ?discipline) AS ?totalAcademicDisciplines)\nWHERE {\n  ?journal <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Neuroimaging> .\n  ?journal <http://dbpedia.org/ontology/wikiPageWikiLink> ?discipline .\n  ?discipline <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Academic_discipline> .\n}"
    },
    {
        "question": "List the award which have been won by both Charles LeMaire and Nick Park ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Charles_LeMaire> <http://dbpedia.org/ontology/award> ?uri. <http://dbpedia.org/resource/Nick_Park> <http://dbpedia.org/ontology/award> ?uri . }",
        "entities": [
            "http://dbpedia.org/resource/Nick_Park"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Charles_LeMaire> -> AWARD",
            "<http://dbpedia.org/resource/Nick_Park> -> AWARD"
        ],
        "paths": "<http://dbpedia.org/resource/Charles_LeMaire> -> AWARD, <http://dbpedia.org/resource/Nick_Park> -> AWARD",
        "generated_query": "SELECT DISTINCT ?award WHERE {\n  <http://dbpedia.org/resource/Charles_LeMaire> <http://dbpedia.org/ontology/award> ?award .\n  <http://dbpedia.org/resource/Nick_Park> <http://dbpedia.org/ontology/award> ?award .\n}"
    },
    {
        "question": "What are some cities which have a Ferris wheel?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/buildingType> <http://dbpedia.org/resource/Ferris_wheel> . ?x <http://dbpedia.org/property/locationTown> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Ferris_wheel"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Ferris_wheel> -> CAPS_CITY"
        ],
        "paths": "<http://dbpedia.org/resource/Ferris_wheel> -> CAPS_CITY",
        "generated_query": "SELECT DISTINCT ?city WHERE {\n  {\n    <http://dbpedia.org/resource/Ferris_wheel> <http://dbpedia.org/ontology/wikiPageWikiLink> ?entity .\n    ?entity <http://dbpedia.org/ontology/locationCity> ?city .\n  }\n  UNION\n  {\n    ?entity <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Ferris_wheel> .\n    ?entity <http://dbpedia.org/ontology/locationCity> ?city .\n  }\n  UNION\n  {\n    ?entity <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Ferris_wheel> .\n    ?entity <http://dbpedia.org/ontology/city> ?city .\n  }\n}"
    },
    {
        "question": "Name the movie who has screenplay by Akiva Goldsman and is edited by Mark Stevens ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/screenplay> <http://dbpedia.org/resource/Akiva_Goldsman> . ?uri <http://dbpedia.org/property/editing> <http://dbpedia.org/resource/Mark_Stevens_(film_editor)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "entities": [
            "http://dbpedia.org/resource/Akiva_Goldsman",
            "http://dbpedia.org/resource/Mark_Stevens_(film_editor)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Akiva_Goldsman> -> <http://dbpedia.org/resource/Mark_Stevens_(film_editor)>"
        ],
        "paths": "<http://dbpedia.org/resource/Akiva_Goldsman> -> <http://dbpedia.org/resource/Mark_Stevens_(film_editor)>",
        "generated_query": "SELECT DISTINCT ?movie WHERE {\n  ?movie <http://dbpedia.org/property/screenplay> <http://dbpedia.org/resource/Akiva_Goldsman> .\n  {\n    ?movie <http://dbpedia.org/property/editing> <http://dbpedia.org/resource/Mark_Stevens_(film_editor)> .\n  }\n  UNION\n  {\n    ?movie <http://dbpedia.org/ontology/editing> <http://dbpedia.org/resource/Mark_Stevens_(film_editor)> .\n  }\n}"
    },
    {
        "question": "Count the movies in Swedish language?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE {?uri <http://dbpedia.org/property/language> <http://dbpedia.org/resource/Swedish_language>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "entities": [
            "http://dbpedia.org/resource/Swedish_language"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Swedish_language> -> \"member\""
        ],
        "paths": "<http://dbpedia.org/resource/Swedish_language> -> \"member\"",
        "generated_query": "SELECT (COUNT(DISTINCT ?movie) AS ?count)\nWHERE {\n  ?movie a <http://dbpedia.org/ontology/Film> .\n  {\n    ?movie <http://dbpedia.org/ontology/language> <http://dbpedia.org/resource/Swedish_language> .\n  }\n  UNION\n  {\n    ?movie <http://dbpedia.org/property/language> <http://dbpedia.org/resource/Swedish_language> .\n  }\n}"
    },
    {
        "question": "Give me the total number of television shows whose theme music composer is Julian Gingell and created by  Simon Fuller?",
        "gold_query": " SELECT DISTINCT (COUNT(?uri) as ?c) WHERE {?uri <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Julian_Gingell> . ?uri <http://dbpedia.org/property/creator> <http://dbpedia.org/resource/Simon_Fuller> } ",
        "entities": [
            "http://dbpedia.org/resource/Simon_Fuller"
        ],
        "classes": [],
        "relations": [
            "TELEVISION_SHOW -> <http://dbpedia.org/resource/Simon_Fuller>",
            "TELEVISION_SHOW -> \"total number\"",
            "TELEVISION_SHOW -> <http://dbpedia.org/resource/Julian_Gingell>"
        ],
        "paths": "",
        "generated_query": "SELECT (COUNT(DISTINCT ?show) AS ?totalNumber)\nWHERE {\n  ?show a <http://dbpedia.org/ontology/TelevisionShow> .\n  ?show <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Simon_Fuller> .\n  ?show <http://dbpedia.org/ontology/themeMusicComposer> <http://dbpedia.org/resource/Julian_Gingell> .\n}"
    },
    {
        "question": "Which cloud platform of Google cloud connect also provides services to 21Vianet ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/21Vianet> <http://dbpedia.org/property/services> ?uri. <http://dbpedia.org/resource/Google_Cloud_Connect> <http://dbpedia.org/ontology/computingPlatform> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Google_Cloud_Connect",
            "http://dbpedia.org/resource/21Vianet"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Google_Cloud_Connect> -> <http://dbpedia.org/resource/21Vianet>"
        ],
        "paths": "<http://dbpedia.org/resource/Google_Cloud_Connect> -> <http://dbpedia.org/resource/21Vianet>",
        "generated_query": "SELECT DISTINCT ?platform WHERE {\n  <http://dbpedia.org/resource/Google_Cloud_Connect> <http://dbpedia.org/ontology/computingPlatform> ?platform .\n  <http://dbpedia.org/resource/21Vianet> <http://dbpedia.org/ontology/service> ?platform .\n}"
    },
    {
        "question": "Name the office holder whose constituency is Haight-Ashbury?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/constituency> <http://dbpedia.org/resource/Haight-Ashbury>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
        "entities": [
            "http://dbpedia.org/resource/Shrewsbury_and_Atcham_(UK_Parliament_constituency)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Shrewsbury_and_Atcham_(UK_Parliament_constituency)> -> OFFICE_HOLDER"
        ],
        "paths": "<http://dbpedia.org/resource/Shrewsbury_and_Atcham_(UK_Parliament_constituency)> -> OFFICE_HOLDER",
        "generated_query": "SELECT DISTINCT ?officeHolder WHERE {\n  <http://dbpedia.org/resource/Haight-Ashbury_(UK_Parliament_constituency)> <http://dbpedia.org/property/mp> ?officeHolder .\n}"
    },
    {
        "question": "Name the loocation of Lekh Castle which is also the location of SamurAbsheron channel ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lekh_Castle> <http://dbpedia.org/ontology/location> ?uri. <http://dbpedia.org/resource/Samur\u2013Absheron_channel> <http://dbpedia.org/ontology/sourceCountry> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Samur\u2013Absheron_channel",
            "http://dbpedia.org/resource/Leh_Palace"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Samur\u2013Absheron_channel> -> \"location\"",
            "<http://dbpedia.org/resource/Leh_Palace> -> \"location\""
        ],
        "paths": "<http://dbpedia.org/resource/Samur\u2013Absheron_channel> -> \"location\", <http://dbpedia.org/resource/Leh_Palace> -> \"location\"",
        "generated_query": "SELECT DISTINCT ?location WHERE {\n  <http://dbpedia.org/resource/Samur\u2013Absheron_channel> <http://dbpedia.org/property/mouthLocation> ?mouthLoc .\n  {\n    ?mouthLoc <http://dbpedia.org/property/location> ?location .\n  }\n  UNION\n  {\n    ?mouthLoc <http://dbpedia.org/ontology/location> ?location .\n  }\n\n  <http://dbpedia.org/resource/Leh_Palace> <http://dbpedia.org/ontology/wikiPageWikiLink> ?linkedPlace .\n  {\n    ?linkedPlace <http://dbpedia.org/property/location> ?location .\n  }\n  UNION\n  {\n    ?linkedPlace <http://dbpedia.org/ontology/location> ?location .\n  }\n}"
    },
    {
        "question": "Count the number of families of the Animal kingdom.",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/ontology/kingdom> <http://dbpedia.org/resource/Animal> . ?x <http://dbpedia.org/ontology/family> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Family_(biology)",
            "http://dbpedia.org/resource/Animal"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Animal> -> <http://dbpedia.org/resource/Family_(biology)>"
        ],
        "paths": "<http://dbpedia.org/resource/Animal> -> <http://dbpedia.org/resource/Family_(biology)>",
        "generated_query": "SELECT (COUNT(DISTINCT ?family) AS ?familyCount)\nWHERE {\n  ?family (<http://dbpedia.org/property/regnum>|<http://dbpedia.org/ontology/kingdom>) <http://dbpedia.org/resource/Animal> .\n  ?family <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Family_(biology)> .\n}"
    },
    {
        "question": "What is the political party of the person succeeded by A.K. Singh?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/successor> <http://dbpedia.org/resource/A._K._Singh> . ?x <http://dbpedia.org/property/party> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "entities": [
            "http://dbpedia.org/resource/A._K._Singh",
            "http://dbpedia.org/resource/Political_party"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/A._K._Singh> -> SUCCEEDED_BY -> PERSON -> <http://dbpedia.org/resource/Political_party>"
        ],
        "paths": "<http://dbpedia.org/resource/A._K._Singh> -> SUCCEEDED_BY -> PERSON -> <http://dbpedia.org/resource/Political_party>",
        "generated_query": "SELECT DISTINCT ?party WHERE {\n  ?successor <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/A._K._Singh> .\n  ?successor <http://dbpedia.org/ontology/party> ?party .\n}"
    },
    {
        "question": "Who is the head coach of the teams in Middlesbrough FC?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/club> <http://dbpedia.org/resource/Middlesbrough_F.C.> . ?x <http://dbpedia.org/ontology/manager> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Middlesbrough_F.C."
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Middlesbrough_F.C.> -> HEAD_COACH"
        ],
        "paths": "<http://dbpedia.org/resource/Middlesbrough_F.C.> -> HEAD_COACH",
        "generated_query": "SELECT DISTINCT ?headCoach WHERE {\n  <http://dbpedia.org/resource/Middlesbrough_F.C.> <http://dbpedia.org/property/manager> ?headCoach .\n}"
    },
    {
        "question": "To which uni. did  sidney c patridge and cyril hume both once went?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sidney_Catlin_Partridge> <http://dbpedia.org/property/education> ?uri. <http://dbpedia.org/resource/Cyril_Hume> <http://dbpedia.org/property/education> ?uri . }",
        "entities": [
            "http://dbpedia.org/resource/Cyril_Hume",
            "http://dbpedia.org/resource/Sydney_Kentridge"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Sydney_Kentridge> -> <http://dbpedia.org/ontology/University>",
            "<http://dbpedia.org/resource/Cyril_Hume> -> <http://dbpedia.org/ontology/University>"
        ],
        "paths": "<http://dbpedia.org/resource/Sydney_Kentridge> -> <http://dbpedia.org/ontology/University>, <http://dbpedia.org/resource/Cyril_Hume> -> <http://dbpedia.org/ontology/University>",
        "generated_query": "SELECT DISTINCT ?university WHERE {\n  {\n    {\n      <http://dbpedia.org/resource/Sydney_Kentridge> <http://dbpedia.org/ontology/almaMater> ?university .\n    }\n    UNION\n    {\n      <http://dbpedia.org/resource/Sydney_Kentridge> <http://dbpedia.org/property/almaMater> ?university .\n    }\n  }\n  {\n    {\n      <http://dbpedia.org/resource/Cyril_Hume> <http://dbpedia.org/ontology/education> ?university .\n    }\n    UNION\n    {\n      <http://dbpedia.org/resource/Cyril_Hume> <http://dbpedia.org/property/education> ?university .\n    }\n  }\n  ?university a <http://dbpedia.org/ontology/University> .\n}"
    },
    {
        "question": "People in the royal Thai army follow which religion?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/branch> <http://dbpedia.org/resource/Royal_Thai_Army> . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?religionLabel WHERE {\n  ?army <http://www.w3.org/2000/01/rdf-schema#label> ?armyLabel .\n  FILTER(CONTAINS(LCASE(?armyLabel), \"royal thai army\")) .\n  \n  ?person ?p ?army .\n  \n  ?person ?r ?religion .\n  \n  ?religion <http://www.w3.org/2000/01/rdf-schema#label> ?religionLabel .\n}"
    },
    {
        "question": "Was Lucrezia Tornabuoni the mother of Lorenzo de' Medici?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/Lorenzo_de'_Medici> <http://dbpedia.org/property/mother> <http://dbpedia.org/resource/Lucrezia_Tornabuoni> }",
        "entities": [
            "http://dbpedia.org/resource/Lorenzo_de'_Medici"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Lorenzo_de'_Medici> -> MOTHER"
        ],
        "paths": "<http://dbpedia.org/resource/Lorenzo_de'_Medici> -> MOTHER",
        "generated_query": "ASK WHERE {\n  <http://dbpedia.org/resource/Lorenzo_de'_Medici> <http://dbpedia.org/property/mother> <http://dbpedia.org/resource/Lucrezia_Tornabuoni> .\n}"
    },
    {
        "question": "Who are the producers of the movies  which has music by Gary Chang ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Gary_Chang> . ?x <http://dbpedia.org/property/producer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "entities": [
            "http://dbpedia.org/resource/Gary_Chang"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Gary_Chang> -> MOVIE -> PRODUCER"
        ],
        "paths": "<http://dbpedia.org/resource/Gary_Chang> -> MOVIE -> PRODUCER",
        "generated_query": "SELECT DISTINCT ?producer WHERE {\n  ?movie <http://dbpedia.org/ontology/musicComposer> <http://dbpedia.org/resource/Gary_Chang> .\n  ?movie <http://dbpedia.org/ontology/producer> ?producer .\n}"
    },
    {
        "question": "Where was Special 26 recorded ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Special_26> <http://dbpedia.org/property/recorded> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Special_26"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Special_26> -> \"recording location\""
        ],
        "paths": "<http://dbpedia.org/resource/Special_26> -> \"recording location\"",
        "generated_query": "SELECT DISTINCT ?location WHERE {\n  <http://dbpedia.org/resource/Special_26> <http://dbpedia.org/property/recorded> ?location .\n}"
    },
    {
        "question": "How many movies music composers are associated with Demis Roussos ?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/property/associatedActs> <http://dbpedia.org/resource/Demis_Roussos> . ?uri <http://dbpedia.org/ontology/musicComposer> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "entities": [
            "http://dbpedia.org/resource/Demis_Roussos"
        ],
        "classes": [],
        "relations": [
            "MOVIE -> \"count\"",
            "MUSIC_COMPOSER -> MOVIE",
            "<http://dbpedia.org/resource/Demis_Roussos> -> MUSIC_COMPOSER"
        ],
        "paths": "<http://dbpedia.org/resource/Demis_Roussos> -> MUSIC_COMPOSER",
        "generated_query": "SELECT (COUNT(DISTINCT ?movie) AS ?count)\nWHERE {\n  {\n    ?composer <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Demis_Roussos> .\n    ?movie <http://dbpedia.org/ontology/musicComposer> ?composer .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Demis_Roussos> <http://dbpedia.org/ontology/associatedMusicalArtist> ?composer .\n    ?movie <http://dbpedia.org/ontology/musicComposer> ?composer .\n  }\n}"
    },
    {
        "question": "To which nation did David Animle Hanses owe his allegiance?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/David_Animle_Hansen> <http://dbpedia.org/property/allegiance> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/David_Animle_Hansen"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/David_Animle_Hansen> -> \"allegiance\""
        ],
        "paths": "<http://dbpedia.org/resource/David_Animle_Hansen> -> \"allegiance\"",
        "generated_query": "SELECT DISTINCT ?nation WHERE {\n  <http://dbpedia.org/resource/David_Animle_Hansen> <http://dbpedia.org/property/allegiance> ?nation .\n}"
    },
    {
        "question": "What is the alma mater of the actors of The God Who Wasn't There ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_God_Who_Wasn't_There> <http://dbpedia.org/property/starring> ?x . ?x <http://dbpedia.org/property/almaMater> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Alma_mater",
            "http://dbpedia.org/resource/The_God_Who_Wasn't_There"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/The_God_Who_Wasn't_There> -> ACTORS -> \"alma mater\""
        ],
        "paths": "<http://dbpedia.org/resource/The_God_Who_Wasn't_There> -> ACTORS -> \"alma mater\"",
        "generated_query": "SELECT DISTINCT ?actor ?almaMater WHERE {\n  <http://dbpedia.org/resource/The_God_Who_Wasn't_There> <http://dbpedia.org/ontology/starring> ?actor .\n  ?actor <http://dbpedia.org/ontology/almaMater> ?almaMater .\n}"
    },
    {
        "question": "List some musicians associated with famous guitar players?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/notableInstruments> <http://dbpedia.org/resource/Guitar> . ?x <http://dbpedia.org/ontology/associatedMusicalArtist> ?uri  . }",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?musician WHERE {\n  # No triples available to define musicians associated with famous guitar players\n}\nLIMIT 10"
    },
    {
        "question": "What are the airlines whose hub airport is operated by the Los Angeles World Airports?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/operator> <http://dbpedia.org/resource/Los_Angeles_World_Airports> . ?uri <http://dbpedia.org/ontology/hubAirport> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airline>}",
        "entities": [
            "http://dbpedia.org/resource/Los_Angeles_World_Airports"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Los_Angeles_World_Airports> -> HUB_AIRPORT -> AIRLINE"
        ],
        "paths": "<http://dbpedia.org/resource/Los_Angeles_World_Airports> -> HUB_AIRPORT -> AIRLINE",
        "generated_query": "SELECT DISTINCT ?airline WHERE {\n  {\n    ?airport <http://dbpedia.org/ontology/operator> <http://dbpedia.org/resource/Los_Angeles_World_Airports> .\n  }\n  UNION\n  {\n    ?airport <http://dbpedia.org/property/operator> <http://dbpedia.org/resource/Los_Angeles_World_Airports> .\n  }\n  ?airline <http://dbpedia.org/ontology/hubAirport> ?airport .\n}"
    },
    {
        "question": "Which company's cars are assembled in Colombia?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/assembly> <http://dbpedia.org/resource/Colombia> . ?x <http://dbpedia.org/property/parentCompany> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>}",
        "entities": [
            "http://dbpedia.org/resource/Colombia"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Colombia> -> COMPANY -> CAR"
        ],
        "paths": "<http://dbpedia.org/resource/Colombia> -> COMPANY -> CAR",
        "generated_query": "SELECT DISTINCT ?company WHERE {\n  ?car <http://dbpedia.org/ontology/assembly> <http://dbpedia.org/resource/Colombia> .\n  {\n    ?car <http://dbpedia.org/ontology/manufacturer> ?company .\n  }\n  UNION\n  {\n    ?car <http://dbpedia.org/property/manufacturer> ?company .\n  }\n}"
    },
    {
        "question": "Who directed The Haunted House ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Haunted_House_(1929_film)> <http://dbpedia.org/ontology/director> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Haunted_house"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Haunted_house> -> \"director\""
        ],
        "paths": "<http://dbpedia.org/resource/Haunted_house> -> \"director\"",
        "generated_query": "SELECT DISTINCT ?director WHERE {\n    <http://dbpedia.org/resource/Haunted_house> ?p ?director .\n    FILTER(CONTAINS(LCASE(STR(?p)), \"director\"))\n}"
    },
    {
        "question": "Count all the different purposes followed by the different NGOs.",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/property/type> <http://dbpedia.org/resource/Non-governmental_organization> . ?x <http://dbpedia.org/property/purpose> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Non-governmental_organization"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Non-governmental_organization> -> \"purpose\""
        ],
        "paths": "<http://dbpedia.org/resource/Non-governmental_organization> -> \"purpose\"",
        "generated_query": "SELECT (COUNT(DISTINCT ?purpose) AS ?count)\nWHERE {\n  ?ngo <http://dbpedia.org/ontology/type> <http://dbpedia.org/resource/Non-governmental_organization> .\n  ?ngo <http://dbpedia.org/ontology/purpose> ?purpose .\n}"
    },
    {
        "question": "The players born in Bellaire, Ohio have played for which team?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Bellaire,_Ohio> . ?x <http://dbpedia.org/ontology/team> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Bellaire,_Ohio"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Bellaire,_Ohio> -> PLAYER -> TEAM"
        ],
        "paths": "<http://dbpedia.org/resource/Bellaire,_Ohio> -> PLAYER -> TEAM",
        "generated_query": "SELECT DISTINCT ?team WHERE {\n  {\n    ?player <http://dbpedia.org/property/birthPlace> <http://dbpedia.org/resource/Bellaire,_Ohio> .\n  }\n  UNION\n  {\n    ?player <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Bellaire,_Ohio> .\n  }\n  ?player <http://dbpedia.org/ontology/formerTeam> ?team .\n}"
    },
    {
        "question": "What is the common ideology followed by Katyayana and Palang Dharma Party ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Katyayana_(Buddhist)> <http://dbpedia.org/property/religion> ?uri. <http://dbpedia.org/resource/Palang_Dharma_Party> <http://dbpedia.org/ontology/ideology> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/People's_Power_Party_(Thailand)",
            "http://dbpedia.org/resource/K\u0101ty\u0101yana"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/K\u0101ty\u0101yana> -> \"ideology\"",
            "<http://dbpedia.org/resource/People's_Power_Party_(Thailand)> -> \"ideology\""
        ],
        "paths": "<http://dbpedia.org/resource/K\u0101ty\u0101yana> -> \"ideology\", <http://dbpedia.org/resource/People's_Power_Party_(Thailand)> -> \"ideology\"",
        "generated_query": "SELECT DISTINCT ?commonIdeology WHERE {\n  {\n    <http://dbpedia.org/resource/People's_Power_Party_(Thailand)> <http://dbpedia.org/ontology/ideology> ?commonIdeology .\n  } UNION {\n    <http://dbpedia.org/resource/People's_Power_Party_(Thailand)> <http://dbpedia.org/property/ideology> ?commonIdeology .\n  }\n  \n  {\n    <http://dbpedia.org/resource/K\u0101ty\u0101yana> <http://dbpedia.org/property/religion> ?commonIdeology .\n  }\n}"
    },
    {
        "question": "Count the tenants of MasterCard Centre?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { <http://dbpedia.org/resource/MasterCard_Centre> <http://dbpedia.org/property/tenants> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Mastercard"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Mastercard> -> \"tenant\""
        ],
        "paths": "<http://dbpedia.org/resource/Mastercard> -> \"tenant\"",
        "generated_query": "SELECT (COUNT(DISTINCT ?tenant) AS ?tenantCount)\nWHERE {\n  <http://dbpedia.org/resource/Mastercard> <http://dbpedia.org/ontology/wikiPageWikiLink> ?linkedResource .\n  {\n    ?tenant <http://dbpedia.org/ontology/tenant> ?linkedResource .\n  }\n  UNION\n  {\n    ?tenant <http://dbpedia.org/property/currentTenants> ?linkedResource .\n  }\n}"
    },
    {
        "question": "who are starring in the movies written by Mark Sandrich ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/writer> <http://dbpedia.org/resource/Mark_Sandrich> . ?x <http://dbpedia.org/ontology/starring> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "entities": [
            "http://dbpedia.org/resource/Mark_Sandrich"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Mark_Sandrich> -> MOVIE -> STARRING"
        ],
        "paths": "<http://dbpedia.org/resource/Mark_Sandrich> -> MOVIE -> STARRING",
        "generated_query": "SELECT DISTINCT ?actor WHERE {\n  ?movie <http://dbpedia.org/ontology/writer> <http://dbpedia.org/resource/Mark_Sandrich> .\n  {\n    ?movie <http://dbpedia.org/ontology/starring> ?actor .\n  }\n  UNION\n  {\n    ?movie <http://dbpedia.org/property/starring> ?actor .\n  }\n}"
    },
    {
        "question": "Count the number of religions followed by BJP members.",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/property/party> <http://dbpedia.org/resource/Bharatiya_Janata_Party> . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Bharatiya_Janata_Party"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Bharatiya_Janata_Party> -> RELIGION"
        ],
        "paths": "<http://dbpedia.org/resource/Bharatiya_Janata_Party> -> RELIGION",
        "generated_query": "SELECT (COUNT(DISTINCT ?religion) AS ?count)\nWHERE {\n  ?person <http://dbpedia.org/property/party> <http://dbpedia.org/resource/Bharatiya_Janata_Party> .\n  {\n    ?person <http://dbpedia.org/ontology/religion> ?religion .\n  }\n  UNION\n  {\n    ?person <http://dbpedia.org/property/religion> ?religion .\n  }\n  FILTER(BOUND(?religion))\n}"
    },
    {
        "question": "What is the mascot of the rival school of Sullivan Central High?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sullivan_Central_High_School> <http://dbpedia.org/property/rival> ?x . ?x <http://dbpedia.org/property/mascot> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Sullivan_Central_High_School"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Sullivan_Central_High_School> -> RIVAL_SCHOOL -> \"mascot\""
        ],
        "paths": "<http://dbpedia.org/resource/Sullivan_Central_High_School> -> RIVAL_SCHOOL -> \"mascot\"",
        "generated_query": "SELECT DISTINCT ?mascot WHERE {\n  <http://dbpedia.org/resource/Sullivan_Central_High_School> <http://dbpedia.org/ontology/rival> ?rival .\n  ?rival <http://dbpedia.org/property/mascot> ?mascot .\n}"
    },
    {
        "question": "What award has been awarded to both Dion Beebe and Charles LeMaire?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dion_Beebe> <http://dbpedia.org/ontology/award> ?uri. <http://dbpedia.org/resource/Charles_LeMaire> <http://dbpedia.org/property/awards> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Dion_Beebe"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Charles_LeMaire> -> AWARD",
            "<http://dbpedia.org/resource/Dion_Beebe> -> AWARD"
        ],
        "paths": "<http://dbpedia.org/resource/Charles_LeMaire> -> AWARD, <http://dbpedia.org/resource/Dion_Beebe> -> AWARD",
        "generated_query": "SELECT DISTINCT ?award WHERE {\n  <http://dbpedia.org/resource/Charles_LeMaire> <http://dbpedia.org/ontology/award> ?award .\n  <http://dbpedia.org/resource/Dion_Beebe> <http://dbpedia.org/ontology/award> ?award .\n}"
    },
    {
        "question": "What is the birth name  of Putri Raemawasti ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Putri_Raemawasti> <http://dbpedia.org/property/birthName> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Putri_Raemawasti"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Putri_Raemawasti> -> \"birth name\""
        ],
        "paths": "<http://dbpedia.org/resource/Putri_Raemawasti> -> \"birth name\"",
        "generated_query": "SELECT DISTINCT ?birthName WHERE {\n  <http://dbpedia.org/resource/Putri_Raemawasti> <http://dbpedia.org/ontology/birthName> ?birthName .\n}"
    },
    {
        "question": "What is the party of the politicians whose children is Sanjay Gandhi ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/children> <http://dbpedia.org/resource/Sanjay_Gandhi> . ?x <http://dbpedia.org/ontology/party> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
        "entities": [
            "http://dbpedia.org/resource/Sanjay_Gandhi"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Sanjay_Gandhi> -> PARENT -> POLITICIAN -> \"party\""
        ],
        "paths": "<http://dbpedia.org/resource/Sanjay_Gandhi> -> PARENT -> POLITICIAN -> \"party\"",
        "generated_query": "SELECT DISTINCT ?party WHERE {\n  {\n    ?parent <http://dbpedia.org/property/children> <http://dbpedia.org/resource/Sanjay_Gandhi> .\n  }\n  UNION\n  {\n    ?parent <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Sanjay_Gandhi> .\n  }\n  \n  {\n    ?parent <http://dbpedia.org/property/party> ?party .\n  }\n  UNION\n  {\n    ?parent <http://dbpedia.org/ontology/party> ?party .\n  }\n}"
    },
    {
        "question": "Name the tenants of MAsterCard center wich is also the draft team of Antoine Bibeau?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/MasterCard_Centre> <http://dbpedia.org/property/tenants> ?uri. <http://dbpedia.org/resource/Antoine_Bibeau> <http://dbpedia.org/property/draftTeam> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Mastercard",
            "http://dbpedia.org/resource/Antoine_Bibeau"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Antoine_Bibeau> -> DRAFT_TEAM",
            "<http://dbpedia.org/resource/Mastercard> -> TENANTS"
        ],
        "paths": "<http://dbpedia.org/resource/Antoine_Bibeau> -> DRAFT_TEAM, <http://dbpedia.org/resource/Mastercard> -> TENANTS",
        "generated_query": "SELECT DISTINCT ?tenant WHERE {\n  <http://dbpedia.org/resource/MasterCard_Centre> <http://dbpedia.org/ontology/tenant> ?tenant .\n  <http://dbpedia.org/resource/Antoine_Bibeau> <http://dbpedia.org/ontology/draftTeam> ?tenant .\n}"
    },
    {
        "question": "What is the number of occupation of the people who died in tampa bay, florida?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Tampa,_Florida> . ?x <http://dbpedia.org/ontology/occupation> ?uri  . }",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT (COUNT(DISTINCT ?occupation) AS ?numberOfOccupations)\nWHERE {\n  # No triples provided to specify ?person, ?occupation, or location\n}"
    },
    {
        "question": "Who was the United States president who also served as a governor of Indiana Territory?",
        "gold_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/branch> <http://dbpedia.org/resource/Indiana_Territory> } ",
        "entities": [
            "http://dbpedia.org/resource/Indiana_Territory",
            "http://dbpedia.org/resource/President_of_the_United_States"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/President_of_the_United_States> -> <http://dbpedia.org/resource/Indiana_Territory>"
        ],
        "paths": "<http://dbpedia.org/resource/President_of_the_United_States> -> <http://dbpedia.org/resource/Indiana_Territory>",
        "generated_query": "SELECT DISTINCT ?person WHERE {\n  <http://dbpedia.org/resource/Indiana_Territory> <http://dbpedia.org/property/leader> ?person .\n  ?person <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/President_of_the_United_States> .\n}"
    },
    {
        "question": "List the people who were born in Gelnhausen and graduated from Pepperdine University?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Gelnhausen> . ?uri <http://dbpedia.org/property/education> <http://dbpedia.org/resource/Pepperdine_University>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "entities": [
            "http://dbpedia.org/resource/Pepperdine_University",
            "http://dbpedia.org/resource/Gelnhausen"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Pepperdine_University> -> GRADUATES",
            "<http://dbpedia.org/resource/Gelnhausen> -> PEOPLE_BORN_HERE"
        ],
        "paths": "<http://dbpedia.org/resource/Pepperdine_University> -> GRADUATES, <http://dbpedia.org/resource/Gelnhausen> -> PEOPLE_BORN_HERE",
        "generated_query": "SELECT DISTINCT ?person WHERE {\n  ?person <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Gelnhausen> .\n  ?person <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Pepperdine_University> .\n}"
    },
    {
        "question": "Musical artists who are associated with Ren & Angela were born where ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/associatedActs> <http://dbpedia.org/resource/Ren\u00e9_&_Angela> . ?x <http://dbpedia.org/property/birthPlace> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>}",
        "entities": [
            "http://dbpedia.org/resource/Ren\u00e9_&_Angela"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Ren\u00e9_&_Angela> -> ASSOCIATED_ARTIST -> \"birthplace\""
        ],
        "paths": "<http://dbpedia.org/resource/Ren\u00e9_&_Angela> -> ASSOCIATED_ARTIST -> \"birthplace\"",
        "generated_query": "SELECT DISTINCT ?birthplace WHERE {\n  {\n    <http://dbpedia.org/resource/Ren\u00e9_&_Angela> <http://dbpedia.org/property/associatedActs> ?artist .\n  }\n  UNION\n  {\n    ?artist <http://dbpedia.org/property/associatedActs> <http://dbpedia.org/resource/Ren\u00e9_&_Angela> .\n  }\n  \n  {\n    ?artist <http://dbpedia.org/ontology/birthPlace> ?birthplace .\n  }\n  UNION\n  {\n    ?artist <http://dbpedia.org/property/birthPlace> ?birthplace .\n  }\n  UNION\n  {\n    ?artist <http://dbpedia.org/property/placeOfBirth> ?birthplace .\n  }\n}"
    },
    {
        "question": "What religion do the Wickramabahu Centeral College and Neungin High School both follow?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Wickramabahu_Central_College_(National_School)> <http://dbpedia.org/property/religiousAffiliation> ?uri. <http://dbpedia.org/resource/Neungin_High_School> <http://dbpedia.org/property/religiousAffiliation> ?uri . }",
        "entities": [
            "http://dbpedia.org/resource/Wickramabahu_Central_College"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Wickramabahu_Central_College> -> RELIGION"
        ],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?religion WHERE {\n  <http://dbpedia.org/resource/Wickramabahu_Central_College> <RELIGION> ?religion .\n  <http://dbpedia.org/resource/Neungin_High_School> <RELIGION> ?religion .\n}"
    },
    {
        "question": "Who designed the language integrated query?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Language_Integrated_Query> <http://dbpedia.org/ontology/designer> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Language_Integrated_Query"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Language_Integrated_Query> -> \"designer\""
        ],
        "paths": "<http://dbpedia.org/resource/Language_Integrated_Query> -> \"designer\"",
        "generated_query": "SELECT DISTINCT ?designer WHERE {\n  {\n    <http://dbpedia.org/resource/Language_Integrated_Query> <http://dbpedia.org/ontology/designer> ?designer .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Language_Integrated_Query> <http://dbpedia.org/property/designer> ?designer .\n  }\n}"
    },
    {
        "question": "Name the debut team of Dan Otero ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dan_Otero> <http://dbpedia.org/ontology/debutTeam> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Dan_Otero"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Dan_Otero> -> \"debut team\""
        ],
        "paths": "<http://dbpedia.org/resource/Dan_Otero> -> \"debut team\"",
        "generated_query": "SELECT DISTINCT ?debutTeam WHERE {\n  {\n    <http://dbpedia.org/resource/Dan_Otero> <http://dbpedia.org/ontology/debutTeam> ?debutTeam .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Dan_Otero> <http://dbpedia.org/property/debutteam> ?debutTeam .\n  }\n}"
    },
    {
        "question": "Who started at the pole position in both 1997 canadian grand prix and the 94 spanish one?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/1997_Canadian_Grand_Prix> <http://dbpedia.org/property/poleDriver> ?uri. <http://dbpedia.org/resource/1994_Spanish_Grand_Prix> <http://dbpedia.org/property/poleDriver> ?uri . }",
        "entities": [
            "http://dbpedia.org/resource/1994_Spanish_Grand_Prix",
            "http://dbpedia.org/resource/1997_Canadian_Grand_Prix"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/1997_Canadian_Grand_Prix> -> \"pole position starter\"",
            "<http://dbpedia.org/resource/1994_Spanish_Grand_Prix> -> \"pole position starter\""
        ],
        "paths": "<http://dbpedia.org/resource/1997_Canadian_Grand_Prix> -> \"pole position starter\", <http://dbpedia.org/resource/1994_Spanish_Grand_Prix> -> \"pole position starter\"",
        "generated_query": "SELECT DISTINCT ?driver WHERE {\n  {\n    <http://dbpedia.org/resource/1997_Canadian_Grand_Prix> <http://dbpedia.org/property/poleDriver> ?driver .\n  } UNION {\n    <http://dbpedia.org/resource/1997_Canadian_Grand_Prix> <http://dbpedia.org/ontology/poleDriver> ?driver .\n  }\n  {\n    <http://dbpedia.org/resource/1994_Spanish_Grand_Prix> <http://dbpedia.org/property/poleDriver> ?driver .\n  } UNION {\n    <http://dbpedia.org/resource/1994_Spanish_Grand_Prix> <http://dbpedia.org/ontology/poleDriver> ?driver .\n  }\n}"
    },
    {
        "question": "Who founded the Not on our Watch NGO?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Not_on_Our_Watch_(organization)> <http://dbpedia.org/ontology/foundedBy> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/The_Sentry_(organization)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/The_Sentry_(organization)> -> \"founder\""
        ],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?founder WHERE {\n  <http://dbpedia.org/resource/The_Sentry_(organization)> <http://dbpedia.org/ontology/founder> ?founder .\n}"
    },
    {
        "question": "What is the name of the artist which worked on the subsequent work of Ella Loves Cole ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ella_Loves_Cole> <http://dbpedia.org/ontology/subsequentWork> ?x . ?x <http://dbpedia.org/property/artist> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Ella_Loves_Cole"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Ella_Loves_Cole> -> SUBSEQUENT_WORK -> ARTIST -> \"name\""
        ],
        "paths": "<http://dbpedia.org/resource/Ella_Loves_Cole> -> SUBSEQUENT_WORK -> ARTIST -> \"name\"",
        "generated_query": "SELECT DISTINCT ?artistName WHERE {\n  <http://dbpedia.org/resource/Ella_Loves_Cole> <http://dbpedia.org/ontology/subsequentWork> ?subsequentWork .\n  {\n    ?subsequentWork <http://dbpedia.org/ontology/artist> ?artist .\n  }\n  UNION\n  {\n    ?subsequentWork <http://dbpedia.org/property/artist> ?artist .\n  }\n  ?artist <http://xmlns.com/foaf/0.1/name> ?artistName .\n}"
    },
    {
        "question": "Which company owns Sony bank ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sony_Bank> <http://dbpedia.org/ontology/owningCompany> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Sony_Bank"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Sony_Bank> -> \"owner\""
        ],
        "paths": "<http://dbpedia.org/resource/Sony_Bank> -> \"owner\"",
        "generated_query": "SELECT DISTINCT ?owner WHERE {\n  {\n    <http://dbpedia.org/resource/Sony_Bank> <http://dbpedia.org/ontology/owner> ?owner .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Sony_Bank> <http://dbpedia.org/ontology/owningCompany> ?owner .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Sony_Bank> <http://dbpedia.org/property/owner> ?owner .\n  }\n}"
    },
    {
        "question": "What state was Cyrus Mann born in, and has the famous Downriver ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Downriver> <http://dbpedia.org/ontology/state> ?uri. <http://dbpedia.org/resource/Cyrus_Mann> <http://dbpedia.org/property/birthPlace> ?uri . }",
        "entities": [
            "http://dbpedia.org/resource/Downriver",
            "http://dbpedia.org/resource/Cyrus_Mann"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Cyrus_Mann> -> \"birth state\"",
            "<http://dbpedia.org/resource/Downriver> -> \"fame\""
        ],
        "paths": "<http://dbpedia.org/resource/Cyrus_Mann> -> \"birth state\", <http://dbpedia.org/resource/Downriver> -> \"fame\"",
        "generated_query": "SELECT DISTINCT ?stateCyrus ?stateDownriver WHERE {\n  \n  # Cyrus Mann birth state patterns\n  <http://dbpedia.org/resource/Cyrus_Mann> <http://dbpedia.org/ontology/birthPlace> ?birthPlaceCyrus .\n  {\n    ?birthPlaceCyrus <http://dbpedia.org/property/state> ?stateCyrus .\n  }\n  UNION\n  {\n    ?birthPlaceCyrus <http://dbpedia.org/ontology/location> ?stateCyrus .\n  }\n  \n  # Downriver famous state patterns\n  <http://dbpedia.org/resource/Downriver> <http://dbpedia.org/ontology/wikiPageWikiLink> ?linkedEntity .\n  ?linkedEntity <http://dbpedia.org/ontology/birthPlace> ?birthPlaceDownriver .\n  {\n    ?birthPlaceDownriver <http://dbpedia.org/property/state> ?stateDownriver .\n  }\n  UNION\n  {\n    ?birthPlaceDownriver <http://dbpedia.org/ontology/location> ?stateDownriver .\n  }\n}"
    },
    {
        "question": "Who is a religious figure titled superior general?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/title> <http://dbpedia.org/resource/Superior_general>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Religious>}",
        "entities": [
            "http://dbpedia.org/resource/Superior_general_(Christianity)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Superior_general_(Christianity)> -> \"religious figure\""
        ],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?person WHERE {\n  ?person ?property <http://dbpedia.org/resource/Superior_general_(Christianity)> .\n  ?person a <http://dbpedia.org/ontology/Person> .\n}"
    },
    {
        "question": "List the employments of people who died in Tampa, Florida.",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Tampa,_Florida> . ?x <http://dbpedia.org/ontology/occupation> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Tampa,_Florida"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Tampa,_Florida> -> DIED_IN -> PEOPLE -> \"employment\""
        ],
        "paths": "<http://dbpedia.org/resource/Tampa,_Florida> -> DIED_IN -> PEOPLE -> \"employment\"",
        "generated_query": "SELECT DISTINCT ?employment WHERE {\n  {\n    ?person <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Tampa,_Florida> .\n  }\n  UNION\n  {\n    ?person <http://dbpedia.org/property/deathPlace> <http://dbpedia.org/resource/Tampa,_Florida> .\n  }\n  UNION\n  {\n    ?person <http://dbpedia.org/property/placeOfDeath> <http://dbpedia.org/resource/Tampa,_Florida> .\n  }\n  \n  {\n    ?person <http://dbpedia.org/ontology/occupation> ?employment .\n  }\n  UNION\n  {\n    ?person <http://dbpedia.org/property/occupation> ?employment .\n  }\n  UNION\n  {\n    ?person <http://dbpedia.org/ontology/title> ?employment .\n  }\n}"
    },
    {
        "question": "What are some famous veterinary physicians known for?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/field> <http://dbpedia.org/resource/Veterinary_physician> . ?x <http://dbpedia.org/property/knownFor> ?uri  . }",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?knownFor WHERE {\n  # No triples to match\n}\nLIMIT 10"
    },
    {
        "question": "List the movies edited by Julian Doyle in which music was composed by Geoffrey Brugon ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Geoffrey_Burgon> . ?uri <http://dbpedia.org/property/editing> <http://dbpedia.org/resource/Julian_Doyle_(filmmaker)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "entities": [
            "http://dbpedia.org/resource/Julian_Doyle_(filmmaker)",
            "http://dbpedia.org/resource/Geoffrey_Burgon"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Julian_Doyle_(filmmaker)> -> MOVIE -> <http://dbpedia.org/resource/Geoffrey_Burgon>"
        ],
        "paths": "<http://dbpedia.org/resource/Julian_Doyle_(filmmaker)> -> MOVIE -> <http://dbpedia.org/resource/Geoffrey_Burgon>",
        "generated_query": "SELECT DISTINCT ?movie WHERE {\n  ?movie <http://dbpedia.org/ontology/editing> <http://dbpedia.org/resource/Julian_Doyle_(filmmaker)> .\n  ?movie <http://dbpedia.org/ontology/musicComposer> <http://dbpedia.org/resource/Geoffrey_Burgon> .\n}"
    },
    {
        "question": "Name the children of the person who is the star of The Weathered Underground ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Weathered_Underground> <http://dbpedia.org/ontology/starring> ?x . ?x <http://dbpedia.org/property/children> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "entities": [
            "http://dbpedia.org/resource/Weather_Underground"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Weather_Underground> -> STAR -> \"children\""
        ],
        "paths": "<http://dbpedia.org/resource/Weather_Underground> -> STAR -> \"children\"",
        "generated_query": "Let's analyze the question and the retrieved triples step by step to write an accurate SPARQL query.\n\n**Question:**  \n\"Name the children of the person who is the star of The Weathered Underground?\"\n\n**Given:**  \n- Entity: <http://dbpedia.org/resource/Weather_Underground> (note: question says \"The Weathered Underground\"; this looks like a typo or confusion with \"Weather Underground\", the group is actually \"Weather Underground\" (https://dbpedia.org/resource/Weather_Underground)). We'll assume \"Weather Underground\" is meant.  \n- Reasoning path: Weather_Underground -> STAR -> \"children\"\n- Retrieved triples show that the \"star\" node corresponds to people known for Weather Underground, linked with predicate `<http://dbpedia.org/ontology/knownFor>`.\n- The triples show that ?var0 is knownFor Weather_Underground \u2014 these are candidates for the \"star\" people.\n- Sample star people include: Linda Evans (radical), Bill Ayers, Diana Oughton, Bernardine Dohrn, Scott Braley.\n- No triple was found explicitly relating these star people to their \"children\".\n- In the path, the final step from STAR to \"children\" is unexplained in the triples: no triples provided that explicitly show these people having children.\n\n**Key points and difficulties:**  \n- We know how to find the person(s) who are \"star\" of Weather Underground: ?starPerson `<knownFor>` Weather_Underground.\n- We want to find children of these star persons.\n- The given triples do not include any explicit children relation.\n- Also, the question uses \"the person who is the star\" \u2014 singular. But multiple people have knownFor Weather_Underground.\n- No children property or predicate is provided in the triples.\n- None of the provided triples explicitly link the star persons to children.\n- The triples mention `<http://dbpedia.org/property/spouse>`, but not children.\n\n**Analyzing predicates for children:**  \n- We did not get any triple involving children.\n- Since only the predicate `<http://dbpedia.org/ontology/knownFor>` and `<http://dbpedia.org/property/spouse>` appear, perhaps children would have been linked as `<http://dbpedia.org/ontology/child>` or a similar property, but it's not in the given triples.\n\nGiven the constraints to not make up any triples or properties, we can't assume or invent the predicate for children.\n\n**Conclusion:**  \n- We can only query knownFor relationship to find the star person(s).\n- Then, we want to find children. Since no triples or predicates linking the star person to children are given, the query cannot find any children unless we guess the predicate.\n\n**Is it acceptable?**  \n- The instructions say: \"Do not make up any triples or properties. Only use the ones provided.\"\n\n**Are there any predicates that might link star person to children in the triples? No.**  \n- No explicit mention of children or child predicates.\n- So we cannot use any.\n\n**What to do?**  \n- We must produce a SPARQL query nevertheless.\n- So, the query should:\n\n  1. Find star person(s) who are knownFor Weather_Underground.\n  2. Retrieve their children properties.\n\n- Since no predicate provided, we can't write this part.\n\n- However, if children property is not present, no results will be retrieved.\n\n- According to DBpedia ontology, children usually are linked with property `<http://dbpedia.org/ontology/child>` or `<http://dbpedia.org/property/children>`, but neither was provided in the retrieved triples.\n\n**Verifying retrieved triples again:**\n\n- The only predicates linking star persons are:\n\n  - `<http://dbpedia.org/ontology/knownFor>` (to the band)\n  - `<http://dbpedia.org/property/spouse>` (between individuals)\n\n  No children-related predicates.\n\n**Possibility: Use `dc:subject` or `wikiPageWikiLink`?**  \n- The triples involve:\n\n  - ?vals `<http://dbpedia.org/ontology/wikiPageWikiLink>` ?var0 .\n  - And ?var0 `<http://purl.org/dc/terms/subject>` ?var1 .\n\n- These link the star persons to categories but are not about children.\n\n**Summary:**  \n- No direct children data is provided.\n- So the query can only attempt to get children if present via predicates given in the triples or known.\n\n- The instructions say not to invent properties.\n\n- Since no children property is in the triples, we cannot retrieve children.\n\n**Best we can do:**  \n- Write a query that selects children (?child) of a person (?starPerson) knownFor Weather_Underground, where children are connected via any of the predicates retrieved. But none matches children.\n\n- Alternatively, given no predicate for children is provided, make a query that returns no result, to adhere strictly to instructions.\n\n- Perhaps the best compromise is a query that selects children of star people, assuming the property `<http://dbpedia.org/ontology/child>` which is standard DBpedia ontology for children, but since this was not among the retrieved triples, it's not allowed.\n\n**Hence, final decision:**  \n- Use only predicate `<http://dbpedia.org/property/children>` which is commonly used (but even this was not in triples).\n\n- As the instructions say \"Do not make up any triples or properties. Only use the ones provided,\" and none for children is provided, the correct approach is to produce a query that tries to select children if any linked by any predicate, but no predicate is given.\n\n- Therefore, produce a query that does not return anything (empty query), or returns the star persons and attempts to get children with a predicate ?p (unbound).\n\n- Probably, best is to only select star persons and children connected via any predicate known? No, that will return a lot of irrelevant data.\n\n- So, final approach:\n\nMake a SPARQL query that:\n\n- Finds ?starPerson with ?starPerson `<http://dbpedia.org/ontology/knownFor>` Weather_Underground\n- Attempts to find children: via `<http://dbpedia.org/property/children>` or `<http://dbpedia.org/ontology/child>` if any triple exists in the graph (even if it wasn't returned in the path analysis). But instructions prevent \"making up\" triples.\n\n- So, we can only try the predicates we have triples for:\n\n  - knownFor\n  - wikiPageWikiLink\n  - spouse\n\n- None relate to children.\n\nHence, the best is to produce a SPARQL SELECT query returning ?children where the triple pattern is:\n\n?starPerson <http://dbpedia.org/ontology/knownFor> Weather_Underground .\n\n?starPerson ?p ?children .\n\nAND filter ?p from {some children predicates}, but since none are given, cannot do.\n\nThus, no solution unless we violate instructions.\n\n---\n\n**Final reasoning:**  \nSince no children property was found in the triples, we can't write a query that retrieves children for the star persons from the given data.\n\n**But instructions say always produce a query.**\n\nIn this case, the best we can do is produce a query that lists star persons and their children, linked via an unknown predicate ALL_CAPS CHILDREN, which can be interpreted as unknown predicate, but instructions say URIs represent known properties and ALL_CAPS are unknown predicates or classes.\n\nWe only used known URI"
    },
    {
        "question": "Which owner of Chelsea F.C also owns Evraz ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Evraz> <http://dbpedia.org/ontology/owningCompany> ?uri. <http://dbpedia.org/resource/Chelsea_F.C.> <http://dbpedia.org/property/owner> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Chelsea_F.C.",
            "http://dbpedia.org/resource/Evraz"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Chelsea_F.C.> -> OWNER -> <http://dbpedia.org/resource/Evraz>"
        ],
        "paths": "<http://dbpedia.org/resource/Chelsea_F.C.> -> OWNER -> <http://dbpedia.org/resource/Evraz>",
        "generated_query": "SELECT DISTINCT ?owner WHERE {\n  {\n    <http://dbpedia.org/resource/Chelsea_F.C.> <http://dbpedia.org/property/owner> ?owner .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Chelsea_F.C.> <http://dbpedia.org/ontology/owner> ?owner .\n  }\n  \n  {\n    {\n      <http://dbpedia.org/resource/Evraz> <http://dbpedia.org/property/owner> ?owner .\n    }\n    UNION\n    {\n      <http://dbpedia.org/resource/Evraz> <http://dbpedia.org/ontology/owner> ?owner .\n    }\n    UNION\n    {\n      <http://dbpedia.org/resource/Evraz> <http://dbpedia.org/ontology/owningCompany> ?owner .\n    }\n  }\n}"
    },
    {
        "question": "Did Umkhonto we Sizwe had Nelson Mandela as a commander?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/Umkhonto_we_Sizwe> <http://dbpedia.org/property/notableCommanders> <http://dbpedia.org/resource/Nelson_Mandela> }",
        "entities": [
            "http://dbpedia.org/resource/UMkhonto_weSizwe",
            "http://dbpedia.org/resource/Nelson_Mandela"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/UMkhonto_weSizwe> -> <http://dbpedia.org/resource/Nelson_Mandela>"
        ],
        "paths": "",
        "generated_query": "ASK WHERE {\n  <http://dbpedia.org/resource/UMkhonto_weSizwe> ?p <http://dbpedia.org/resource/Nelson_Mandela> .\n}"
    },
    {
        "question": "Name the office holder with associate as Marcus Calpurnius Bibulus and has a kid named Augustus?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/associate> <http://dbpedia.org/resource/Marcus_Calpurnius_Bibulus> . ?uri <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Augustus>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?officeHolder WHERE {\n  ?officeHolder ?assocProp ?associate .\n  ?associate <http://www.w3.org/2000/01/rdf-schema#label> \"Marcus Calpurnius Bibulus\" .\n  ?officeHolder ?kidProp ?kid .\n  ?kid <http://www.w3.org/2000/01/rdf-schema#label> \"Augustus\" .\n}"
    },
    {
        "question": "What are the movies whose screenplay is done by Eric Roth?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/screenplay> <http://dbpedia.org/resource/Eric_Roth>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "entities": [
            "http://dbpedia.org/resource/Eric_Roth"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Eric_Roth> -> MOVIE"
        ],
        "paths": "<http://dbpedia.org/resource/Eric_Roth> -> MOVIE",
        "generated_query": "SELECT DISTINCT ?movie WHERE {\n  ?movie <http://dbpedia.org/property/screenplay> <http://dbpedia.org/resource/Eric_Roth> .\n}"
    },
    {
        "question": "What is the total number of writers whose singles are recorded in Miami?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/ontology/recordedIn> <http://dbpedia.org/resource/Miami> . ?x <http://dbpedia.org/property/writer> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Miami"
        ],
        "classes": [],
        "relations": [
            "WRITER -> SINGLE -> <http://dbpedia.org/resource/Miami>"
        ],
        "paths": "",
        "generated_query": "SELECT (COUNT(DISTINCT ?writer) AS ?totalWriters)\nWHERE {\n  ?writer ?p1 ?single .\n  ?single ?p2 <http://dbpedia.org/resource/Miami> .\n}"
    },
    {
        "question": "What religions are followed by members of the societies whose architectural influences can be seen on the Sanggar Agung ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sanggar_Agung> <http://dbpedia.org/property/architecturalStyle> ?x . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Sanggar_Agung"
        ],
        "classes": [],
        "relations": [
            "SOCIETY -> religion",
            "<http://dbpedia.org/resource/Sanggar_Agung> -> SOCIETY"
        ],
        "paths": "<http://dbpedia.org/resource/Sanggar_Agung> -> SOCIETY",
        "generated_query": "SELECT DISTINCT ?religion WHERE {\n  <http://dbpedia.org/resource/Sanggar_Agung> <http://dbpedia.org/ontology/architecturalStyle> ?society .\n  ?society <http://dbpedia.org/ontology/religion> ?religion .\n}"
    },
    {
        "question": "Who is the producer of album which has the song Money?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Money_(Pink_Floyd_song)> <http://dbpedia.org/property/album> ?x . ?x <http://dbpedia.org/property/producer> ?uri  . }",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?producer WHERE {\n}"
    },
    {
        "question": "List the Sci-fi TV shows with theme music given by Ron Grainer?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/genre> <http://dbpedia.org/resource/Science_fiction> . ?uri <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Ron_Grainer>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "entities": [
            "http://dbpedia.org/resource/Ron_Grainer",
            "http://dbpedia.org/resource/Science_fiction"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Science_fiction> -> <http://dbpedia.org/resource/Ron_Grainer>"
        ],
        "paths": "<http://dbpedia.org/resource/Science_fiction> -> <http://dbpedia.org/resource/Ron_Grainer>",
        "generated_query": "SELECT DISTINCT ?show WHERE {\n  ?show <http://dbpedia.org/ontology/genre> <http://dbpedia.org/resource/Science_fiction> .\n  ?show <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Ron_Grainer> .\n}"
    },
    {
        "question": "What is the company to which Fusajiro Yamauchi proprietor to ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/foundedBy> <http://dbpedia.org/resource/Fusajiro_Yamauchi>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
        "entities": [
            "http://dbpedia.org/resource/Fusajiro_Yamauchi"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Fusajiro_Yamauchi> -> COMPANY"
        ],
        "paths": "<http://dbpedia.org/resource/Fusajiro_Yamauchi> -> COMPANY",
        "generated_query": "SELECT DISTINCT ?company WHERE {\n  {\n    ?company <http://dbpedia.org/ontology/foundedBy> <http://dbpedia.org/resource/Fusajiro_Yamauchi> .\n  }\n  UNION\n  {\n    ?company <http://dbpedia.org/property/founder> <http://dbpedia.org/resource/Fusajiro_Yamauchi> .\n  }\n}"
    },
    {
        "question": "Who is the writer of mark twain Tonight ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mark_Twain_Tonight> <http://dbpedia.org/property/writer> ?uri } ",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?writer WHERE {\n  ?work <http://www.w3.org/2000/01/rdf-schema#label> \"mark twain Tonight\"@en .\n  ?work ?p ?writer .\n}"
    },
    {
        "question": "How many members are there in the European Go Federation?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { <http://dbpedia.org/resource/European_Go_Federation> <http://dbpedia.org/property/membership> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/European_Go_Federation"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/European_Go_Federation> -> \"number of members\""
        ],
        "paths": "<http://dbpedia.org/resource/European_Go_Federation> -> \"number of members\"",
        "generated_query": "SELECT (COUNT(DISTINCT ?member) AS ?numberOfMembers)\nWHERE {\n  <http://dbpedia.org/resource/European_Go_Federation> <http://dbpedia.org/property/membership> ?member .\n}"
    },
    {
        "question": "Was Kevin Rudd the PM of Julia Gillard?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/Julia_Gillard> <http://dbpedia.org/ontology/primeMinister> <http://dbpedia.org/resource/Kevin_Rudd> }",
        "entities": [
            "http://dbpedia.org/resource/Kevin_Rudd",
            "http://dbpedia.org/resource/Julia_Gillard"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Kevin_Rudd> -> <http://dbpedia.org/resource/Julia_Gillard>"
        ],
        "paths": "<http://dbpedia.org/resource/Kevin_Rudd> -> <http://dbpedia.org/resource/Julia_Gillard>",
        "generated_query": "ASK WHERE {\n  {\n    <http://dbpedia.org/resource/Kevin_Rudd> <http://dbpedia.org/property/predecessor> <http://dbpedia.org/resource/Julia_Gillard> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Kevin_Rudd> <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Julia_Gillard> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Kevin_Rudd> <http://dbpedia.org/ontology/primeMinister> <http://dbpedia.org/resource/Julia_Gillard> .\n  }\n}"
    },
    {
        "question": "Daniel L D Granger and Job Durfee have based their political career in which US state?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Daniel_L._D._Granger> <http://dbpedia.org/property/state> ?uri. <http://dbpedia.org/resource/Job_Durfee> <http://dbpedia.org/property/state> ?uri . }",
        "entities": [
            "http://dbpedia.org/resource/Job_Durfee",
            "http://dbpedia.org/resource/Daniel_L._D._Granger"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Daniel_L._D._Granger> -> \"US state\"",
            "<http://dbpedia.org/resource/Job_Durfee> -> \"US state\""
        ],
        "paths": "<http://dbpedia.org/resource/Daniel_L._D._Granger> -> \"US state\", <http://dbpedia.org/resource/Job_Durfee> -> \"US state\"",
        "generated_query": "SELECT DISTINCT ?state WHERE {\n  <http://dbpedia.org/resource/Daniel_L._D._Granger> <http://dbpedia.org/property/state> ?state .\n  <http://dbpedia.org/resource/Job_Durfee> <http://dbpedia.org/property/state> ?state .\n}"
    },
    {
        "question": "What is the mascot of the handball teams in the Turkish Handball Super League?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/league> <http://dbpedia.org/resource/Turkish_Handball_Super_League> . ?x <http://dbpedia.org/property/mascot> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/HandballTeam>}",
        "entities": [
            "http://dbpedia.org/resource/Turkish_Handball_Super_League",
            "http://dbpedia.org/resource/Handball"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Turkish_Handball_Super_League> -> <http://dbpedia.org/resource/Handball>",
            "\"team\" -> \"mascot\"",
            "<http://dbpedia.org/resource/Turkish_Handball_Super_League> -> \"team\""
        ],
        "paths": "<http://dbpedia.org/resource/Turkish_Handball_Super_League> -> <http://dbpedia.org/resource/Handball>, <http://dbpedia.org/resource/Turkish_Handball_Super_League> -> \"team\"",
        "generated_query": "SELECT DISTINCT ?mascot WHERE {\n  <http://dbpedia.org/resource/Turkish_Handball_Super_League> <http://dbpedia.org/ontology/participant> ?team .\n  ?team <http://dbpedia.org/property/mascot> ?mascot .\n}"
    },
    {
        "question": "What city was recorded in Live in detroit which is also the official residence of ken Holland ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Live_in_Detroit,_MI> <http://dbpedia.org/ontology/recordedIn> ?uri. <http://dbpedia.org/resource/Ken_Holland> <http://dbpedia.org/ontology/residence> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Ken_Holland",
            "http://dbpedia.org/resource/Live_in_Eindhoven"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Live_in_Eindhoven> -> CITY",
            "<http://dbpedia.org/resource/Ken_Holland> -> CITY"
        ],
        "paths": "<http://dbpedia.org/resource/Live_in_Eindhoven> -> CITY, <http://dbpedia.org/resource/Ken_Holland> -> CITY",
        "generated_query": "SELECT DISTINCT ?city WHERE {\n  <http://dbpedia.org/resource/Live_in_Eindhoven> <http://dbpedia.org/ontology/recordedIn> ?place .\n\n  OPTIONAL {\n    ?place <http://dbpedia.org/property/location> ?city .\n  }\n  OPTIONAL {\n    ?city <http://dbpedia.org/ontology/city> ?place .\n  }\n  OPTIONAL {\n    ?city <http://dbpedia.org/property/city> ?place .\n  }\n\n  <http://dbpedia.org/resource/Ken_Holland> <http://dbpedia.org/ontology/residence> ?residence .\n  \n  ?residence <http://dbpedia.org/property/city> ?city .\n\n  FILTER(BOUND(?city))\n}"
    },
    {
        "question": "Marika Gombitov makes songs in which languages?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/artist> <http://dbpedia.org/resource/Marika_Gombitov\u00e1> . ?x <http://dbpedia.org/property/language> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Marika_Gombitov\u00e1"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Marika_Gombitov\u00e1> -> \"language\""
        ],
        "paths": "<http://dbpedia.org/resource/Marika_Gombitov\u00e1> -> \"language\"",
        "generated_query": "SELECT DISTINCT ?language WHERE {\n  ?song <http://dbpedia.org/ontology/artist> <http://dbpedia.org/resource/Marika_Gombitov\u00e1> .\n  {\n    ?song <http://dbpedia.org/property/language> ?language .\n  }\n  UNION\n  {\n    ?song <http://dbpedia.org/ontology/language> ?language .\n  }\n}"
    },
    {
        "question": "What are some musical artists associated with the ones signed up with EMI?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/recordLabel> <http://dbpedia.org/resource/EMI> . ?x <http://dbpedia.org/ontology/associatedMusicalArtist> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>}",
        "entities": [
            "http://dbpedia.org/resource/EMI"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/EMI> -> MUSICAL_ARTIST"
        ],
        "paths": "<http://dbpedia.org/resource/EMI> -> MUSICAL_ARTIST",
        "generated_query": "SELECT DISTINCT ?artist WHERE {\n  ?work <http://dbpedia.org/ontology/recordLabel> <http://dbpedia.org/resource/EMI> .\n  {\n    ?work <http://dbpedia.org/ontology/artist> ?artist .\n  }\n  UNION\n  {\n    ?work <http://dbpedia.org/property/artist> ?artist .\n  }\n  FILTER(isIRI(?artist))\n}"
    },
    {
        "question": "Name the river which flows through the closest city of Mount Raimer ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mount_Raimer> <http://dbpedia.org/property/nearestCity> ?x . ?x <http://dbpedia.org/ontology/river> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Mount_Raimer"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Mount_Raimer> -> CLOSEST_CITY -> RIVER"
        ],
        "paths": "<http://dbpedia.org/resource/Mount_Raimer> -> CLOSEST_CITY -> RIVER",
        "generated_query": "SELECT DISTINCT ?river WHERE {\n  <http://dbpedia.org/resource/Mount_Raimer> <http://dbpedia.org/property/nearestCity> ?city .\n  {\n    ?city <http://dbpedia.org/ontology/river> ?river .\n  }\n  UNION\n  {\n    ?city <http://dbpedia.org/property/river> ?river .\n  }\n}"
    },
    {
        "question": "Name the scientist whose supervisor also supervised Mary Ainsworth?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/doctoralStudents> <http://dbpedia.org/resource/Mary_Ainsworth> . ?uri <http://dbpedia.org/property/doctoralAdvisor> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
        "entities": [
            "http://dbpedia.org/resource/Mary_Ainsworth"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Mary_Ainsworth> -> SUPERVISOR -> SCIENTIST"
        ],
        "paths": "<http://dbpedia.org/resource/Mary_Ainsworth> -> SUPERVISOR -> SCIENTIST",
        "generated_query": "SELECT DISTINCT ?scientist WHERE {\n  <http://dbpedia.org/resource/Mary_Ainsworth> <http://dbpedia.org/ontology/doctoralAdvisor> ?supervisor .\n  ?scientist <http://dbpedia.org/ontology/doctoralAdvisor> ?supervisor .\n  FILTER (?scientist != <http://dbpedia.org/resource/Mary_Ainsworth>)\n}"
    },
    {
        "question": "What are some relatives of armymen who died in Germany?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/placeOfDeath> <http://dbpedia.org/resource/Germany> . ?x <http://dbpedia.org/ontology/relation> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryPerson>}",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?relative WHERE {\n  ?armyman a <http://example.org/ontology/ArmyMan> .\n  ?armyman <http://example.org/ontology/deathPlace> <http://example.org/resource/Germany> .\n  ?armyman <http://example.org/ontology/hasRelative> ?relative .\n}"
    },
    {
        "question": "Deion sanders and Hinkey haines debuted their career with which common team?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hinkey_Haines> <http://dbpedia.org/property/debutteam> ?uri. <http://dbpedia.org/resource/Deion_Sanders> <http://dbpedia.org/property/debutteam> ?uri . }",
        "entities": [
            "http://dbpedia.org/resource/Hinkey_Haines",
            "http://dbpedia.org/resource/Dean_Saunders"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Dean_Saunders> -> <http://dbpedia.org/resource/Hinkey_Haines>"
        ],
        "paths": "<http://dbpedia.org/resource/Dean_Saunders> -> <http://dbpedia.org/resource/Hinkey_Haines>",
        "generated_query": "SELECT DISTINCT ?team WHERE {\n  <http://dbpedia.org/resource/Dean_Saunders> ?p ?team .\n  <http://dbpedia.org/resource/Hinkey_Haines> ?p ?team .\n}"
    },
    {
        "question": "Which garrison of East Indies Station is also the route end of Mumbai Vadodara Express ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mumbai_Vadodara_Expressway> <http://dbpedia.org/ontology/routeEnd> ?uri. <http://dbpedia.org/resource/East_Indies_Station> <http://dbpedia.org/ontology/garrison> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/East_Indies_Station"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/East_Indies_Station> -> GARRISON"
        ],
        "paths": "<http://dbpedia.org/resource/East_Indies_Station> -> GARRISON",
        "generated_query": "SELECT DISTINCT ?garrison WHERE {\n  <http://dbpedia.org/resource/East_Indies_Station> <http://dbpedia.org/ontology/garrison> ?garrison .\n  {\n    <http://dbpedia.org/resource/Mumbai_Vadodara_Expressway> <http://dbpedia.org/ontology/routeEnd> ?garrison .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Mumbai_Vadodara_Expressway> <http://dbpedia.org/property/terminusB> ?garrison .\n  }\n}"
    },
    {
        "question": "To which political party does Virendra Kataria belongs ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Virendra_Kataria> <http://dbpedia.org/property/party> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Virendra_Kataria"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Virendra_Kataria> -> \"political party\""
        ],
        "paths": "<http://dbpedia.org/resource/Virendra_Kataria> -> \"political party\"",
        "generated_query": "SELECT DISTINCT ?party WHERE {\n  <http://dbpedia.org/resource/Virendra_Kataria> <http://dbpedia.org/ontology/party> ?party .\n}"
    },
    {
        "question": "Copley Medal has been awarded to which scientists?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Copley_Medal>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
        "entities": [
            "http://dbpedia.org/resource/Copley_Medal"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Copley_Medal> -> SCIENTIST"
        ],
        "paths": "<http://dbpedia.org/resource/Copley_Medal> -> SCIENTIST",
        "generated_query": "SELECT DISTINCT ?scientist WHERE {\n  ?scientist <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Copley_Medal> .\n  ?scientist <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist> .\n}"
    },
    {
        "question": "What is the total number of awards whose presenter's headquarters is Beverly Hills, California?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/property/headquarters> <http://dbpedia.org/resource/Beverly_Hills,_California> . ?uri <http://dbpedia.org/ontology/presenter> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Award>}",
        "entities": [
            "http://dbpedia.org/resource/Beverly_Hills,_California"
        ],
        "classes": [],
        "relations": [
            "AWARD -> \"total number of awards\"",
            "AWARD -> PRESENTER -> <http://dbpedia.org/resource/Beverly_Hills,_California>"
        ],
        "paths": "",
        "generated_query": "SELECT (COUNT(DISTINCT ?award) AS ?totalAwards)\nWHERE {\n  ?award ?p1 ?presenter .\n  ?presenter ?p2 <http://dbpedia.org/resource/Beverly_Hills,_California> .\n}"
    },
    {
        "question": "Who is the narrator of The Price of Beauty ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Price_of_Beauty> <http://dbpedia.org/ontology/narrator> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/The_Price_of_Beauty"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/The_Price_of_Beauty> -> \"narrator\""
        ],
        "paths": "<http://dbpedia.org/resource/The_Price_of_Beauty> -> \"narrator\"",
        "generated_query": "SELECT DISTINCT ?narrator WHERE {\n  <http://dbpedia.org/resource/The_Price_of_Beauty> <http://dbpedia.org/ontology/narrator> ?narrator .\n}"
    },
    {
        "question": "Does Dan River flow into the Jordan Valley?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/Jordan_River> <http://dbpedia.org/ontology/leftTributary> <http://dbpedia.org/resource/Dan_River_(Middle_East)> }",
        "entities": [
            "http://dbpedia.org/resource/Jordan_Valley",
            "http://dbpedia.org/resource/Dan_River_(Virginia)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Dan_River_(Virginia)> -> <http://dbpedia.org/resource/Jordan_Valley>"
        ],
        "paths": "",
        "generated_query": "ASK WHERE {\n  <http://dbpedia.org/resource/Dan_River_(Virginia)> ?p <http://dbpedia.org/resource/Jordan_Valley> .\n}"
    },
    {
        "question": "Who is the producer of the device which is the operating system of Now TV  ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Now_TV_(UK)> <http://dbpedia.org/ontology/operatingSystem> ?x . ?x <http://dbpedia.org/ontology/manufacturer> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Operating_system",
            "http://dbpedia.org/resource/Now_TV_(Hong_Kong)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Now_TV_(Hong_Kong)> -> <http://dbpedia.org/resource/Operating_system>"
        ],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?producer WHERE {\n  <http://dbpedia.org/resource/Now_TV_(Hong_Kong)> <http://dbpedia.org/ontology/operatingSystem> ?os .\n  ?device <http://dbpedia.org/ontology/operatingSystem> ?os .\n  {\n    ?device <http://dbpedia.org/ontology/producer> ?producer .\n  }\n  UNION\n  {\n    ?device <http://dbpedia.org/ontology/manufacturer> ?producer .\n  }\n}"
    },
    {
        "question": "How many artists have collaborated with famous guitar players?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/property/notableInstruments> <http://dbpedia.org/resource/Guitar> . ?x <http://dbpedia.org/ontology/associatedMusicalArtist> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>}",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT (COUNT(DISTINCT ?artist) AS ?count)\nWHERE {\n  ?artist a <http://example.org/ontology/Artist> .\n  ?guitarPlayer a <http://example.org/ontology/GuitarPlayer> .\n  ?guitarPlayer a <http://example.org/ontology/FamousArtist> .\n  ?artist <http://example.org/ontology/collaboratedWith> ?guitarPlayer .\n}"
    },
    {
        "question": "How many politicians live in India?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE {?uri <http://dbpedia.org/ontology/residence> <http://dbpedia.org/resource/India>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
        "entities": [
            "http://dbpedia.org/resource/India"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/India> -> POLITICIAN"
        ],
        "paths": "<http://dbpedia.org/resource/India> -> POLITICIAN",
        "generated_query": "SELECT (COUNT(DISTINCT ?person) AS ?count)\nWHERE {\n  ?person <http://dbpedia.org/ontology/residence> <http://dbpedia.org/resource/India> .\n  ?person <http://dbpedia.org/property/office> ?office .\n}"
    },
    {
        "question": "What is the base currency of the country which operates the Marion Dufresne?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Marion_Dufresne_(1995)> <http://dbpedia.org/ontology/operator> ?x . ?x <http://dbpedia.org/ontology/currency> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Marion_Dufresne_(1994)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Marion_Dufresne_(1994)> -> COUNTRY -> \"base currency\""
        ],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?baseCurrency WHERE {\n  <http://dbpedia.org/resource/Marion_Dufresne_(1994)> \n    ( \n      <http://dbpedia.org/ontology/operator> | \n      <http://dbpedia.org/ontology/country> \n    ) ?country .\n  \n  ?country <http://dbpedia.org/ontology/currency> ?baseCurrency .\n}"
    },
    {
        "question": "What is the region served by the governor of Stephen L.R. McNichols ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Stephen_L.R._McNichols> <http://dbpedia.org/property/governor> ?x . ?x <http://dbpedia.org/ontology/region> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Stephen_McNichols"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Stephen_McNichols> -> GOVERNOR -> REGION_SERVED"
        ],
        "paths": "<http://dbpedia.org/resource/Stephen_McNichols> -> GOVERNOR -> REGION_SERVED",
        "generated_query": "SELECT DISTINCT ?region WHERE {\n  <http://dbpedia.org/resource/Stephen_McNichols> <http://dbpedia.org/ontology/wikiPageWikiLink> ?person .\n  {\n    ?person <http://dbpedia.org/ontology/governor> ?governor .\n  } UNION {\n    ?person <http://dbpedia.org/property/governor> ?governor .\n  }\n  ?governor <http://dbpedia.org/ontology/successor> ?successor .\n  ?successor <http://dbpedia.org/ontology/region> ?region .\n}"
    },
    {
        "question": "Who operates Liverpool Playhouse ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Liverpool_Playhouse> <http://dbpedia.org/ontology/operatedBy> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Liverpool_Playhouse"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Liverpool_Playhouse> -> \"operator\""
        ],
        "paths": "<http://dbpedia.org/resource/Liverpool_Playhouse> -> \"operator\"",
        "generated_query": "SELECT DISTINCT ?operator WHERE {\n  <http://dbpedia.org/resource/Liverpool_Playhouse> <http://dbpedia.org/property/operator> ?operator .\n}"
    },
    {
        "question": "Who has composed songs produced by Terry Melcher?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/producer> <http://dbpedia.org/resource/Terry_Melcher> . ?x <http://dbpedia.org/ontology/composer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Song>}",
        "entities": [
            "http://dbpedia.org/resource/Terry_Melcher"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Terry_Melcher> -> COMPOSED_SONG -> COMPOSER"
        ],
        "paths": "<http://dbpedia.org/resource/Terry_Melcher> -> COMPOSED_SONG -> COMPOSER",
        "generated_query": "SELECT DISTINCT ?composer WHERE {\n  {\n    ?song <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Terry_Melcher> .\n    ?song <http://dbpedia.org/property/writer> ?composer .\n  }\n  UNION\n  {\n    ?song <http://dbpedia.org/property/producer> <http://dbpedia.org/resource/Terry_Melcher> .\n    ?song <http://dbpedia.org/property/writer> ?composer .\n  }\n}"
    },
    {
        "question": "To which series does Lost special belong to ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Lost_Special> <http://dbpedia.org/property/series> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Lost_(TV_series)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Lost_(TV_series)> -> \"series\""
        ],
        "paths": "<http://dbpedia.org/resource/Lost_(TV_series)> -> \"series\"",
        "generated_query": "SELECT DISTINCT ?series WHERE {\n  ?special <http://dbpedia.org/property/series> <http://dbpedia.org/resource/Lost_(TV_series)> .\n  BIND(<http://dbpedia.org/resource/Lost_(TV_series)> AS ?series)\n}"
    },
    {
        "question": "How many albums did the maker of The Band produce?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/ontology/artist> <http://dbpedia.org/resource/The_Band> . ?x <http://dbpedia.org/ontology/subsequentWork> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Album>}",
        "entities": [
            "http://dbpedia.org/resource/The_Band"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/The_Band> -> MAKER -> \"number of albums produced\""
        ],
        "paths": "<http://dbpedia.org/resource/The_Band> -> MAKER -> \"number of albums produced\"",
        "generated_query": "SELECT (COUNT(DISTINCT ?album) AS ?numberOfAlbumsProduced)\nWHERE {\n  <http://dbpedia.org/resource/The_Band> <http://dbpedia.org/property/pastMembers> ?maker .\n  {\n    ?album <http://dbpedia.org/ontology/producer> ?maker .\n  }\n  UNION\n  {\n    ?album <http://dbpedia.org/property/producer> ?maker .\n  }\n}"
    },
    {
        "question": "List few musical artist whose notable instruments are Ludwig Drums and  Remo?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/notableInstruments> <http://dbpedia.org/resource/Ludwig_Drums> . ?uri <http://dbpedia.org/ontology/instrument> <http://dbpedia.org/resource/Remo>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>}",
        "entities": [
            "http://dbpedia.org/resource/Remo",
            "http://dbpedia.org/resource/Ludwig_Drums"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Ludwig_Drums> -> MUSICAL_ARTIST",
            "<http://dbpedia.org/resource/Remo> -> MUSICAL_ARTIST"
        ],
        "paths": "<http://dbpedia.org/resource/Ludwig_Drums> -> MUSICAL_ARTIST, <http://dbpedia.org/resource/Remo> -> MUSICAL_ARTIST",
        "generated_query": "SELECT DISTINCT ?artist WHERE {\n  ?artist <http://dbpedia.org/property/notableInstruments> <http://dbpedia.org/resource/Ludwig_Drums> .\n  ?artist <http://dbpedia.org/property/notableInstruments> <http://dbpedia.org/resource/Remo> .\n}\nLIMIT 10"
    },
    {
        "question": "How many rivers start in an English speaking country?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/ontology/officialLanguage> <http://dbpedia.org/resource/English_language> . ?uri <http://dbpedia.org/ontology/sourceCountry> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "entities": [
            "http://dbpedia.org/resource/English-speaking_world"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/English-speaking_world> -> RIVER_START_LOCATION"
        ],
        "paths": "<http://dbpedia.org/resource/English-speaking_world> -> RIVER_START_LOCATION",
        "generated_query": "SELECT (COUNT(DISTINCT ?river) AS ?count)\nWHERE {\n  <http://dbpedia.org/resource/English-speaking_world> <http://dbpedia.org/ontology/wikiPageWikiLink> ?country .\n  ?river <http://dbpedia.org/ontology/sourceCountry> ?country .\n}"
    },
    {
        "question": "For a position in which institution were both Jack Ryan and Robert sarvis both appointed?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jack_Ryan_(politician)> <http://dbpedia.org/ontology/nominee> ?uri. <http://dbpedia.org/resource/Robert_Sarvis> <http://dbpedia.org/ontology/nominee> ?uri . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>}",
        "entities": [
            "http://dbpedia.org/resource/Robert_Sarvis",
            "http://dbpedia.org/resource/Jack_Ryan_(politician)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Jack_Ryan_(politician)> -> <http://dbpedia.org/resource/Robert_Sarvis>"
        ],
        "paths": "<http://dbpedia.org/resource/Jack_Ryan_(politician)> -> <http://dbpedia.org/resource/Robert_Sarvis>",
        "generated_query": "SELECT DISTINCT ?institution WHERE {\n  <http://dbpedia.org/resource/Jack_Ryan_(politician)> <http://dbpedia.org/ontology/nominee> ?institution .\n  <http://dbpedia.org/resource/Robert_Sarvis> <http://dbpedia.org/ontology/nominee> ?institution .\n}"
    },
    {
        "question": "Where Everybody knows you is the theme album of which show ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Where_Everybody_Knows_Your_Name> <http://dbpedia.org/ontology/album> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Where_Everybody_Knows_Your_Name"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Where_Everybody_Knows_Your_Name> -> \"theme album of\""
        ],
        "paths": "<http://dbpedia.org/resource/Where_Everybody_Knows_Your_Name> -> \"theme album of\"",
        "generated_query": "SELECT DISTINCT ?show WHERE {\n  ?show <http://dbpedia.org/ontology/openingTheme> <http://dbpedia.org/resource/Where_Everybody_Knows_Your_Name> .\n}"
    },
    {
        "question": "Food in which countries has shallot in it?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/ingredient> <http://dbpedia.org/resource/Shallot> . ?x <http://dbpedia.org/ontology/country> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Food>}",
        "entities": [
            "http://dbpedia.org/resource/Shallot"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Shallot> -> COUNTRY"
        ],
        "paths": "<http://dbpedia.org/resource/Shallot> -> COUNTRY",
        "generated_query": "SELECT DISTINCT ?country WHERE {\n  ?food <http://dbpedia.org/ontology/ingredient> <http://dbpedia.org/resource/Shallot> .\n  ?food <http://dbpedia.org/ontology/wikiPageWikiLink> ?country .\n  FILTER(!STRSTARTS(STR(?country), \"http://dbpedia.org/resource/Category:\"))\n}"
    },
    {
        "question": "Which rivers have source origins asnorth western, Zambia ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/sourceRegion> <http://dbpedia.org/resource/North-Western_Province,_Zambia>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "entities": [
            "http://dbpedia.org/resource/Zambia"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Zambia> -> \"north western\""
        ],
        "paths": "<http://dbpedia.org/resource/Zambia> -> \"north western\"",
        "generated_query": "SELECT DISTINCT ?river WHERE {\n  {\n    ?dam <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Zambia> .\n    ?dam <http://dbpedia.org/ontology/river> ?river .\n  }\n  UNION\n  {\n    ?dam <http://dbpedia.org/property/location> <http://dbpedia.org/resource/Zambia> .\n    ?dam <http://dbpedia.org/ontology/river> ?river .\n  }\n}"
    },
    {
        "question": "Organization holding stocks of  Galician and German wikipedias?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Galician_Wikipedia> <http://dbpedia.org/property/owner> ?uri. <http://dbpedia.org/resource/German_Wikipedia> <http://dbpedia.org/ontology/owner> ?uri . }",
        "entities": [
            "http://dbpedia.org/resource/List_of_Wikipedias"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/List_of_Wikipedias> -> \"organization holding stocks\""
        ],
        "paths": "<http://dbpedia.org/resource/List_of_Wikipedias> -> \"organization holding stocks\"",
        "generated_query": "SELECT DISTINCT ?organization WHERE {\n  <http://dbpedia.org/resource/Galician_Wikipedia> <http://dbpedia.org/property/owner> ?organization .\n  <http://dbpedia.org/resource/German_Wikipedia> <http://dbpedia.org/property/owner> ?organization .\n}"
    },
    {
        "question": "Name the river with Readin, Brekshire in its path and mouth place is Sothend-on-sea ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/city> <http://dbpedia.org/resource/Reading,_Berkshire> . ?uri <http://dbpedia.org/ontology/mouthPlace> <http://dbpedia.org/resource/Southend-on-Sea>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "entities": [
            "http://dbpedia.org/resource/Reading,_Berkshire",
            "http://dbpedia.org/resource/Brecknockshire"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Brecknockshire> -> RIVER",
            "<http://dbpedia.org/resource/Reading,_Berkshire> -> RIVER",
            "RIVER -> \"mouth place\" -> \"Sothend-on-sea\""
        ],
        "paths": "<http://dbpedia.org/resource/Brecknockshire> -> RIVER, <http://dbpedia.org/resource/Reading,_Berkshire> -> RIVER",
        "generated_query": "SELECT DISTINCT ?river WHERE {\n  ?river <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Reading,_Berkshire> .\n  ?river <http://dbpedia.org/ontology/mouthPlace> <http://dbpedia.org/resource/Southend-on-Sea> .\n}"
    },
    {
        "question": "Alexander Magleby, a rugby player is alma mater to which university?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Alexander_Magleby> <http://dbpedia.org/property/university> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Alma_mater",
            "http://dbpedia.org/resource/Alexander_Magleby",
            "http://dbpedia.org/resource/Rugby_football"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Alexander_Magleby> -> <http://dbpedia.org/resource/Alma_mater>"
        ],
        "paths": "<http://dbpedia.org/resource/Alexander_Magleby> -> <http://dbpedia.org/resource/Alma_mater>",
        "generated_query": "SELECT DISTINCT ?almaMater WHERE {\n  <http://dbpedia.org/resource/Alexander_Magleby> ?p ?almaMater .\n}"
    },
    {
        "question": "Is Amharic the official language of Ethiopia?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/Ethiopia> <http://dbpedia.org/ontology/officialLanguage> <http://dbpedia.org/resource/Amharic> }",
        "entities": [
            "http://dbpedia.org/resource/Amharic",
            "http://dbpedia.org/resource/Ethiopia"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Ethiopia> -> <http://dbpedia.org/resource/Amharic>"
        ],
        "paths": "<http://dbpedia.org/resource/Ethiopia> -> <http://dbpedia.org/resource/Amharic>",
        "generated_query": "ASK WHERE {\n  {\n    <http://dbpedia.org/resource/Ethiopia> <http://dbpedia.org/ontology/officialLanguage> <http://dbpedia.org/resource/Amharic> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Ethiopia> <http://dbpedia.org/property/officialLanguages> <http://dbpedia.org/resource/Amharic> .\n  }\n}"
    },
    {
        "question": "What sport played at Islamic azad uni employes Craig Van Tilbury?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Craig_Van_Tilbury> <http://dbpedia.org/ontology/occupation> ?uri. <http://dbpedia.org/resource/Islamic_Azad_University_Central_Tehran_Branch> <http://dbpedia.org/ontology/sport> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Islamic_Azad_University",
            "http://dbpedia.org/resource/Craig_Van_Tilbury"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Craig_Van_Tilbury> -> <http://dbpedia.org/resource/Islamic_Azad_University> -> \"sport played\""
        ],
        "paths": "<http://dbpedia.org/resource/Craig_Van_Tilbury> -> <http://dbpedia.org/resource/Islamic_Azad_University> -> \"sport played\"",
        "generated_query": "SELECT DISTINCT ?sport WHERE {\n  {\n    <http://dbpedia.org/resource/Islamic_Azad_University> <http://dbpedia.org/ontology/sport> ?sport .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Islamic_Azad_University> <http://dbpedia.org/property/sports> ?sport .\n  }\n}"
    },
    {
        "question": "List the products of the company which published Tweenies: Game Time.",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tweenies:_Game_Time> <http://dbpedia.org/property/publisher> ?x . ?x <http://dbpedia.org/property/products> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Tweenies"
        ],
        "classes": [],
        "relations": [
            "PUBLISHER -> PRODUCTS",
            "<http://dbpedia.org/resource/Tweenies> -> PUBLISHER"
        ],
        "paths": "<http://dbpedia.org/resource/Tweenies> -> PUBLISHER",
        "generated_query": "SELECT DISTINCT ?product WHERE {\n  <http://dbpedia.org/resource/Tweenies> <http://dbpedia.org/ontology/distributor> ?company .\n  ?product <http://dbpedia.org/property/publisher> ?company .\n}"
    },
    {
        "question": "List the agencies located someplace lead by Alex Chalk.",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/leaderName> <http://dbpedia.org/resource/Alex_Chalk> . ?uri <http://dbpedia.org/ontology/location> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/GovernmentAgency>}",
        "entities": [
            "http://dbpedia.org/resource/Alex_Chalk"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Alex_Chalk> -> AGENCIES_LOCATED_SOMEPLACE_LEAD_BY_ALEX_CHALK"
        ],
        "paths": "<http://dbpedia.org/resource/Alex_Chalk> -> AGENCIES_LOCATED_SOMEPLACE_LEAD_BY_ALEX_CHALK",
        "generated_query": "SELECT DISTINCT ?agency WHERE {\n  ?location <http://dbpedia.org/property/leaderName> <http://dbpedia.org/resource/Alex_Chalk> .\n  ?agency <http://dbpedia.org/ontology/location> ?location .\n}"
    },
    {
        "question": "What religion are the characters of Absolutely Fabulous from?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/series> <http://dbpedia.org/resource/Absolutely_Fabulous> . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
        "entities": [
            "http://dbpedia.org/resource/Absolutely_Fabulous",
            "http://dbpedia.org/resource/Religion"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Absolutely_Fabulous> -> CHARACTERS -> <http://dbpedia.org/resource/Religion>"
        ],
        "paths": "<http://dbpedia.org/resource/Absolutely_Fabulous> -> CHARACTERS -> <http://dbpedia.org/resource/Religion>",
        "generated_query": "SELECT DISTINCT ?religion WHERE {\n  <http://dbpedia.org/resource/Absolutely_Fabulous> <http://dbpedia.org/ontology/starring> ?actor .\n  ?actor <http://dbpedia.org/ontology/wikiPageWikiLink> ?religion .\n  ?religion <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Religion> .\n}"
    },
    {
        "question": "What are the movies whose music composer uses a Hammond organ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/instrument> <http://dbpedia.org/resource/Hammond_organ> . ?uri <http://dbpedia.org/ontology/musicComposer> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "entities": [
            "http://dbpedia.org/resource/Hammond_organ"
        ],
        "classes": [],
        "relations": [
            "MOVIE -> MUSIC_COMPOSER -> <http://dbpedia.org/resource/Hammond_organ>"
        ],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?movie WHERE {\n  ?movie <http://dbpedia.org/ontology/musicComposer> ?composer .\n  ?composer <http://dbpedia.org/ontology/instrument> <http://dbpedia.org/resource/Hammond_organ> .\n}"
    },
    {
        "question": "Was Love Hurts in Short Cut Draw Blood?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/Love_Hurts> <http://dbpedia.org/property/album> <http://dbpedia.org/resource/Short_Cut_Draw_Blood> }",
        "entities": [
            "http://dbpedia.org/resource/Short_Cut_Draw_Blood"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Short_Cut_Draw_Blood> -> \"track list\""
        ],
        "paths": "<http://dbpedia.org/resource/Short_Cut_Draw_Blood> -> \"track list\"",
        "generated_query": "ASK WHERE {\n  {\n    ?track <http://dbpedia.org/ontology/album> <http://dbpedia.org/resource/Short_Cut_Draw_Blood> .\n  }\n  UNION\n  {\n    ?track <http://dbpedia.org/property/album> <http://dbpedia.org/resource/Short_Cut_Draw_Blood> .\n  }\n  FILTER(CONTAINS(STR(?track), \"Love_Hurts\"))\n}"
    },
    {
        "question": "Janaka Thissakuttiarachchi follows what religion, which once employed Atisa Srijnana too?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Janaka_Thissakuttiarachchi> <http://dbpedia.org/property/religion> ?uri. <http://dbpedia.org/resource/Ati\u015ba> <http://dbpedia.org/ontology/occupation> ?uri . }",
        "entities": [
            "http://dbpedia.org/resource/Agnicayana"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Janaka_Thissakuttiarachchi> -> <http://dbpedia.org/resource/Agnicayana>"
        ],
        "paths": "<http://dbpedia.org/resource/Janaka_Thissakuttiarachchi> -> <http://dbpedia.org/resource/Agnicayana>",
        "generated_query": "SELECT DISTINCT ?religion WHERE {\n  <http://dbpedia.org/resource/Janaka_Thissakuttiarachchi> <http://dbpedia.org/property/religion> ?religion .\n  ?religion <http://dbpedia.org/ontology/wikiPageWikiLink> ?intermediate .\n  ?intermediate <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Agnicayana> .\n}"
    },
    {
        "question": "Whihc birthpalce of Svetlana Gounkina is also the largest city of Union State ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Union_State> <http://dbpedia.org/property/largestCity> ?uri. <http://dbpedia.org/resource/Svetlana_Gounkina> <http://dbpedia.org/ontology/birthPlace> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Svetlana_Gounkina",
            "http://dbpedia.org/resource/Union_State"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Union_State> -> LARGEST_CITY",
            "<http://dbpedia.org/resource/Svetlana_Gounkina> -> BIRTHPLACE"
        ],
        "paths": "<http://dbpedia.org/resource/Union_State> -> LARGEST_CITY, <http://dbpedia.org/resource/Svetlana_Gounkina> -> BIRTHPLACE",
        "generated_query": "SELECT DISTINCT ?birthPlace WHERE {\n  <http://dbpedia.org/resource/Svetlana_Gounkina> <http://dbpedia.org/ontology/birthPlace> ?birthPlace .\n  <http://dbpedia.org/resource/Union_State> <http://dbpedia.org/ontology/largestCity> ?largestCity .\n  FILTER(?birthPlace = ?largestCity)\n}"
    },
    {
        "question": "Name the TV show with artist Christopher Franke and cast member Jason Carter ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/artist> <http://dbpedia.org/resource/Christopher_Franke> . ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jason_Carter_(actor)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "entities": [
            "http://dbpedia.org/resource/Christopher_Franke",
            "http://dbpedia.org/resource/Jason_Carter_(actor)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Christopher_Franke> -> <http://dbpedia.org/resource/Jason_Carter_(actor)>"
        ],
        "paths": "<http://dbpedia.org/resource/Christopher_Franke> -> <http://dbpedia.org/resource/Jason_Carter_(actor)>",
        "generated_query": "SELECT DISTINCT ?show WHERE {\n  {\n    ?show <http://dbpedia.org/property/artist> <http://dbpedia.org/resource/Christopher_Franke> .\n  }\n  UNION\n  {\n    ?show <http://dbpedia.org/property/composer> <http://dbpedia.org/resource/Christopher_Franke> .\n  }\n  ?show <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jason_Carter_(actor)> .\n}"
    },
    {
        "question": "Which artist married to Lee Krasner?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/spouse> <http://dbpedia.org/resource/Lee_Krasner>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>}",
        "entities": [
            "http://dbpedia.org/resource/Lee_Krasner"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Lee_Krasner> -> ARTIST"
        ],
        "paths": "<http://dbpedia.org/resource/Lee_Krasner> -> ARTIST",
        "generated_query": "SELECT DISTINCT ?artist WHERE {\n  {\n    <http://dbpedia.org/resource/Lee_Krasner> <http://dbpedia.org/ontology/spouse> ?artist .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Lee_Krasner> <http://dbpedia.org/property/spouse> ?artist .\n  }\n}"
    },
    {
        "question": "What teams did the ex teamplayers of lighthouse boy club start their career with?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/youthclubs> <http://dbpedia.org/resource/Lighthouse_Boys_Club> . ?x <http://dbpedia.org/property/debutteam> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Lighthouse_Boys_Club"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Lighthouse_Boys_Club> -> EX_TEAMPLAYER -> START_CAREER_TEAM"
        ],
        "paths": "<http://dbpedia.org/resource/Lighthouse_Boys_Club> -> EX_TEAMPLAYER -> START_CAREER_TEAM",
        "generated_query": "SELECT DISTINCT ?team WHERE {\n  ?player <http://dbpedia.org/property/youthclubs> <http://dbpedia.org/resource/Lighthouse_Boys_Club> .\n  ?player <http://dbpedia.org/property/clubs> ?team .\n  FILTER (?team != <http://dbpedia.org/resource/Lighthouse_Boys_Club>)\n}"
    },
    {
        "question": "Where was the deadbody discovered of one of the alumni of General Educational Development?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/education> <http://dbpedia.org/resource/General_Educational_Development> . ?x <http://dbpedia.org/property/bodyDiscovered> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/General_Educational_Development"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/General_Educational_Development> -> ALUMNI -> \"deadbody discovered location\""
        ],
        "paths": "<http://dbpedia.org/resource/General_Educational_Development> -> ALUMNI -> \"deadbody discovered location\"",
        "generated_query": "SELECT DISTINCT ?location WHERE {\n  ?alumni <http://dbpedia.org/ontology/education> <http://dbpedia.org/resource/General_Educational_Development> .\n  ?alumni <http://dbpedia.org/ontology/bodyDiscovered> ?bodyDiscoveredPlace .\n  ?bodyDiscoveredPlace <http://dbpedia.org/ontology/location> ?location .\n}"
    },
    {
        "question": "Who designed the bridge in Oddamavadi?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/Oddamavadi> . ?x <http://dbpedia.org/property/designer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bridge>}",
        "entities": [
            "http://dbpedia.org/resource/Oddamavadi"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Oddamavadi> -> BRIDGE -> \"designer\""
        ],
        "paths": "<http://dbpedia.org/resource/Oddamavadi> -> BRIDGE -> \"designer\"",
        "generated_query": "SELECT DISTINCT ?designer WHERE {\n  ?bridge <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/Oddamavadi> .\n  ?bridge <http://dbpedia.org/property/designer> ?designer .\n}"
    },
    {
        "question": "What is the leader name of the settlements whose governing body is Municipal council?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/governingBody> <http://dbpedia.org/resource/Municipal_council> . ?x <http://dbpedia.org/ontology/leaderName> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>}",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?leaderName WHERE {\n  # No triples or properties were provided to construct the query\n}"
    },
    {
        "question": "Name the co-founder of the record labels which have one of the founder as Chris DuBois ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/founder> <http://dbpedia.org/resource/Chris_DuBois> . ?x <http://dbpedia.org/property/founder> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RecordLabel>}",
        "entities": [
            "http://dbpedia.org/resource/Chris_DuBois"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Chris_DuBois> -> RECORD_LABEL -> CO_FOUNDER"
        ],
        "paths": "<http://dbpedia.org/resource/Chris_DuBois> -> RECORD_LABEL -> CO_FOUNDER",
        "generated_query": "SELECT DISTINCT ?coFounder WHERE {\n  {\n    ?recordLabel <http://dbpedia.org/property/founder> <http://dbpedia.org/resource/Chris_DuBois> .\n  }\n  UNION\n  {\n    ?recordLabel <http://dbpedia.org/ontology/foundedBy> <http://dbpedia.org/resource/Chris_DuBois> .\n  }\n  \n  {\n    ?recordLabel <http://dbpedia.org/property/founder> ?coFounder .\n  }\n  UNION\n  {\n    ?recordLabel <http://dbpedia.org/ontology/foundedBy> ?coFounder .\n  }\n  \n  FILTER(?coFounder != <http://dbpedia.org/resource/Chris_DuBois>)\n}"
    },
    {
        "question": "List the companies operating in Australia?",
        "gold_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/regionServed> <http://dbpedia.org/resource/Australia> } ",
        "entities": [
            "http://dbpedia.org/resource/Australia"
        ],
        "classes": [],
        "relations": [
            "COMPANY -> <http://dbpedia.org/resource/Australia>"
        ],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?company WHERE {\n  ?company ?p <http://dbpedia.org/resource/Australia> .\n}"
    },
    {
        "question": "In which countries is coconut used as a food ingredient?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/ingredient> <http://dbpedia.org/resource/Coconut> . ?x <http://dbpedia.org/property/country> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Food>}",
        "entities": [
            "http://dbpedia.org/resource/Coconut"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Coconut> -> COUNTRIES"
        ],
        "paths": "<http://dbpedia.org/resource/Coconut> -> COUNTRIES",
        "generated_query": "SELECT DISTINCT ?country WHERE {\n  ?food <http://dbpedia.org/ontology/ingredient> <http://dbpedia.org/resource/Coconut> .\n  ?food <http://dbpedia.org/ontology/wikiPageWikiLink> ?country .\n  FILTER(!CONTAINS(STR(?country), \"Category:\"))\n}"
    },
    {
        "question": "How many people have worked for teams chaired by Patricia Amorim?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/ontology/chairman> <http://dbpedia.org/resource/Patr\u00edcia_Amorim> . ?x <http://dbpedia.org/property/name> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "entities": [
            "http://dbpedia.org/resource/Patr\u00edcia_Amorim"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Patr\u00edcia_Amorim> -> TEAM",
            "TEAM -> \"chair\"",
            "TEAM -> \"members\""
        ],
        "paths": "<http://dbpedia.org/resource/Patr\u00edcia_Amorim> -> TEAM",
        "generated_query": "SELECT (COUNT(DISTINCT ?person) AS ?count)\nWHERE {\n  ?season <http://dbpedia.org/ontology/chairman> <http://dbpedia.org/resource/Patr\u00edcia_Amorim> .\n  ?season <http://dbpedia.org/property/team> ?team .\n  \n  {\n    ?person <http://dbpedia.org/ontology/team> ?team .\n  }\n  UNION\n  {\n    ?person <http://dbpedia.org/property/team> ?team .\n  }\n}"
    },
    {
        "question": "How many kinds of games can be played on the Amiga?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/ontology/computingPlatform> <http://dbpedia.org/resource/Amiga> . ?x <http://dbpedia.org/property/genre> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Amiga"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Amiga> -> \"game types\""
        ],
        "paths": "<http://dbpedia.org/resource/Amiga> -> \"game types\"",
        "generated_query": "SELECT (COUNT(DISTINCT ?category) AS ?numGameTypes)\nWHERE {\n  {\n    ?game <http://dbpedia.org/property/platforms> <http://dbpedia.org/resource/Amiga> .\n  }\n  UNION\n  {\n    ?game <http://dbpedia.org/ontology/computingPlatform> <http://dbpedia.org/resource/Amiga> .\n  }\n  ?game <http://purl.org/dc/terms/subject> ?category .\n  \n  FILTER(CONTAINS(STR(?category), \"Category:\")) .\n  FILTER(CONTAINS(STR(?category), \"_games\")) .\n  FILTER(!CONTAINS(STR(?category), \"Amiga\")) .\n  FILTER(!CONTAINS(STR(?category), \"Commodore\")) .\n  FILTER(!CONTAINS(STR(?category), \"Sega\")) .\n  FILTER(!CONTAINS(STR(?category), \"MSX\")) .\n}"
    },
    {
        "question": "Is the book The Buddha and his Dhamma a book about Buddhism?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/The_Buddha_and_His_Dhamma> <http://dbpedia.org/ontology/literaryGenre> <http://dbpedia.org/resource/Buddhism> }",
        "entities": [
            "http://dbpedia.org/resource/Buddhism",
            "http://dbpedia.org/resource/The_Buddha_and_His_Dhamma"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/The_Buddha_and_His_Dhamma> -> <http://dbpedia.org/resource/Buddhism>"
        ],
        "paths": "<http://dbpedia.org/resource/The_Buddha_and_His_Dhamma> -> <http://dbpedia.org/resource/Buddhism>",
        "generated_query": "ASK WHERE {\n  {\n    <http://dbpedia.org/resource/The_Buddha_and_His_Dhamma> <http://dbpedia.org/ontology/literaryGenre> <http://dbpedia.org/resource/Buddhism> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/The_Buddha_and_His_Dhamma> <http://dbpedia.org/property/genre> <http://dbpedia.org/resource/Buddhism> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/The_Buddha_and_His_Dhamma> <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Buddhism> .\n  }\n}"
    },
    {
        "question": "How many relatives are there of people fought in the Battle of the Bulge?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/property/battles> <http://dbpedia.org/resource/Battle_of_the_Bulge> . ?x <http://dbpedia.org/ontology/relation> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Battle_of_the_Bulge"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Battle_of_the_Bulge> -> FIGHTER -> RELATIVE -> \"count\""
        ],
        "paths": "<http://dbpedia.org/resource/Battle_of_the_Bulge> -> FIGHTER -> RELATIVE -> \"count\"",
        "generated_query": "SELECT (COUNT(DISTINCT ?relative) AS ?relativeCount)\nWHERE {\n  <http://dbpedia.org/resource/Battle_of_the_Bulge> <http://dbpedia.org/ontology/commander> ?commander .\n  {\n    ?commander <http://dbpedia.org/property/relatives> ?relative .\n  }\n  UNION\n  {\n    ?commander <http://dbpedia.org/ontology/relative> ?relative .\n  }\n}"
    },
    {
        "question": "How many genres of games can I find on the commodore CDTV?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/ontology/computingPlatform> <http://dbpedia.org/resource/Commodore_CDTV> . ?x <http://dbpedia.org/ontology/genre> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Commodore_CDTV"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Commodore_CDTV> -> \"genre\""
        ],
        "paths": "<http://dbpedia.org/resource/Commodore_CDTV> -> \"genre\"",
        "generated_query": "SELECT (COUNT(DISTINCT ?genre) AS ?genreCount)\nWHERE {\n  ?game <http://dbpedia.org/property/platforms> <http://dbpedia.org/resource/Commodore_CDTV> .\n  {\n    ?game <http://dbpedia.org/property/genre> ?genre .\n  }\n  UNION\n  {\n    ?game <http://dbpedia.org/ontology/genre> ?genre .\n  }\n}"
    },
    {
        "question": "Does Jevan Snead play as Quarterback?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/Jevan_Snead> <http://dbpedia.org/property/position> <http://dbpedia.org/resource/Quarterback> }",
        "entities": [
            "http://dbpedia.org/resource/Quarterback",
            "http://dbpedia.org/resource/Jevan_Snead"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Jevan_Snead> -> <http://dbpedia.org/resource/Quarterback>"
        ],
        "paths": "<http://dbpedia.org/resource/Jevan_Snead> -> <http://dbpedia.org/resource/Quarterback>",
        "generated_query": "ASK WHERE {\n  {\n    <http://dbpedia.org/resource/Jevan_Snead> <http://dbpedia.org/ontology/position> <http://dbpedia.org/resource/Quarterback> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Jevan_Snead> <http://dbpedia.org/property/position> <http://dbpedia.org/resource/Quarterback> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Jevan_Snead> <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Quarterback> .\n  }\n}"
    },
    {
        "question": "Give me the sitcoms where Eliza Schneider and Isaac Hayes gave voice?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/Eliza_Schneider> . ?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/Isaac_Hayes> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "entities": [
            "http://dbpedia.org/resource/Isaac_Hayes",
            "http://dbpedia.org/resource/Eliza_Schneider"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Isaac_Hayes> -> <http://dbpedia.org/resource/Eliza_Schneider>"
        ],
        "paths": "<http://dbpedia.org/resource/Isaac_Hayes> -> <http://dbpedia.org/resource/Eliza_Schneider>",
        "generated_query": "SELECT DISTINCT ?show WHERE {\n  ?show <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/Isaac_Hayes> .\n  ?show <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/Eliza_Schneider> .\n}"
    },
    {
        "question": "Directors of which movies are buried in Ronda?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/restingPlace> <http://dbpedia.org/resource/Ronda> . ?uri <http://dbpedia.org/property/director> ?x  . }",
        "entities": [
            "http://dbpedia.org/resource/Ronda"
        ],
        "classes": [],
        "relations": [
            "DIRECTOR -> MOVIE",
            "DIRECTOR -> <http://dbpedia.org/resource/Ronda>"
        ],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?movie WHERE {\n  ?director ?p1 ?movie .\n  ?director ?p2 <http://dbpedia.org/resource/Ronda> .\n}"
    },
    {
        "question": "List the debut team of the baseball player who born in Houston.",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/birthPlace> <http://dbpedia.org/resource/Houston> . ?x <http://dbpedia.org/ontology/debutTeam> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BaseballPlayer>}",
        "entities": [
            "http://dbpedia.org/resource/Baseball",
            "http://dbpedia.org/resource/Houston"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Houston> -> <http://dbpedia.org/resource/Baseball>",
            "<http://dbpedia.org/resource/Baseball> -> \"player\"",
            "<http://dbpedia.org/resource/Baseball> -> \"debut team\""
        ],
        "paths": "<http://dbpedia.org/resource/Houston> -> <http://dbpedia.org/resource/Baseball>, <http://dbpedia.org/resource/Baseball> -> \"player\", <http://dbpedia.org/resource/Baseball> -> \"debut team\"",
        "generated_query": "SELECT DISTINCT ?debutTeam WHERE {\n  {\n    ?player <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Houston> .\n  } UNION {\n    ?player <http://dbpedia.org/property/birthPlace> <http://dbpedia.org/resource/Houston> .\n  }\n\n  ?player <http://dbpedia.org/property/sport> <http://dbpedia.org/resource/Baseball> .\n\n  ?player <http://dbpedia.org/property/rd1Team> ?debutTeam .\n}"
    },
    {
        "question": "Does Cascade Airways have a hub in Seattle?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/Cascade_Airways> <http://dbpedia.org/ontology/hubAirport> <http://dbpedia.org/resource/Seattle> }",
        "entities": [
            "http://dbpedia.org/resource/Seattle",
            "http://dbpedia.org/resource/Cascade_Airways"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Cascade_Airways> -> <http://dbpedia.org/resource/Seattle>"
        ],
        "paths": "<http://dbpedia.org/resource/Cascade_Airways> -> <http://dbpedia.org/resource/Seattle>",
        "generated_query": "ASK WHERE {\n  {\n    <http://dbpedia.org/resource/Cascade_Airways> <http://dbpedia.org/ontology/hubAirport> <http://dbpedia.org/resource/Seattle> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Cascade_Airways> <http://dbpedia.org/property/hubs> <http://dbpedia.org/resource/Seattle> .\n  }\n}"
    },
    {
        "question": "Who edited  British Gazette ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/British_Gazette> <http://dbpedia.org/property/editor> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/British_Gazette"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/British_Gazette> -> \"editor\""
        ],
        "paths": "<http://dbpedia.org/resource/British_Gazette> -> \"editor\"",
        "generated_query": "SELECT DISTINCT ?editor WHERE {\n  {\n    <http://dbpedia.org/resource/British_Gazette> <http://dbpedia.org/property/editor> ?editor .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/British_Gazette> <http://dbpedia.org/ontology/editor> ?editor .\n  }\n}"
    },
    {
        "question": "List the things for which the relatives of Mrunalini Kunte are known?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mrunalini_Kunte> <http://dbpedia.org/ontology/relative> ?x . ?x <http://dbpedia.org/property/knownFor> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Mrunalini_Kunte"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Mrunalini_Kunte> -> RELATIVES -> KNOWN_FOR"
        ],
        "paths": "<http://dbpedia.org/resource/Mrunalini_Kunte> -> RELATIVES -> KNOWN_FOR",
        "generated_query": "SELECT DISTINCT ?knownForThing WHERE {\n  <http://dbpedia.org/resource/Mrunalini_Kunte> <http://dbpedia.org/property/relatives> ?relative .\n  ?relative <http://dbpedia.org/property/knownFor> ?knownForThing .\n}"
    },
    {
        "question": "What acts and artists are associated with people who have worked with Divertis?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/associatedActs> <http://dbpedia.org/resource/Divertis> . ?x <http://dbpedia.org/ontology/associatedMusicalArtist> ?uri  . }",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?act ?artist WHERE {\n  ?person WORKED_WITH <DIVERTIS_URI> .\n  ?person ASSOCIATED_ACT ?act .\n  ?person ASSOCIATED_ARTIST ?artist .\n}"
    },
    {
        "question": "What are the notableworks of Russell T Davies?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Russell_T_Davies> <http://dbpedia.org/property/notableworks> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Russell_T_Davies"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Russell_T_Davies> -> \"notableworks\""
        ],
        "paths": "<http://dbpedia.org/resource/Russell_T_Davies> -> \"notableworks\"",
        "generated_query": "SELECT DISTINCT ?notableWork WHERE {\n  {\n    <http://dbpedia.org/resource/Russell_T_Davies> <http://dbpedia.org/property/notableworks> ?notableWork .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Russell_T_Davies> <http://dbpedia.org/ontology/notableWork> ?notableWork .\n  }\n}"
    },
    {
        "question": "Which company has developed games whose music is done by Gerard Marino?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/composer> <http://dbpedia.org/resource/Gerard_Marino> . ?x <http://dbpedia.org/ontology/developer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/VideoGame>}",
        "entities": [
            "http://dbpedia.org/resource/Gerard_Marino"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Gerard_Marino> -> GAMES -> COMPANY"
        ],
        "paths": "<http://dbpedia.org/resource/Gerard_Marino> -> GAMES -> COMPANY",
        "generated_query": "SELECT DISTINCT ?company WHERE {\n  {\n    ?game <http://dbpedia.org/ontology/composer> <http://dbpedia.org/resource/Gerard_Marino> .\n    ?game <http://dbpedia.org/ontology/developer> ?company .\n  }\n  UNION\n  {\n    ?game <http://dbpedia.org/ontology/composer> <http://dbpedia.org/resource/Gerard_Marino> .\n    ?game <http://dbpedia.org/property/developer> ?company .\n  }\n}"
    },
    {
        "question": "Who all have developed softwares for Unix Like OSes?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/operatingSystem> <http://dbpedia.org/resource/Unix-like> . ?x <http://dbpedia.org/ontology/developer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Software>}",
        "entities": [
            "http://dbpedia.org/resource/Unix-like"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Unix-like> -> DEVELOPERS"
        ],
        "paths": "<http://dbpedia.org/resource/Unix-like> -> DEVELOPERS",
        "generated_query": "SELECT DISTINCT ?developer WHERE {\n  ?software <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Unix-like> .\n  ?software <http://dbpedia.org/ontology/developer> ?developer .\n}"
    },
    {
        "question": "What are some party leaders of the parties which have had a seat in Berlin?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Berlin> . ?x <http://dbpedia.org/ontology/leader> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty>}",
        "entities": [
            "http://dbpedia.org/resource/Berlin"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Berlin> -> PARTY -> PARTY_LEADER"
        ],
        "paths": "<http://dbpedia.org/resource/Berlin> -> PARTY -> PARTY_LEADER",
        "generated_query": "SELECT DISTINCT ?leader WHERE {\n  {\n    ?legislature <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Berlin> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Berlin> <http://dbpedia.org/ontology/wikiPageWikiLink> ?legislature .\n  }\n  ?party <http://dbpedia.org/ontology/politicalPartyInLegislature> ?legislature .\n  {\n    ?party <http://dbpedia.org/ontology/leader> ?leader .\n  }\n  UNION\n  {\n    ?party <http://dbpedia.org/property/leader> ?leader .\n  }\n}"
    },
    {
        "question": "Was James maker in the band Noko?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/Noko> <http://dbpedia.org/ontology/associatedBand> <http://dbpedia.org/resource/James_Maker> }",
        "entities": [
            "http://dbpedia.org/resource/Noko"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Noko> -> \"member\""
        ],
        "paths": "<http://dbpedia.org/resource/Noko> -> \"member\"",
        "generated_query": "ASK WHERE {\n  ?var0 <http://dbpedia.org/property/currentMembers> <http://dbpedia.org/resource/Noko> .\n  {\n    ?var0 <http://dbpedia.org/ontology/bandMember> <http://dbpedia.org/resource/James_Gardner_(musician)> .\n  }\n  UNION\n  {\n    ?var0 <http://dbpedia.org/ontology/formerBandMember> <http://dbpedia.org/resource/James_Gardner_(musician)> .\n  }\n  UNION\n  {\n    ?var0 <http://dbpedia.org/property/pastMembers> <http://dbpedia.org/resource/James_Gardner_(musician)> .\n  }\n}"
    },
    {
        "question": "Was Nick Jonas a member of the Jonas Brothers?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/Jonas_Brothers> <http://dbpedia.org/property/pastMembers> <http://dbpedia.org/resource/Nick_Jonas> }",
        "entities": [
            "http://dbpedia.org/resource/Nick_Jonas",
            "http://dbpedia.org/resource/Jonas_Brothers"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Nick_Jonas> -> <http://dbpedia.org/resource/Jonas_Brothers>"
        ],
        "paths": "<http://dbpedia.org/resource/Nick_Jonas> -> <http://dbpedia.org/resource/Jonas_Brothers>",
        "generated_query": "ASK WHERE {\n  {\n    <http://dbpedia.org/resource/Nick_Jonas> <http://dbpedia.org/ontology/associatedBand> <http://dbpedia.org/resource/Jonas_Brothers> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Nick_Jonas> <http://dbpedia.org/property/associatedActs> <http://dbpedia.org/resource/Jonas_Brothers> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Nick_Jonas> <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Jonas_Brothers> .\n  }\n}"
    },
    {
        "question": "Which tenant of New Sanno Hotel is the military branch of the Gary Holder-Winfield ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/New_Sanno_Hotel> <http://dbpedia.org/ontology/tenant> ?uri. <http://dbpedia.org/resource/Gary_Holder-Winfield> <http://dbpedia.org/ontology/militaryBranch> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/List_of_The_West_Wing_characters",
            "http://dbpedia.org/resource/New_Sanno_Hotel"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/New_Sanno_Hotel> -> <http://dbpedia.org/resource/List_of_The_West_Wing_characters>"
        ],
        "paths": "<http://dbpedia.org/resource/New_Sanno_Hotel> -> <http://dbpedia.org/resource/List_of_The_West_Wing_characters>",
        "generated_query": "SELECT DISTINCT ?tenant WHERE {\n  <http://dbpedia.org/resource/New_Sanno_Hotel> <http://dbpedia.org/ontology/tenant> ?tenant .\n  ?tenant <http://dbpedia.org/ontology/wikiPageWikiLink> ?link .\n  <http://dbpedia.org/resource/List_of_The_West_Wing_characters> <http://dbpedia.org/ontology/wikiPageWikiLink> ?link .\n}"
    },
    {
        "question": "List the director of The Adventures of mimi ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Adventures_of_Mimi_(video)> <http://dbpedia.org/property/director> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/The_Voyage_of_the_Mimi"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/The_Voyage_of_the_Mimi> -> \"director\""
        ],
        "paths": "<http://dbpedia.org/resource/The_Voyage_of_the_Mimi> -> \"director\"",
        "generated_query": "SELECT DISTINCT ?director WHERE {\n  <http://dbpedia.org/resource/The_Voyage_of_the_Mimi> <http://dbpedia.org/property/director> ?director .\n}"
    },
    {
        "question": "List sports managers who managed Middlesbrough F.C. and England national under-21 football team?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/managerClub> <http://dbpedia.org/resource/Middlesbrough_F.C.> . ?uri <http://dbpedia.org/property/managerclubs> <http://dbpedia.org/resource/England_national_under-21_football_team>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsManager>}",
        "entities": [
            "http://dbpedia.org/resource/England_national_under-21_football_team",
            "http://dbpedia.org/resource/Middlesbrough_F.C."
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Middlesbrough_F.C.> -> SPORTS_MANAGER",
            "<http://dbpedia.org/resource/England_national_under-21_football_team> -> SPORTS_MANAGER"
        ],
        "paths": "<http://dbpedia.org/resource/Middlesbrough_F.C.> -> SPORTS_MANAGER, <http://dbpedia.org/resource/England_national_under-21_football_team> -> SPORTS_MANAGER",
        "generated_query": "SELECT DISTINCT ?manager WHERE {\n  {\n    { ?manager <http://dbpedia.org/ontology/managerClub> <http://dbpedia.org/resource/Middlesbrough_F.C.> . }\n    UNION\n    { ?manager <http://dbpedia.org/property/managerclubs> <http://dbpedia.org/resource/Middlesbrough_F.C.> . }\n  }\n  {\n    { ?manager <http://dbpedia.org/ontology/managerClub> <http://dbpedia.org/resource/England_national_under-21_football_team> . }\n    UNION\n    { ?manager <http://dbpedia.org/property/managerclubs> <http://dbpedia.org/resource/England_national_under-21_football_team> . }\n  }\n}"
    },
    {
        "question": "Name all the soccer players who played in a under 18 club for La Liga?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/league> <http://dbpedia.org/resource/La_Liga> . ?uri <http://dbpedia.org/property/youthclubs> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>}",
        "entities": [
            "http://dbpedia.org/resource/Association_football",
            "http://dbpedia.org/resource/La_Liga"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Association_football> -> SOCCER_PLAYER",
            "UNDER_18_CLUB -> <http://dbpedia.org/resource/La_Liga>",
            "SOCCER_PLAYER -> UNDER_18_CLUB"
        ],
        "paths": "<http://dbpedia.org/resource/Association_football> -> SOCCER_PLAYER",
        "generated_query": "SELECT DISTINCT ?player WHERE {\n  ?player <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Association_football> .\n  ?player <http://dbpedia.org/ontology/wikiPageWikiLink> ?club .\n  ?club <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/La_Liga> .\n}"
    },
    {
        "question": "Which key perosn of the Elders is also the president of united World College ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Elders_(organization)> <http://dbpedia.org/property/keyPeople> ?uri. <http://dbpedia.org/resource/United_World_Colleges> <http://dbpedia.org/ontology/president> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/The_Elders_(organization)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/The_Elders_(organization)> -> PRESIDENT -> \"name of the president\""
        ],
        "paths": "<http://dbpedia.org/resource/The_Elders_(organization)> -> PRESIDENT -> \"name of the president\"",
        "generated_query": "SELECT DISTINCT ?person WHERE {\n  {\n    <http://dbpedia.org/resource/The_Elders_(organization)> <http://dbpedia.org/ontology/keyPerson> ?person .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/The_Elders_(organization)> <http://dbpedia.org/property/keyPeople> ?person .\n  }\n  <http://dbpedia.org/resource/United_World_Colleges> <http://dbpedia.org/property/president> ?person .\n}"
    },
    {
        "question": "Who are the players whose current clubs have Ferran Soriano as chairman?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/chairman> <http://dbpedia.org/resource/Ferran_Soriano> . ?uri <http://dbpedia.org/property/currentclub> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "entities": [
            "http://dbpedia.org/resource/Ferran_Soriano"
        ],
        "classes": [],
        "relations": [
            "PLAYER -> CLUB -> <http://dbpedia.org/resource/Ferran_Soriano>"
        ],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?player WHERE {\n  {\n    ?player <http://dbpedia.org/ontology/currentclub> ?club .\n  } UNION {\n    ?player <http://dbpedia.org/property/currentclub> ?club .\n  }\n  {\n    ?club <http://dbpedia.org/ontology/chairman> <http://dbpedia.org/resource/Ferran_Soriano> .\n  } UNION {\n    ?club <http://dbpedia.org/property/chairman> <http://dbpedia.org/resource/Ferran_Soriano> .\n  }\n}"
    },
    {
        "question": "What are some parties which have people from Mangalore as a member?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/placeOfBirth> <http://dbpedia.org/resource/Mangalore> . ?x <http://dbpedia.org/property/party> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Mangalore"
        ],
        "classes": [],
        "relations": [
            "PARTY -> PERSON -> <http://dbpedia.org/resource/Mangalore>"
        ],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?party WHERE {\n  ?person <http://dbpedia.org/ontology/party> ?party .\n  {\n    ?person <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Mangalore> .\n  }\n  UNION\n  {\n    ?person <http://dbpedia.org/ontology/hometown> <http://dbpedia.org/resource/Mangalore> .\n  }\n}"
    },
    {
        "question": "Which employer of Michael M. Sears is also the producer of Delta III ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Michael_M._Sears> <http://dbpedia.org/ontology/employer> ?uri. <http://dbpedia.org/resource/Delta_III> <http://dbpedia.org/ontology/manufacturer> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Delta_III",
            "http://dbpedia.org/resource/Michael_M._Sears"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Delta_III> -> PRODUCER",
            "<http://dbpedia.org/resource/Michael_M._Sears> -> EMPLOYER"
        ],
        "paths": "<http://dbpedia.org/resource/Delta_III> -> PRODUCER, <http://dbpedia.org/resource/Michael_M._Sears> -> EMPLOYER",
        "generated_query": "SELECT DISTINCT ?employer WHERE {\n  {\n    <http://dbpedia.org/resource/Michael_M._Sears> <http://dbpedia.org/property/employer> ?employer .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Michael_M._Sears> <http://dbpedia.org/ontology/employer> ?employer .\n  }\n  <http://dbpedia.org/resource/Delta_III> <http://dbpedia.org/ontology/manufacturer> ?employer .\n}"
    },
    {
        "question": "Name the largest city in the county where there is a Cy-Fair High School.",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cy-Fair_High_School> <http://dbpedia.org/ontology/county> ?x . ?x <http://dbpedia.org/ontology/largestCity> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Cy-Fair_High_School"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Cy-Fair_High_School> -> COUNTY -> \"largest city\""
        ],
        "paths": "<http://dbpedia.org/resource/Cy-Fair_High_School> -> COUNTY -> \"largest city\"",
        "generated_query": "SELECT DISTINCT ?largestCity WHERE {\n  <http://dbpedia.org/resource/Cy-Fair_High_School> <http://dbpedia.org/ontology/county> ?county .\n  ?county <http://dbpedia.org/ontology/largestCity> ?largestCity .\n}"
    },
    {
        "question": "How many bacterias are there whose division is Firmicutes?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE {?uri <http://dbpedia.org/ontology/division> <http://dbpedia.org/resource/Firmicutes>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bacteria>}",
        "entities": [
            "http://dbpedia.org/resource/Bacillota"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Bacillota> -> \"number of bacteria\""
        ],
        "paths": "",
        "generated_query": "SELECT (COUNT(DISTINCT ?bacteria) AS ?count)\nWHERE {\n  ?bacteria ?p <http://dbpedia.org/resource/Bacillota> .\n}"
    },
    {
        "question": "To which country does Peter Blay owe his allegiance?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Peter_Blay> <http://dbpedia.org/property/allegiance> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Peter_Blay"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Peter_Blay> -> COUNTRY"
        ],
        "paths": "<http://dbpedia.org/resource/Peter_Blay> -> COUNTRY",
        "generated_query": "SELECT DISTINCT ?country WHERE {\n  <http://dbpedia.org/resource/Peter_Blay> <http://dbpedia.org/property/allegiance> ?country .\n}"
    },
    {
        "question": "Is jim harbaugh currently in the Michigan Wolverines?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/Jim_Harbaugh> <http://dbpedia.org/property/currentteam> <http://dbpedia.org/resource/Michigan_Wolverines> }",
        "entities": [
            "http://dbpedia.org/resource/Michigan_Wolverines_football"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Michigan_Wolverines_football> -> <http://dbpedia.org/resource/jim_harbaugh>"
        ],
        "paths": "",
        "generated_query": "ASK WHERE {\n  { <http://dbpedia.org/resource/jim_harbaugh> ?p <http://dbpedia.org/resource/Michigan_Wolverines_football> }\n  UNION\n  { <http://dbpedia.org/resource/Michigan_Wolverines_football> ?p <http://dbpedia.org/resource/jim_harbaugh> }\n}"
    },
    {
        "question": "Name the television show whose subsequent work is Crusade and Composer is Stewart Copeland?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/subsequentWork> <http://dbpedia.org/resource/Crusade_(TV_series)> . ?uri <http://dbpedia.org/property/composer> <http://dbpedia.org/resource/Stewart_Copeland>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "entities": [
            "http://dbpedia.org/resource/Stewart_Copeland",
            "http://dbpedia.org/resource/Crusade_(TV_series)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Crusade_(TV_series)> -> <http://dbpedia.org/resource/Stewart_Copeland>"
        ],
        "paths": "<http://dbpedia.org/resource/Crusade_(TV_series)> -> <http://dbpedia.org/resource/Stewart_Copeland>",
        "generated_query": "SELECT DISTINCT ?show WHERE {\n  ?show <http://dbpedia.org/ontology/subsequentWork> <http://dbpedia.org/resource/Crusade_(TV_series)> .\n  {\n    ?show <http://dbpedia.org/ontology/composer> <http://dbpedia.org/resource/Stewart_Copeland> .\n  }\n  UNION\n  {\n    ?show <http://dbpedia.org/property/composer> <http://dbpedia.org/resource/Stewart_Copeland> .\n  }\n}"
    },
    {
        "question": "What are the current music bands of Chester Bennington?",
        "gold_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/currentMembers> <http://dbpedia.org/resource/Chester_Bennington> } ",
        "entities": [
            "http://dbpedia.org/resource/Chester_Bennington"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Chester_Bennington> -> \"current music bands\""
        ],
        "paths": "<http://dbpedia.org/resource/Chester_Bennington> -> \"current music bands\"",
        "generated_query": "SELECT DISTINCT ?band WHERE {\n  ?band <http://dbpedia.org/property/currentMembers> <http://dbpedia.org/resource/Chester_Bennington> .\n}"
    },
    {
        "question": "Who was the prime minister under which the predecessor of Derick Heathcoat Amory served?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/successor> <http://dbpedia.org/resource/Derick_Heathcoat-Amory,_1st_Viscount_Amory> . ?x <http://dbpedia.org/property/primeminister> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Derick_Heathcoat-Amory,_1st_Viscount_Amory"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Derick_Heathcoat-Amory,_1st_Viscount_Amory> -> PREDECESSOR -> PRIME_MINISTER"
        ],
        "paths": "<http://dbpedia.org/resource/Derick_Heathcoat-Amory,_1st_Viscount_Amory> -> PREDECESSOR -> PRIME_MINISTER",
        "generated_query": "SELECT DISTINCT ?primeMinister WHERE {\n  <http://dbpedia.org/resource/Derick_Heathcoat-Amory,_1st_Viscount_Amory> <http://dbpedia.org/property/predecessor> ?predecessor .\n  {\n    ?predecessor <http://dbpedia.org/property/primeminister> ?primeMinister .\n  }\n  UNION\n  {\n    ?predecessor <http://dbpedia.org/ontology/primeMinister> ?primeMinister .\n  }\n}"
    },
    {
        "question": "Which person designed the cars which has been designed by ASC Creative Services?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/designCompany> <http://dbpedia.org/resource/ASC_Creative_Services> . ?x <http://dbpedia.org/property/designer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>}",
        "entities": [
            "http://dbpedia.org/resource/ASC_Games"
        ],
        "classes": [],
        "relations": [
            "CARS -> PERSON",
            "PERSON -> \"designer\"",
            "<http://dbpedia.org/resource/ASC_Games> -> CARS"
        ],
        "paths": "<http://dbpedia.org/resource/ASC_Games> -> CARS",
        "generated_query": "SELECT DISTINCT ?person WHERE {\n  <http://dbpedia.org/resource/ASC_Games> <http://dbpedia.org/ontology/wikiPageWikiLink> ?car .\n  ?car <http://dbpedia.org/ontology/developer> ?person .\n}"
    },
    {
        "question": "What are some orthonychidae birds?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Orthonychidae>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bird>}",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?bird WHERE {\n  ?bird ?property ?family .\n  FILTER (lcase(str(?family)) = \"orthonychidae\")\n}\nLIMIT 100"
    },
    {
        "question": "Which driver had the pole position in 1994 Spanish Grand Prix ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/1994_Spanish_Grand_Prix> <http://dbpedia.org/ontology/poleDriver> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/1994_Spanish_Grand_Prix"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/1994_Spanish_Grand_Prix> -> \"pole position driver\""
        ],
        "paths": "<http://dbpedia.org/resource/1994_Spanish_Grand_Prix> -> \"pole position driver\"",
        "generated_query": "SELECT DISTINCT ?driver WHERE {\n  <http://dbpedia.org/resource/1994_Spanish_Grand_Prix> <http://dbpedia.org/ontology/poleDriver> ?driver .\n}"
    },
    {
        "question": "Does the US route 281 have a junction at San Antonio?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/U.S._Route_281> <http://dbpedia.org/property/junction> <http://dbpedia.org/resource/San_Antonio> }",
        "entities": [
            "http://dbpedia.org/resource/San_Antonio",
            "http://dbpedia.org/resource/U.S._Route_281"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/U.S._Route_281> -> <http://dbpedia.org/resource/San_Antonio>"
        ],
        "paths": "<http://dbpedia.org/resource/U.S._Route_281> -> <http://dbpedia.org/resource/San_Antonio>",
        "generated_query": "ASK WHERE {\n  {\n    <http://dbpedia.org/resource/U.S._Route_281> <http://dbpedia.org/ontology/routeJunction> <http://dbpedia.org/resource/San_Antonio> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/U.S._Route_281> <http://dbpedia.org/property/junction> <http://dbpedia.org/resource/San_Antonio> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/U.S._Route_281> <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/San_Antonio> .\n  }\n}"
    },
    {
        "question": "How many awards have been given to the founder of Grameen Bank?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { <http://dbpedia.org/resource/Grameen_Bank> <http://dbpedia.org/property/founder> ?x . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Grameen_Bank"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Grameen_Bank> -> FOUNDER -> \"number of awards\""
        ],
        "paths": "<http://dbpedia.org/resource/Grameen_Bank> -> FOUNDER -> \"number of awards\"",
        "generated_query": "SELECT (COUNT(DISTINCT ?award) AS ?numberOfAwards)\nWHERE {\n  <http://dbpedia.org/resource/Grameen_Bank> <http://dbpedia.org/property/founder> ?founder .\n  {\n    ?founder <http://dbpedia.org/property/awards> ?award .\n  }\n  UNION\n  {\n    ?founder <http://dbpedia.org/ontology/award> ?award .\n  }\n}"
    },
    {
        "question": "Was Queen Latifah in the U.N.I.T.Y. group?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/U.N.I.T.Y.> <http://dbpedia.org/ontology/musicalArtist> <http://dbpedia.org/resource/Queen_Latifah> }",
        "entities": [
            "http://dbpedia.org/resource/U.N.I.T.Y.",
            "http://dbpedia.org/resource/Queen_Latifah"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Queen_Latifah> -> <http://dbpedia.org/resource/U.N.I.T.Y.>"
        ],
        "paths": "<http://dbpedia.org/resource/Queen_Latifah> -> <http://dbpedia.org/resource/U.N.I.T.Y.>",
        "generated_query": "ASK WHERE {\n  {\n    <http://dbpedia.org/resource/Queen_Latifah> <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/U.N.I.T.Y.> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/U.N.I.T.Y.> <http://dbpedia.org/ontology/musicalArtist> <http://dbpedia.org/resource/Queen_Latifah> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/U.N.I.T.Y.> <http://dbpedia.org/property/artist> <http://dbpedia.org/resource/Queen_Latifah> .\n  }\n}"
    },
    {
        "question": "Count the number of important works done by the writers of The Second Coming?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { <http://dbpedia.org/resource/The_Second_Coming_(TV_serial)> <http://dbpedia.org/ontology/author> ?x . ?x <http://dbpedia.org/ontology/notableWork> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Second_Coming"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Second_Coming> -> WRITERS -> IMPORTANT_WORKS"
        ],
        "paths": "<http://dbpedia.org/resource/Second_Coming> -> WRITERS -> IMPORTANT_WORKS",
        "generated_query": "SELECT (COUNT(DISTINCT ?work) AS ?count)\nWHERE {\n  {\n    <http://dbpedia.org/resource/Second_Coming> <http://dbpedia.org/ontology/wikiPageWikiLink> ?intermediate .\n    ?intermediate <http://dbpedia.org/property/author> ?writer .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Second_Coming> <http://dbpedia.org/ontology/wikiPageWikiLink> ?intermediate .\n    ?intermediate <http://dbpedia.org/ontology/author> ?writer .\n  }\n  ?writer <http://dbpedia.org/ontology/notableWork> ?work .\n}"
    },
    {
        "question": "Who all are known to play the Gibson Guitar Corporation?",
        "gold_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/notableInstruments> <http://dbpedia.org/resource/Gibson_Guitar_Corporation> } ",
        "entities": [
            "http://dbpedia.org/resource/Gibson_Brands"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Gibson_Brands> -> \"player\""
        ],
        "paths": "<http://dbpedia.org/resource/Gibson_Brands> -> \"player\"",
        "generated_query": "SELECT DISTINCT ?player WHERE {\n  <http://dbpedia.org/resource/Gibson_Brands> <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Gibson_Guitar_Corporation> .\n  {\n    ?player <http://dbpedia.org/ontology/instrument> <http://dbpedia.org/resource/Gibson_Guitar_Corporation> .\n  }\n  UNION\n  {\n    ?player <http://dbpedia.org/property/notableInstruments> <http://dbpedia.org/resource/Gibson_Guitar_Corporation> .\n  }\n}"
    },
    {
        "question": "Which child of Jack Ferguson became a Prime Minister?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jack_Ferguson> <http://dbpedia.org/ontology/child> ?x . ?x <http://dbpedia.org/property/primeminister> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Jack_Ferguson",
            "http://dbpedia.org/resource/Prime_minister"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Jack_Ferguson> -> <http://dbpedia.org/resource/Prime_minister>"
        ],
        "paths": "<http://dbpedia.org/resource/Jack_Ferguson> -> <http://dbpedia.org/resource/Prime_minister>",
        "generated_query": "SELECT DISTINCT ?child WHERE {\n  <http://dbpedia.org/resource/Jack_Ferguson> ?p ?child .\n  ?child <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Prime_minister> .\n}"
    },
    {
        "question": "Did Annie Leibovitz do the cover of The Road Ahead?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/The_Road_Ahead_(Bill_Gates_book)> <http://dbpedia.org/ontology/coverArtist> <http://dbpedia.org/resource/Annie_Leibovitz> }",
        "entities": [
            "http://dbpedia.org/resource/On_the_Road",
            "http://dbpedia.org/resource/Annie_Leibovitz"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Annie_Leibovitz> -> <http://dbpedia.org/resource/On_the_Road>"
        ],
        "paths": "<http://dbpedia.org/resource/Annie_Leibovitz> -> <http://dbpedia.org/resource/On_the_Road>",
        "generated_query": "ASK WHERE {\n  {\n    <http://dbpedia.org/resource/Annie_Leibovitz> <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/On_the_Road> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/On_the_Road> <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Annie_Leibovitz> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Annie_Leibovitz> <http://dbpedia.org/property/wikiPageUsesTemplate> ?template .\n    <http://dbpedia.org/resource/On_the_Road> <http://dbpedia.org/property/wikiPageUsesTemplate> ?template .\n  }\n}"
    },
    {
        "question": "What are the things whose mascots are from the class Eutheria?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/class> <http://dbpedia.org/resource/Eutheria> . ?uri <http://dbpedia.org/property/mascot> ?x  . }",
        "entities": [
            "http://dbpedia.org/resource/Eutheria"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Eutheria> -> member"
        ],
        "paths": "<http://dbpedia.org/resource/Eutheria> -> member",
        "generated_query": "SELECT DISTINCT ?thing WHERE {\n  ?mascot <http://dbpedia.org/property/infraclassis> <http://dbpedia.org/resource/Eutheria> .\n  ?thing <http://dbpedia.org/property/mascot> ?mascot .\n}"
    },
    {
        "question": "For whom did Michael Springer palyed for which is also had a former student named Donald Brooks ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Michael_Springer> <http://dbpedia.org/property/team> ?uri. <http://dbpedia.org/resource/Donald_Brooks> <http://dbpedia.org/property/education> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Michael_Springer"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Michael_Springer> -> FOR_WHOM_PLAYED"
        ],
        "paths": "<http://dbpedia.org/resource/Michael_Springer> -> FOR_WHOM_PLAYED",
        "generated_query": "SELECT DISTINCT ?team WHERE {\n  {\n    <http://dbpedia.org/resource/Michael_Springer> <http://dbpedia.org/property/mllTeam> ?team .\n  } UNION {\n    <http://dbpedia.org/resource/Michael_Springer> <http://dbpedia.org/ontology/team> ?team .\n  } UNION {\n    <http://dbpedia.org/resource/Michael_Springer> <http://dbpedia.org/property/team> ?team .\n  }\n  ?team ?p <http://dbpedia.org/resource/Donald_Brooks> .\n}"
    },
    {
        "question": "Name the common nationality of Georgina Theodora Wood and akwasi Oppong Fosu ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Georgina_Theodora_Wood> <http://dbpedia.org/ontology/nationality> ?uri. <http://dbpedia.org/resource/Akwasi_Oppong_Fosu> <http://dbpedia.org/ontology/nationality> ?uri . }",
        "entities": [
            "http://dbpedia.org/resource/Akwasi_Oppong_Fosu",
            "http://dbpedia.org/resource/Georgina_Theodora_Wood"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Georgina_Theodora_Wood> -> <http://dbpedia.org/resource/Akwasi_Oppong_Fosu>"
        ],
        "paths": "<http://dbpedia.org/resource/Georgina_Theodora_Wood> -> <http://dbpedia.org/resource/Akwasi_Oppong_Fosu>",
        "generated_query": "SELECT DISTINCT ?nationality WHERE {\n  <http://dbpedia.org/resource/Georgina_Theodora_Wood> <http://dbpedia.org/ontology/nationality> ?nationality .\n  <http://dbpedia.org/resource/Akwasi_Oppong_Fosu> <http://dbpedia.org/ontology/nationality> ?nationality .\n}"
    },
    {
        "question": "Name the movie written by Monty Python and distributed by Cinema International Corporation ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/distributor> <http://dbpedia.org/resource/Cinema_International_Corporation> . ?uri <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Monty_Python>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "entities": [
            "http://dbpedia.org/resource/Monty_Python",
            "http://dbpedia.org/resource/Cinema_International_Corporation"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Monty_Python> -> <http://dbpedia.org/resource/Cinema_International_Corporation>"
        ],
        "paths": "<http://dbpedia.org/resource/Monty_Python> -> <http://dbpedia.org/resource/Cinema_International_Corporation>",
        "generated_query": "SELECT DISTINCT ?movie WHERE {\n  ?movie <http://dbpedia.org/ontology/writer> <http://dbpedia.org/resource/Monty_Python> .\n  ?movie <http://dbpedia.org/ontology/distributor> <http://dbpedia.org/resource/Cinema_International_Corporation> .\n}"
    },
    {
        "question": "Is Pittsburgh Steelers the former team of Marv McFadden?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/Marv_McFadden> <http://dbpedia.org/property/pastteams> <http://dbpedia.org/resource/Pittsburgh_Steelers> }",
        "entities": [
            "http://dbpedia.org/resource/Pittsburgh_Steelers",
            "http://dbpedia.org/resource/Marv_McFadden"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Marv_McFadden> -> <http://dbpedia.org/resource/Pittsburgh_Steelers>"
        ],
        "paths": "<http://dbpedia.org/resource/Marv_McFadden> -> <http://dbpedia.org/resource/Pittsburgh_Steelers>",
        "generated_query": "ASK WHERE {\n  {\n    <http://dbpedia.org/resource/Marv_McFadden> <http://dbpedia.org/ontology/formerTeam> <http://dbpedia.org/resource/Pittsburgh_Steelers> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Marv_McFadden> <http://dbpedia.org/property/pastteams> <http://dbpedia.org/resource/Pittsburgh_Steelers> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Marv_McFadden> <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Pittsburgh_Steelers> .\n  }\n}"
    },
    {
        "question": "Which series was written by Eric Jendresen and John Orloff?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Erik_Jendresen> . ?uri <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/John_Orloff> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "entities": [
            "http://dbpedia.org/resource/Erik_Jendresen",
            "http://dbpedia.org/resource/John_Orloff"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Erik_Jendresen> -> <http://dbpedia.org/resource/John_Orloff>"
        ],
        "paths": "<http://dbpedia.org/resource/Erik_Jendresen> -> <http://dbpedia.org/resource/John_Orloff>",
        "generated_query": "SELECT DISTINCT ?series WHERE {\n  ?series <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Erik_Jendresen> .\n  ?series <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/John_Orloff> .\n}"
    },
    {
        "question": "In which city can I find both the office of Elasticsearch and the Yellow Claw DJ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Yellow_Claw_(DJs)> <http://dbpedia.org/property/location> ?uri. <http://dbpedia.org/resource/Elasticsearch> <http://dbpedia.org/property/location> ?uri . }",
        "entities": [
            "http://dbpedia.org/resource/Yellow_Claw_(DJs)",
            "http://dbpedia.org/resource/Elastic_NV"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Yellow_Claw_(DJs)> -> CITY",
            "<http://dbpedia.org/resource/Elastic_NV> -> CITY"
        ],
        "paths": "<http://dbpedia.org/resource/Yellow_Claw_(DJs)> -> CITY",
        "generated_query": "SELECT DISTINCT ?city WHERE {\n  <http://dbpedia.org/resource/Yellow_Claw_(DJs)> <http://dbpedia.org/ontology/hometown> ?city .\n  <http://dbpedia.org/resource/Elastic_NV> <http://dbpedia.org/property/headquarters> ?hq .\n  {\n    ?hq <http://dbpedia.org/ontology/locationCity> ?city .\n  }\n  UNION\n  {\n    FILTER (?hq = ?city)\n  }\n}"
    },
    {
        "question": "Name the partners of Kelly Brook?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kelly_Brook> <http://dbpedia.org/ontology/partner> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Kelly_Brook"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Kelly_Brook> -> PARTNERS"
        ],
        "paths": "<http://dbpedia.org/resource/Kelly_Brook> -> PARTNERS",
        "generated_query": "SELECT DISTINCT ?partner WHERE {\n  {\n    <http://dbpedia.org/resource/Kelly_Brook> <http://dbpedia.org/ontology/partner> ?partner .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Kelly_Brook> <http://dbpedia.org/property/partner> ?partner .\n  }\n}"
    },
    {
        "question": "What is the area of the broadcast network which has the affiliation with 9TV?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/9TV> <http://dbpedia.org/property/affiliation> ?x . ?x <http://dbpedia.org/property/area> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BroadcastNetwork>}",
        "entities": [
            "http://dbpedia.org/resource/9TV"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/9TV> -> BROADCAST_NETWORK -> \"area\""
        ],
        "paths": "<http://dbpedia.org/resource/9TV> -> BROADCAST_NETWORK -> \"area\"",
        "generated_query": "SELECT DISTINCT ?area WHERE {\n  <http://dbpedia.org/resource/9TV> <http://dbpedia.org/ontology/broadcastNetwork> ?network .\n  ?network <http://dbpedia.org/ontology/broadcastArea> ?area .\n}"
    },
    {
        "question": "Who is married to Gerard Piqu?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/partner> <http://dbpedia.org/resource/Gerard_Piqu\u00e9>  . }",
        "entities": [
            "http://dbpedia.org/resource/Gerard_Piqu\u00e9"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Gerard_Piqu\u00e9> -> SPOUSE"
        ],
        "paths": "<http://dbpedia.org/resource/Gerard_Piqu\u00e9> -> SPOUSE",
        "generated_query": "SELECT DISTINCT ?partner WHERE {\n  { ?partner <http://dbpedia.org/ontology/partner> <http://dbpedia.org/resource/Gerard_Piqu\u00e9> . }\n  UNION\n  { ?partner <http://dbpedia.org/property/partner> <http://dbpedia.org/resource/Gerard_Piqu\u00e9> . }\n}"
    },
    {
        "question": "Which sports are played in schools affiliated with the Harvest Christian Center?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/religiousAffiliation> <http://dbpedia.org/resource/Harvest_Christian_Center> . ?x <http://dbpedia.org/ontology/sport> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>}",
        "entities": [
            "http://dbpedia.org/resource/Harvest_Christian_Fellowship"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Harvest_Christian_Fellowship> -> SCHOOL -> SPORT"
        ],
        "paths": "<http://dbpedia.org/resource/Harvest_Christian_Fellowship> -> SCHOOL -> SPORT",
        "generated_query": "SELECT DISTINCT ?sport WHERE {\n  <http://dbpedia.org/resource/Harvest_Christian_Fellowship> <http://dbpedia.org/ontology/wikiPageWikiLink> ?affiliation .\n  ?school <http://dbpedia.org/ontology/affiliation> ?affiliation .\n  ?school <http://dbpedia.org/property/athletics> ?sport .\n}"
    },
    {
        "question": "Who debuted their career in a team coached by Chip Kelly?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/coach> <http://dbpedia.org/resource/Chip_Kelly> . ?uri <http://dbpedia.org/ontology/debutTeam> ?x  . }",
        "entities": [
            "http://dbpedia.org/resource/Chip_Kelly"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Chip_Kelly> -> TEAM -> PLAYER"
        ],
        "paths": "<http://dbpedia.org/resource/Chip_Kelly> -> TEAM -> PLAYER",
        "generated_query": "SELECT DISTINCT ?player WHERE {\n  ?team <http://dbpedia.org/ontology/coach> <http://dbpedia.org/resource/Chip_Kelly> .\n  ?player <http://dbpedia.org/ontology/team> ?team .\n}"
    },
    {
        "question": "What are the nicknames given to the characters of The Wolves of the Mercy Falls?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/List_of_The_Wolves_of_Mercy_Falls_characters> <http://dbpedia.org/property/nickname> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/The_Wolves_of_Mercy_Falls"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/The_Wolves_of_Mercy_Falls> -> CHARACTERS -> \"nicknames\""
        ],
        "paths": "<http://dbpedia.org/resource/The_Wolves_of_Mercy_Falls> -> CHARACTERS -> \"nicknames\"",
        "generated_query": "SELECT DISTINCT ?nickname WHERE {\n  ?charactersList <http://dbpedia.org/property/series> <http://dbpedia.org/resource/The_Wolves_of_Mercy_Falls> .\n  ?charactersList <http://dbpedia.org/property/nickname> ?nickname .\n}"
    },
    {
        "question": "Name the river with source country in Zambia and source region as North-Western Province, Zambia?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/sourceCountry> <http://dbpedia.org/resource/Zambia> . ?uri <http://dbpedia.org/ontology/sourceRegion> <http://dbpedia.org/resource/North-Western_Province,_Zambia>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "entities": [
            "http://dbpedia.org/resource/Zambia"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Zambia> -> RIVER -> \"source region\"",
            "<http://dbpedia.org/resource/Zambia> -> RIVER -> \"source country\""
        ],
        "paths": "<http://dbpedia.org/resource/Zambia> -> RIVER -> \"source region\", <http://dbpedia.org/resource/Zambia> -> RIVER -> \"source country\"",
        "generated_query": "SELECT DISTINCT ?river WHERE {\n  ?river <http://dbpedia.org/ontology/sourceCountry> <http://dbpedia.org/resource/Zambia> .\n  ?river <http://dbpedia.org/ontology/sourceRegion> <http://dbpedia.org/resource/North-Western_Province,_Zambia> .\n}"
    },
    {
        "question": "Members of how many political parties have died in Delhi?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/property/placeOfDeath> <http://dbpedia.org/resource/Delhi> . ?x <http://dbpedia.org/property/party> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Delhi"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Delhi> -> DIED"
        ],
        "paths": "<http://dbpedia.org/resource/Delhi> -> DIED",
        "generated_query": "SELECT (COUNT(DISTINCT ?party) AS ?numParties) WHERE {\n  ?person <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Delhi> .\n  ?person <http://dbpedia.org/ontology/wikiPageWikiLink> ?party .\n  ?party a <http://dbpedia.org/ontology/PoliticalParty> .\n}"
    },
    {
        "question": "What is the birthplace of Adugna Deyas and the place where Fiq is located?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Fiq,_Ethiopia> <http://dbpedia.org/ontology/country> ?uri. <http://dbpedia.org/resource/Adugna_Deyas> <http://dbpedia.org/property/birthPlace> ?uri . }",
        "entities": [
            "http://dbpedia.org/resource/Adugna_Deyas",
            "http://dbpedia.org/resource/Fiq,_Syria"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Fiq,_Syria> -> \"location\"",
            "<http://dbpedia.org/resource/Adugna_Deyas> -> \"birthplace\""
        ],
        "paths": "<http://dbpedia.org/resource/Fiq,_Syria> -> \"location\", <http://dbpedia.org/resource/Adugna_Deyas> -> \"birthplace\"",
        "generated_query": "SELECT DISTINCT ?birthplace ?location WHERE {\n  <http://dbpedia.org/resource/Adugna_Deyas> <http://dbpedia.org/property/placeOfBirth> ?birthplace .\n  \n  ?place <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Fiq,_Syria> .\n  ?place <http://dbpedia.org/ontology/country> ?location .\n}"
    },
    {
        "question": "what is the headquarters of Juan Dalmau Ramerez?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Juan_Dalmau_Ram\u00edrez> <http://dbpedia.org/property/headquarters> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Juan_Dalmau"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Juan_Dalmau> -> \"headquarters\""
        ],
        "paths": "<http://dbpedia.org/resource/Juan_Dalmau> -> \"headquarters\"",
        "generated_query": "SELECT DISTINCT ?headquarters WHERE {\n  <http://dbpedia.org/resource/Juan_Dalmau> <http://dbpedia.org/ontology/wikiPageWikiLink> ?person .\n  ?person <http://dbpedia.org/property/headquarters> ?headquarters .\n}"
    },
    {
        "question": "The president who was in office when Lee Hyun Jae was the PM followed which religion?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/primeminister> <http://dbpedia.org/resource/Lee_Hyun-jae> . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/President>}",
        "entities": [
            "http://dbpedia.org/resource/Lee_Hyun-jae"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Lee_Hyun-jae> -> PRESIDENT -> \"religion\""
        ],
        "paths": "<http://dbpedia.org/resource/Lee_Hyun-jae> -> PRESIDENT -> \"religion\"",
        "generated_query": "SELECT DISTINCT ?religion WHERE {\n  <http://dbpedia.org/resource/Lee_Hyun-jae> <http://dbpedia.org/property/successor> ?pmSuccessor .\n  ?pmSuccessor <http://dbpedia.org/property/president> ?president .\n  ?president <http://dbpedia.org/ontology/religion> ?religion .\n}"
    },
    {
        "question": "Who is the maker of the engine of Ford F-Series first generation ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ford_F-Series_first_generation> <http://dbpedia.org/property/engine> ?x . ?x <http://dbpedia.org/ontology/manufacturer> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Ford_F-Series"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Ford_F-Series> -> ENGINE -> MAKER"
        ],
        "paths": "<http://dbpedia.org/resource/Ford_F-Series> -> ENGINE -> MAKER",
        "generated_query": "SELECT DISTINCT ?engineMaker WHERE {\n  <http://dbpedia.org/resource/Ford_F-Series> <http://dbpedia.org/property/manufacturer> ?manufacturer .\n  ?engine <http://dbpedia.org/property/manufacturer> ?manufacturer .\n  ?engine <http://dbpedia.org/property/manufacturer> ?engineMaker .\n}"
    },
    {
        "question": "What is the religious affiliation of Neungin High School?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Neungin_High_School> <http://dbpedia.org/property/religiousAffiliation> ?uri } ",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?religiousAffiliation WHERE {\n  <http://example.org/NeunginHighSchool> ?p ?religiousAffiliation .\n  FILTER(CONTAINS(LCASE(STR(?p)), \"religion\") || CONTAINS(LCASE(STR(?p)), \"religious\"))\n}"
    },
    {
        "question": "Is Maria Sharapova the silver medalist of Tennis at the 2012 Summer Olympics  Women's singles?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/Tennis_at_the_2012_Summer_Olympics_\u2013_Women's_singles> <http://dbpedia.org/ontology/silverMedalist> <http://dbpedia.org/resource/Maria_Sharapova> }",
        "entities": [
            "http://dbpedia.org/resource/Maria_Sharapova"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Maria_Sharapova> -> SILVER_MEDALIST -> TENNIS -> 2012_SUMMER_OLYMPICS -> WOMENS_SINGLES"
        ],
        "paths": "<http://dbpedia.org/resource/Maria_Sharapova> -> SILVER_MEDALIST -> TENNIS -> 2012_SUMMER_OLYMPICS -> WOMENS_SINGLES",
        "generated_query": "ASK WHERE {\n  <http://dbpedia.org/resource/Tennis_at_the_2012_Summer_Olympics_\u2013_Women's_singles> <http://dbpedia.org/ontology/silverMedalist> <http://dbpedia.org/resource/Maria_Sharapova> .\n}"
    },
    {
        "question": "Name the office holder with successor as Adrian A Basora and child as Lori Black ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Lori_Black> . ?uri <http://dbpedia.org/property/successor> <http://dbpedia.org/resource/Adrian_A._Basora>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
        "entities": [
            "http://dbpedia.org/resource/Adrian_A._Basora"
        ],
        "classes": [],
        "relations": [
            "OFFICE_HOLDER -> CHILD -> <http://dbpedia.org/resource/Lori_Black>",
            "<http://dbpedia.org/resource/Adrian_A._Basora> -> OFFICE_HOLDER",
            "OFFICE_HOLDER -> \"name\"",
            "OFFICE_HOLDER -> <http://dbpedia.org/resource/Adrian_A._Basora>"
        ],
        "paths": "<http://dbpedia.org/resource/Adrian_A._Basora> -> OFFICE_HOLDER",
        "generated_query": "SELECT DISTINCT ?name WHERE {\n  ?officeHolder <http://dbpedia.org/property/successor> <http://dbpedia.org/resource/Adrian_A._Basora> .\n  ?officeHolder <http://dbpedia.org/property/child> <http://dbpedia.org/resource/Lori_Black> .\n  ?officeHolder <http://dbpedia.org/property/name> ?name .\n}"
    },
    {
        "question": "Who is the owner of the South end ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_South_End> <http://dbpedia.org/property/owners> ?uri } ",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?owner WHERE {\n  ?entity <http://www.w3.org/2000/01/rdf-schema#label> \"South end\" .\n  ?entity ?property ?owner .\n}"
    },
    {
        "question": "What is the colour of Xocolatlite ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Xocolatlite> <http://dbpedia.org/ontology/colour> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Xocolatlite"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Xocolatlite> -> \"colour\""
        ],
        "paths": "<http://dbpedia.org/resource/Xocolatlite> -> \"colour\"",
        "generated_query": "SELECT DISTINCT ?color WHERE {\n  {\n    <http://dbpedia.org/resource/Xocolatlite> <http://dbpedia.org/property/color> ?color .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Xocolatlite> <http://dbpedia.org/ontology/colour> ?color .\n  }\n}"
    },
    {
        "question": "For how many other teams have the members of Atlant Moscow Oblast played?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/property/playedFor> <http://dbpedia.org/resource/Atlant_Moscow_Oblast> . ?x <http://dbpedia.org/ontology/formerTeam> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Atlant_Moscow_Oblast",
            "http://dbpedia.org/resource/Moscow_Oblast"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Atlant_Moscow_Oblast> -> \"member\" -> \"played for\" -> \"count\"",
            "<http://dbpedia.org/resource/Atlant_Moscow_Oblast> -> \"member\"",
            "<http://dbpedia.org/resource/Atlant_Moscow_Oblast> -> \"member\" -> \"played for\""
        ],
        "paths": "<http://dbpedia.org/resource/Atlant_Moscow_Oblast> -> \"member\" -> \"played for\" -> \"count\", <http://dbpedia.org/resource/Atlant_Moscow_Oblast> -> \"member\", <http://dbpedia.org/resource/Atlant_Moscow_Oblast> -> \"member\" -> \"played for\"",
        "generated_query": "SELECT (COUNT(DISTINCT ?otherTeam) AS ?countOtherTeams)\nWHERE {\n  ?player <http://dbpedia.org/ontology/formerTeam> <http://dbpedia.org/resource/Atlant_Moscow_Oblast> .\n  ?player <http://dbpedia.org/property/playedFor> ?otherTeam .\n  FILTER(?otherTeam != <http://dbpedia.org/resource/Atlant_Moscow_Oblast>)\n}"
    },
    {
        "question": "What is the state of origin of the president whose alma mater is Hellenic Naval Academy ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/almaMater> <http://dbpedia.org/resource/Hellenic_Naval_Academy> . ?x <http://dbpedia.org/ontology/stateOfOrigin> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/President>}",
        "entities": [
            "http://dbpedia.org/resource/Hellenic_Naval_Academy"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Hellenic_Naval_Academy> -> PRESIDENT -> \"state of origin\""
        ],
        "paths": "<http://dbpedia.org/resource/Hellenic_Naval_Academy> -> PRESIDENT -> \"state of origin\"",
        "generated_query": "SELECT DISTINCT ?stateOfOrigin WHERE {\n  <http://dbpedia.org/resource/Hellenic_Naval_Academy> <http://dbpedia.org/ontology/wikiPageWikiLink> ?country .\n  ?country <http://dbpedia.org/property/leaderName> ?president .\n  ?president <http://dbpedia.org/ontology/birthPlace> ?stateOfOrigin .\n}"
    },
    {
        "question": "What is the common ethnicity of the Maike Evers and Francisco Lachowski ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Maike_Evers> <http://dbpedia.org/ontology/ethnicity> ?uri. <http://dbpedia.org/resource/Francisco_Lachowski> <http://dbpedia.org/ontology/ethnicity> ?uri . }",
        "entities": [
            "http://dbpedia.org/resource/Maike_Evers",
            "http://dbpedia.org/resource/Francisco_Lachowski"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Maike_Evers> -> <http://dbpedia.org/resource/Francisco_Lachowski>"
        ],
        "paths": "<http://dbpedia.org/resource/Maike_Evers> -> <http://dbpedia.org/resource/Francisco_Lachowski>",
        "generated_query": "SELECT DISTINCT ?ethnicity WHERE {\n  <http://dbpedia.org/resource/Maike_Evers> <http://dbpedia.org/ontology/ethnicity> ?ethnicity .\n  <http://dbpedia.org/resource/Francisco_Lachowski> <http://dbpedia.org/ontology/ethnicity> ?ethnicity .\n}"
    },
    {
        "question": "In which places do companies founded in Newcastle operate?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/foundationPlace> <http://dbpedia.org/resource/City_of_Newcastle> . ?x <http://dbpedia.org/ontology/regionServed> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
        "entities": [
            "http://dbpedia.org/resource/Newcastle_upon_Tyne"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Newcastle_upon_Tyne> -> COMPANY -> OPERATE_IN"
        ],
        "paths": "<http://dbpedia.org/resource/Newcastle_upon_Tyne> -> COMPANY -> OPERATE_IN",
        "generated_query": "SELECT DISTINCT ?place WHERE {\n  ?company <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Newcastle_upon_Tyne> .\n  \n  OPTIONAL {\n    ?company <http://dbpedia.org/property/headquarters> ?headquarter .\n    ?headquarter <http://dbpedia.org/property/location> ?place .\n  }\n  \n  OPTIONAL {\n    ?company <http://dbpedia.org/ontology/location> ?place .\n  }\n  \n  OPTIONAL {\n    ?company <http://dbpedia.org/property/location> ?place .\n  }\n  \n  FILTER (BOUND(?place) && ?place != <http://dbpedia.org/resource/Newcastle_upon_Tyne>)\n}"
    },
    {
        "question": "Which senator served in military units VMF-155 and VMF-218?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/militaryUnit> <http://dbpedia.org/resource/VMF-155> . ?uri <http://dbpedia.org/ontology/militaryUnit> <http://dbpedia.org/resource/VMF-218> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Senator>}",
        "entities": [
            "http://dbpedia.org/resource/VMF-155",
            "http://dbpedia.org/resource/VMF-218"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/VMF-218> -> SENATOR",
            "<http://dbpedia.org/resource/VMF-155> -> SENATOR"
        ],
        "paths": "<http://dbpedia.org/resource/VMF-218> -> SENATOR, <http://dbpedia.org/resource/VMF-155> -> SENATOR",
        "generated_query": "SELECT DISTINCT ?senator WHERE {\n  ?senator <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/VMF-155> .\n  ?senator <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/VMF-218> .\n}"
    },
    {
        "question": "What kind of games are made by Interplay Entertainment?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/publisher> <http://dbpedia.org/resource/Interplay_Entertainment> . ?x <http://dbpedia.org/property/genre> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/VideoGame>}",
        "entities": [
            "http://dbpedia.org/resource/Interplay_Entertainment"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Interplay_Entertainment> -> <http://dbpedia.org/ontology/Game>"
        ],
        "paths": "<http://dbpedia.org/resource/Interplay_Entertainment> -> <http://dbpedia.org/ontology/Game>",
        "generated_query": "SELECT DISTINCT ?genre WHERE {\n  {\n    <http://dbpedia.org/resource/Interplay_Entertainment> <http://dbpedia.org/ontology/product> ?game .\n  }\n  UNION\n  {\n    ?game <http://dbpedia.org/ontology/publisher> <http://dbpedia.org/resource/Interplay_Entertainment> .\n  }\n  \n  {\n    ?game <http://dbpedia.org/ontology/genre> ?genre .\n  }\n  UNION\n  {\n    ?game <http://dbpedia.org/property/genre> ?genre .\n  }\n  \n  ?genre <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Game> .\n}"
    },
    {
        "question": "Which producer of Purvis Eureka engine is also the owner of Ford Theatre ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Purvis_Eureka> <http://dbpedia.org/property/engine> ?uri. <http://dbpedia.org/resource/Ford_Theatre> <http://dbpedia.org/property/company> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Ford_Theatre",
            "http://dbpedia.org/resource/Purvis_Eureka"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Purvis_Eureka> -> PRODUCER -> OWNER -> <http://dbpedia.org/resource/Ford_Theatre>"
        ],
        "paths": "<http://dbpedia.org/resource/Purvis_Eureka> -> PRODUCER -> OWNER -> <http://dbpedia.org/resource/Ford_Theatre>",
        "generated_query": "SELECT DISTINCT ?producer WHERE {\n  {\n    <http://dbpedia.org/resource/Purvis_Eureka> <http://dbpedia.org/ontology/producer> ?producer .\n  } UNION {\n    <http://dbpedia.org/resource/Purvis_Eureka> <http://dbpedia.org/ontology/wikiPageWikiLink> ?producer .\n  }\n  ?producer <http://dbpedia.org/ontology/owner> <http://dbpedia.org/resource/Ford_Theatre> .\n}"
    },
    {
        "question": "What developed EMMS?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/EMMS> <http://dbpedia.org/ontology/developer> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Electrical_muscle_stimulation"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Electrical_muscle_stimulation> -> \"developer\""
        ],
        "paths": "<http://dbpedia.org/resource/Electrical_muscle_stimulation> -> \"developer\"",
        "generated_query": "SELECT DISTINCT ?developer WHERE {\n  {\n    ?intermediate <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Electrical_muscle_stimulation> .\n    ?intermediate <http://dbpedia.org/property/producer> ?developer .\n  }\n  UNION\n  {\n    ?intermediate <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Electrical_muscle_stimulation> .\n    ?intermediate <http://dbpedia.org/property/author> ?developer .\n  }\n}"
    },
    {
        "question": "Which music band made Take Me There, and to which Tedd Riley was associated?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Teddy_Riley> <http://dbpedia.org/ontology/associatedBand> ?uri. <http://dbpedia.org/resource/Take_Me_There_(Blackstreet_&_M\u00fda_song)> <http://dbpedia.org/ontology/musicalBand> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Teddy_Riley",
            "http://dbpedia.org/resource/Take_Me_There_(Rascal_Flatts_song)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Take_Me_There_(Rascal_Flatts_song)> -> <http://dbpedia.org/resource/Teddy_Riley>"
        ],
        "paths": "<http://dbpedia.org/resource/Take_Me_There_(Rascal_Flatts_song)> -> <http://dbpedia.org/resource/Teddy_Riley>",
        "generated_query": "SELECT DISTINCT ?band1 ?band2 WHERE {\n  # No triples available to connect the song or Teddy Riley to any band\n}\nLIMIT 10"
    },
    {
        "question": "In which time zone is Pong Pha?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pong_Pha> <http://dbpedia.org/ontology/timeZone> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Luang_Prabang"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Luang_Prabang> -> \"time zone\""
        ],
        "paths": "<http://dbpedia.org/resource/Luang_Prabang> -> \"time zone\"",
        "generated_query": "SELECT DISTINCT ?timeZone WHERE {\n  <http://dbpedia.org/resource/Luang_Prabang> <http://dbpedia.org/ontology/timeZone> ?timeZone .\n}"
    },
    {
        "question": "How many fictional characters are there in a series in which Craig Robinson acted?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Craig_Robinson_(actor)> . ?uri <http://dbpedia.org/ontology/series> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
        "entities": [
            "http://dbpedia.org/resource/Craig_Robinson_(actor)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Craig_Robinson_(actor)> -> SERIES -> FICTIONAL_CHARACTER -> \"count\""
        ],
        "paths": "<http://dbpedia.org/resource/Craig_Robinson_(actor)> -> SERIES -> FICTIONAL_CHARACTER -> \"count\"",
        "generated_query": "SELECT (COUNT(DISTINCT ?character) AS ?count)\nWHERE {\n  ?episodeOrCharacter <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Craig_Robinson_(actor)> .\n  ?episodeOrCharacter <http://dbpedia.org/property/series> ?series .\n\n  ?character <http://dbpedia.org/ontology/wikiPageWikiLink> ?series .\n\n  ?characterCategory <http://purl.org/dc/terms/subject> ?character .\n\n  FILTER (\n    CONTAINS(LCASE(STR(?characterCategory)), \"fictional\") ||\n    CONTAINS(LCASE(STR(?characterCategory)), \"characters\")\n  )\n}"
    },
    {
        "question": "Which political party of Chandra Shekhar is also the political party of Datl Satyanarayana Raju ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chandra_Shekhar> <http://dbpedia.org/ontology/otherParty> ?uri. <http://dbpedia.org/resource/Datla_Satyanarayana_Raju> <http://dbpedia.org/ontology/party> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Chandra_Shekhar",
            "http://dbpedia.org/resource/Datla_Satyanarayana_Raju"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Chandra_Shekhar> -> <http://dbpedia.org/resource/Datla_Satyanarayana_Raju>"
        ],
        "paths": "<http://dbpedia.org/resource/Chandra_Shekhar> -> <http://dbpedia.org/resource/Datla_Satyanarayana_Raju>",
        "generated_query": "SELECT DISTINCT ?party WHERE {\n  <http://dbpedia.org/resource/Chandra_Shekhar> <http://dbpedia.org/ontology/otherParty> ?party .\n  <http://dbpedia.org/resource/Datla_Satyanarayana_Raju> <http://dbpedia.org/ontology/party> ?party .\n}"
    },
    {
        "question": "Who owns the airport in Paphos?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/city> <http://dbpedia.org/resource/Paphos_District> . ?x <http://dbpedia.org/property/owner> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airport>}",
        "entities": [
            "http://dbpedia.org/resource/Paphos"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Paphos> -> AIRPORT -> OWNER"
        ],
        "paths": "<http://dbpedia.org/resource/Paphos> -> AIRPORT -> OWNER",
        "generated_query": "SELECT DISTINCT ?owner WHERE {\n  {\n    ?airport <http://dbpedia.org/property/location> <http://dbpedia.org/resource/Paphos> .\n  }\n  UNION\n  {\n    ?airport <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Paphos> .\n  }\n  {\n    ?airport <http://dbpedia.org/property/owner> ?owner .\n  }\n  UNION\n  {\n    ?airport <http://dbpedia.org/ontology/owner> ?owner .\n  }\n}"
    },
    {
        "question": "What is the baseball team whose club manager is Chip Hale?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/manager> <http://dbpedia.org/resource/Chip_Hale>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BaseballTeam>}",
        "entities": [
            "http://dbpedia.org/resource/Baseball",
            "http://dbpedia.org/resource/Chip_Hale"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Baseball> -> <http://dbpedia.org/resource/Chip_Hale>"
        ],
        "paths": "<http://dbpedia.org/resource/Baseball> -> <http://dbpedia.org/resource/Chip_Hale>",
        "generated_query": "SELECT DISTINCT ?team WHERE {\n  <http://dbpedia.org/resource/Chip_Hale> <http://dbpedia.org/ontology/wikiPageWikiLink> ?team .\n  ?team <http://dbpedia.org/property/sport> <http://dbpedia.org/resource/Baseball> .\n}"
    },
    {
        "question": "Which bacteria's taxonomic class is Bacilli?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/class> <http://dbpedia.org/resource/Bacilli>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bacteria>}",
        "entities": [
            "http://dbpedia.org/resource/Taxonomic_rank",
            "http://dbpedia.org/resource/Bacilli",
            "http://dbpedia.org/resource/Bacteria"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Bacteria> -> <http://dbpedia.org/resource/Bacilli>"
        ],
        "paths": "<http://dbpedia.org/resource/Bacteria> -> <http://dbpedia.org/resource/Bacilli>",
        "generated_query": "SELECT DISTINCT ?bacteria WHERE {\n  ?bacteria <http://dbpedia.org/ontology/kingdom> <http://dbpedia.org/resource/Bacteria> .\n  ?bacteria <http://dbpedia.org/ontology/class> <http://dbpedia.org/resource/Bacilli> .\n}"
    },
    {
        "question": "What honours did Reigh Count receive?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Reigh_Count> <http://dbpedia.org/ontology/honours> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Reigh_Count"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Reigh_Count> -> \"honours\""
        ],
        "paths": "<http://dbpedia.org/resource/Reigh_Count> -> \"honours\"",
        "generated_query": "SELECT DISTINCT ?honour WHERE {\n  {\n    <http://dbpedia.org/resource/Reigh_Count> <http://dbpedia.org/property/honours> ?honour .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Reigh_Count> <http://dbpedia.org/ontology/award> ?honour .\n  }\n}"
    },
    {
        "question": "What are some products of the the company whose subsidiary is Sony Corp shareholders and subsidies?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/subsidiary> <http://dbpedia.org/resource/Sony_Corporation_shareholders_and_subsidiaries> . ?uri <http://dbpedia.org/ontology/manufacturer> ?x  . }",
        "entities": [
            "http://dbpedia.org/resource/Sony"
        ],
        "classes": [],
        "relations": [
            "SUBSIDIARY -> PRODUCTS",
            "SUBSIDIARY -> SHAREHOLDERS",
            "<http://dbpedia.org/resource/Sony> -> SUBSIDIARY"
        ],
        "paths": "<http://dbpedia.org/resource/Sony> -> SUBSIDIARY",
        "generated_query": "SELECT DISTINCT ?product WHERE {\n  <http://dbpedia.org/resource/Sony> <http://dbpedia.org/ontology/subsidiary> ?subsidiary .\n  ?subsidiary <http://dbpedia.org/ontology/wikiPageWikiLink> ?product .\n}\nLIMIT 100"
    },
    {
        "question": "Who built the stadiums where 2014 FIFA under 17 woman's world cup took place?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/tenant> <http://dbpedia.org/resource/2014_FIFA_U-17_Women's_World_Cup> . ?x <http://dbpedia.org/ontology/builder> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/2014_FIFA_U-17_Women's_World_Cup",
            "http://dbpedia.org/resource/FIFA_U-17_Women's_World_Cup"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/2014_FIFA_U-17_Women's_World_Cup> -> STADIUM -> BUILDER"
        ],
        "paths": "<http://dbpedia.org/resource/2014_FIFA_U-17_Women's_World_Cup> -> STADIUM -> BUILDER",
        "generated_query": "SELECT DISTINCT ?builder WHERE {\n  <http://dbpedia.org/resource/2014_FIFA_U-17_Women's_World_Cup> <http://dbpedia.org/property/stadium> ?stadium .\n  ?stadium ?p ?builder .\n  FILTER(?p IN (\n    <http://dbpedia.org/property/builder>,\n    <http://dbpedia.org/ontology/builder>,\n    <http://dbpedia.org/property/architect>,\n    <http://dbpedia.org/ontology/architect>\n  ))\n}"
    },
    {
        "question": "Which area operataed by the South Side Elevated Railroad is also the palce of death of the Sakari Suzuki ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/South_Side_Elevated_Railroad> <http://dbpedia.org/ontology/operatedBy> ?uri. <http://dbpedia.org/resource/Sakari_Suzuki> <http://dbpedia.org/property/deathPlace> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/South_Side_Elevated_Railroad",
            "http://dbpedia.org/resource/Sakari_Suzuki"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Sakari_Suzuki> -> PLACE_OF_DEATH",
            "<http://dbpedia.org/resource/South_Side_Elevated_Railroad> -> AREA"
        ],
        "paths": "<http://dbpedia.org/resource/Sakari_Suzuki> -> PLACE_OF_DEATH, <http://dbpedia.org/resource/South_Side_Elevated_Railroad> -> AREA",
        "generated_query": "SELECT DISTINCT ?area WHERE {\n  # Get place of death of Sakari Suzuki\n  {\n    <http://dbpedia.org/resource/Sakari_Suzuki> <http://dbpedia.org/property/placeOfDeath> ?placeOfDeath .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Sakari_Suzuki> <http://dbpedia.org/property/deathPlace> ?placeOfDeath .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Sakari_Suzuki> <http://dbpedia.org/ontology/deathPlace> ?placeOfDeath .\n  }\n  \n  # Get areas operated by South Side Elevated Railroad via routes' locale or location\n  {\n    <http://dbpedia.org/resource/South_Side_Elevated_Railroad> <http://dbpedia.org/property/routes> ?route .\n    {\n      ?route <http://dbpedia.org/property/locale> ?area .\n    }\n    UNION\n    {\n      ?route <http://dbpedia.org/ontology/location> ?area .\n    }\n  }\n  UNION\n  # Or directly the location of the railroad\n  {\n    <http://dbpedia.org/resource/South_Side_Elevated_Railroad> <http://dbpedia.org/ontology/location> ?area .\n  }\n  \n  # Ensure the area matches the place of death\n  FILTER (?area = ?placeOfDeath)\n}"
    },
    {
        "question": "What is the television show whose related with  Doctor Who Confidential?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/related> <http://dbpedia.org/resource/Doctor_Who_Confidential>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "entities": [
            "http://dbpedia.org/resource/Doctor_Who_Confidential"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Doctor_Who_Confidential> -> TELEVISION_SHOW"
        ],
        "paths": "<http://dbpedia.org/resource/Doctor_Who_Confidential> -> TELEVISION_SHOW",
        "generated_query": "SELECT DISTINCT ?relatedShow WHERE {\n  {\n    <http://dbpedia.org/resource/Doctor_Who_Confidential> <http://dbpedia.org/ontology/related> ?relatedShow .\n  }\n  UNION\n  {\n    ?relatedShow <http://dbpedia.org/ontology/related> <http://dbpedia.org/resource/Doctor_Who_Confidential> .\n  }\n}"
    },
    {
        "question": "In which city wasThe Triple Door (The Courage album)  performed live?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Live_at_The_Triple_Door_(The_Courage_album)> <http://dbpedia.org/property/recorded> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Live_at_The_Triple_Door_(The_Courage_album)",
            "http://dbpedia.org/resource/The_Courage",
            "http://dbpedia.org/resource/The_Triple_Door"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/The_Triple_Door> -> \"city\"",
            "<http://dbpedia.org/resource/Live_at_The_Triple_Door_(The_Courage_album)> -> <http://dbpedia.org/resource/The_Triple_Door>"
        ],
        "paths": "<http://dbpedia.org/resource/The_Triple_Door> -> \"city\", <http://dbpedia.org/resource/Live_at_The_Triple_Door_(The_Courage_album)> -> <http://dbpedia.org/resource/The_Triple_Door>",
        "generated_query": "SELECT DISTINCT ?city WHERE {\n  {\n    <http://dbpedia.org/resource/Live_at_The_Triple_Door_(The_Courage_album)> <http://dbpedia.org/property/recorded> ?city .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Live_at_The_Triple_Door_(The_Courage_album)> <http://dbpedia.org/ontology/recordedIn> ?city .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Live_at_The_Triple_Door_(The_Courage_album)> <http://dbpedia.org/property/recorded> ?venue .\n    ?venue <http://dbpedia.org/property/location> ?city .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Live_at_The_Triple_Door_(The_Courage_album)> <http://dbpedia.org/ontology/recordedIn> ?venue .\n    ?venue <http://dbpedia.org/property/location> ?city .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Live_at_The_Triple_Door_(The_Courage_album)> <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/The_Triple_Door> .\n    <http://dbpedia.org/resource/The_Triple_Door> <http://dbpedia.org/property/location> ?city .\n  }\n}"
    },
    {
        "question": "Which nearest city of Jurgens Site is the death plce of Jimmie Heuga ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jurgens_Site> <http://dbpedia.org/property/nearestCity> ?uri. <http://dbpedia.org/resource/Jimmie_Heuga> <http://dbpedia.org/property/deathPlace> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Jurgens_Site",
            "http://dbpedia.org/resource/Jimmie_Heuga"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Jurgens_Site> -> NEAREST_CITY",
            "<http://dbpedia.org/resource/Jimmie_Heuga> -> \"death place\""
        ],
        "paths": "<http://dbpedia.org/resource/Jurgens_Site> -> NEAREST_CITY, <http://dbpedia.org/resource/Jimmie_Heuga> -> \"death place\"",
        "generated_query": "SELECT DISTINCT ?city WHERE {\n  <http://dbpedia.org/resource/Jurgens_Site> <http://dbpedia.org/ontology/nearestCity> ?city .\n  <http://dbpedia.org/resource/Jimmie_Heuga> <http://dbpedia.org/ontology/deathPlace> ?city .\n}"
    },
    {
        "question": "List the battles fought by  Ali Habib Mahmud ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ali_Habib_Mahmud> <http://dbpedia.org/property/battles> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Ali_Habib_Mahmud"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Ali_Habib_Mahmud> -> \"battle\""
        ],
        "paths": "<http://dbpedia.org/resource/Ali_Habib_Mahmud> -> \"battle\"",
        "generated_query": "SELECT DISTINCT ?battle WHERE {\n  {\n    <http://dbpedia.org/resource/Ali_Habib_Mahmud> <http://dbpedia.org/property/battles> ?battle .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Ali_Habib_Mahmud> <http://dbpedia.org/ontology/battle> ?battle .\n  }\n}"
    },
    {
        "question": "How many companies were started in the states?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE {?uri <http://dbpedia.org/ontology/foundationPlace> <http://dbpedia.org/resource/United_States>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT (COUNT(DISTINCT ?company) AS ?count)\nWHERE {\n  # No triples available to match companies started in states\n}"
    },
    {
        "question": "Is Charles Drummond Ellis a doctoral student of James Chadwick?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/James_Chadwick> <http://dbpedia.org/ontology/doctoralStudent> <http://dbpedia.org/resource/Charles_Drummond_Ellis> }",
        "entities": [
            "http://dbpedia.org/resource/Charles_Drummond_Ellis",
            "http://dbpedia.org/resource/James_Chadwick"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Charles_Drummond_Ellis> -> <http://dbpedia.org/resource/James_Chadwick>"
        ],
        "paths": "<http://dbpedia.org/resource/Charles_Drummond_Ellis> -> <http://dbpedia.org/resource/James_Chadwick>",
        "generated_query": "ASK WHERE {\n  <http://dbpedia.org/resource/James_Chadwick> <http://dbpedia.org/property/doctoralStudents> <http://dbpedia.org/resource/Charles_Drummond_Ellis> .\n}"
    },
    {
        "question": "How many movies are distributed by Cinema International Corporation?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE {?uri <http://dbpedia.org/ontology/distributor> <http://dbpedia.org/resource/Cinema_International_Corporation>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "entities": [
            "http://dbpedia.org/resource/Cinema_International_Corporation"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Cinema_International_Corporation> -> <http://dbpedia.org/ontology/Movie>"
        ],
        "paths": "",
        "generated_query": "SELECT (COUNT(DISTINCT ?movie) AS ?count)\nWHERE {\n  <http://dbpedia.org/resource/Cinema_International_Corporation> ?p ?movie .\n  ?movie a <http://dbpedia.org/ontology/Movie> .\n}"
    },
    {
        "question": "Name the local authority of Trinity School, Brentwood ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Trinity_School,_Brentwood> <http://dbpedia.org/ontology/localAuthority> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Trinity_School,_Brentwood"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Trinity_School,_Brentwood> -> \"local authority\""
        ],
        "paths": "<http://dbpedia.org/resource/Trinity_School,_Brentwood> -> \"local authority\"",
        "generated_query": "SELECT DISTINCT ?localAuthority WHERE {\n  <http://dbpedia.org/resource/Trinity_School,_Brentwood> <http://dbpedia.org/ontology/localAuthority> ?localAuthority .\n}"
    },
    {
        "question": "Name the president of Wyche Fowler ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Wyche_Fowler> <http://dbpedia.org/ontology/president> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Wyche_Fowler"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Wyche_Fowler> -> \"president\""
        ],
        "paths": "<http://dbpedia.org/resource/Wyche_Fowler> -> \"president\"",
        "generated_query": "SELECT DISTINCT ?president WHERE {\n  {\n    <http://dbpedia.org/resource/Wyche_Fowler> <http://dbpedia.org/ontology/president> ?president .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Wyche_Fowler> <http://dbpedia.org/property/president> ?president .\n  }\n}"
    },
    {
        "question": "In which fields have people born in Lausanne worked?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/placeOfBirth> <http://dbpedia.org/resource/Lausanne> . ?x <http://dbpedia.org/property/fields> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Lausanne"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Lausanne> -> BORN_IN -> PEOPLE -> WORKED_IN -> \"field\""
        ],
        "paths": "<http://dbpedia.org/resource/Lausanne> -> BORN_IN -> PEOPLE -> WORKED_IN -> \"field\"",
        "generated_query": "SELECT DISTINCT ?field WHERE {\n  {\n    ?person <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Lausanne> .\n  }\n  UNION\n  {\n    ?person <http://dbpedia.org/property/birthPlace> <http://dbpedia.org/resource/Lausanne> .\n  }\n  \n  {\n    ?person <http://dbpedia.org/ontology/field> ?field .\n  }\n  UNION\n  {\n    ?person <http://dbpedia.org/property/fields> ?field .\n  }\n}"
    },
    {
        "question": "Which Texas based company  was founded by Jim Harris ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/locationCity> <http://dbpedia.org/resource/Texas> . ?uri <http://dbpedia.org/property/founder> <http://dbpedia.org/resource/Jim_Harris_(entrepreneur)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
        "entities": [
            "http://dbpedia.org/resource/Jim_Harris_(entrepreneur)",
            "http://dbpedia.org/resource/Texas"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Jim_Harris_(entrepreneur)> -> COMPANY -> <http://dbpedia.org/resource/Texas>"
        ],
        "paths": "<http://dbpedia.org/resource/Jim_Harris_(entrepreneur)> -> COMPANY -> <http://dbpedia.org/resource/Texas>",
        "generated_query": "SELECT DISTINCT ?company WHERE {\n  ?company <http://dbpedia.org/ontology/foundedBy> <http://dbpedia.org/resource/Jim_Harris_(entrepreneur)> .\n  ?company <http://dbpedia.org/ontology/locationCity> <http://dbpedia.org/resource/Texas> .\n}"
    },
    {
        "question": "Name a show hosted by Brian Dunkleman and judged by Harry Connick, Jr.?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/presenter> <http://dbpedia.org/resource/Brian_Dunkleman> . ?uri <http://dbpedia.org/property/judges> <http://dbpedia.org/resource/Harry_Connick,_Jr.>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "entities": [
            "http://dbpedia.org/resource/Brian_Dunkleman",
            "http://dbpedia.org/resource/Harry_Connick_Jr."
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Brian_Dunkleman> -> <http://dbpedia.org/resource/Harry_Connick_Jr.>"
        ],
        "paths": "<http://dbpedia.org/resource/Brian_Dunkleman> -> <http://dbpedia.org/resource/Harry_Connick_Jr.>",
        "generated_query": "SELECT DISTINCT ?show WHERE {\n  ?show <http://dbpedia.org/ontology/presenter> <http://dbpedia.org/resource/Brian_Dunkleman> .\n  ?show <http://dbpedia.org/ontology/showJudge> ?judge .\n  <http://dbpedia.org/resource/Harry_Connick_Jr.> <http://dbpedia.org/ontology/wikiPageRedirects> ?judge .\n}"
    },
    {
        "question": "To which educational institute does Cornell University Press belong to?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cornell_University_Press> <http://dbpedia.org/ontology/parentCompany> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Cornell_University_Press"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Cornell_University_Press> -> EDUCATIONAL_INSTITUTE"
        ],
        "paths": "<http://dbpedia.org/resource/Cornell_University_Press> -> EDUCATIONAL_INSTITUTE",
        "generated_query": "SELECT DISTINCT ?educationalInstitute WHERE {\n  <http://dbpedia.org/resource/Cornell_University_Press> <http://dbpedia.org/property/parent> ?educationalInstitute .\n}"
    },
    {
        "question": "In which country's cuisine, ham is an important part?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/mainIngredient> <http://dbpedia.org/resource/Ham> . ?x <http://dbpedia.org/property/country> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Ham"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Ham> -> COUNTRY_CUISINE"
        ],
        "paths": "<http://dbpedia.org/resource/Ham> -> COUNTRY_CUISINE",
        "generated_query": "SELECT DISTINCT ?country WHERE {\n  ?dish <http://dbpedia.org/ontology/ingredient> <http://dbpedia.org/resource/Ham> .\n  ?dish <http://dbpedia.org/ontology/country> ?country .\n}"
    },
    {
        "question": "List the softwares which runs on Microsoft Windows and has license as Software as a service?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/operatingSystem> <http://dbpedia.org/resource/Microsoft_Windows> . ?uri <http://dbpedia.org/ontology/license> <http://dbpedia.org/resource/Software_as_a_service>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Software>}",
        "entities": [
            "http://dbpedia.org/resource/Software_as_a_service",
            "http://dbpedia.org/resource/Microsoft_Windows"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Software_as_a_service> -> <http://dbpedia.org/resource/Software>",
            "<http://dbpedia.org/resource/Software> -> <http://dbpedia.org/resource/Microsoft_Windows>"
        ],
        "paths": "<http://dbpedia.org/resource/Software_as_a_service> -> <http://dbpedia.org/resource/Software>, <http://dbpedia.org/resource/Software> -> <http://dbpedia.org/resource/Microsoft_Windows>",
        "generated_query": "SELECT DISTINCT ?software WHERE {\n  ?software <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Software_as_a_service> .\n  ?software <http://dbpedia.org/property/operatingSystem> <http://dbpedia.org/resource/Microsoft_Windows> .\n}"
    },
    {
        "question": "Which ppolitical party of Yashpal Kapur is also the owner of National Herald ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_National_Herald_(India)> <http://dbpedia.org/ontology/owner> ?uri. <http://dbpedia.org/resource/Yashpal_Kapur> <http://dbpedia.org/ontology/party> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Yashpal_Kapur",
            "http://dbpedia.org/resource/National_Herald"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Yashpal_Kapur> -> POLITICAL_PARTY -> <http://dbpedia.org/resource/National_Herald>"
        ],
        "paths": "<http://dbpedia.org/resource/Yashpal_Kapur> -> POLITICAL_PARTY -> <http://dbpedia.org/resource/National_Herald>",
        "generated_query": "SELECT DISTINCT ?party WHERE {\n  <http://dbpedia.org/resource/Yashpal_Kapur> <http://dbpedia.org/ontology/party> ?party .\n  \n  ?owner <http://dbpedia.org/ontology/owner> ?party .\n  \n  <http://dbpedia.org/resource/National_Herald> <http://dbpedia.org/ontology/wikiPageRedirects> ?redirectedEntity .\n  \n  ?owner <http://dbpedia.org/ontology/wikiPageWikiLink> ?link1 .\n  ?link1 <http://dbpedia.org/ontology/wikiPageWikiLink> ?redirectedEntity .\n}"
    },
    {
        "question": "Who all have been presenters on shows by the NBC?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/channel> <http://dbpedia.org/resource/NBC> . ?x <http://dbpedia.org/property/presenter> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "entities": [
            "http://dbpedia.org/resource/NBC"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/NBC> -> SHOW -> PRESENTER"
        ],
        "paths": "<http://dbpedia.org/resource/NBC> -> SHOW -> PRESENTER",
        "generated_query": "SELECT DISTINCT ?presenter WHERE {\n  ?show <http://dbpedia.org/property/network> <http://dbpedia.org/resource/NBC> .\n  ?show <http://dbpedia.org/ontology/presenter> ?presenter .\n}"
    },
    {
        "question": "Give me the list of cars which are the predecessor of Full Sized Cars?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/class> <http://dbpedia.org/resource/Full-size_car> . ?x <http://dbpedia.org/ontology/predecessor> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>}",
        "entities": [
            "http://dbpedia.org/resource/Full-size_car"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Full-size_car> -> predecessor"
        ],
        "paths": "<http://dbpedia.org/resource/Full-size_car> -> predecessor",
        "generated_query": "SELECT DISTINCT ?car WHERE {\n  {\n    ?car <http://dbpedia.org/ontology/predecessor> <http://dbpedia.org/resource/Full-size_car> .\n  }\n  UNION\n  {\n    ?car <http://dbpedia.org/property/predecessor> <http://dbpedia.org/resource/Full-size_car> .\n  }\n}"
    },
    {
        "question": "List the people with final resting place as Plymouth, Vermont and has Samuel W. McCall as predecessor?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/restingPlace> <http://dbpedia.org/resource/Plymouth,_Vermont> . ?uri <http://dbpedia.org/property/predecessor> <http://dbpedia.org/resource/Samuel_W._McCall>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "entities": [
            "http://dbpedia.org/resource/Samuel_W._McCall",
            "http://dbpedia.org/resource/Plymouth,_Vermont"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Plymouth,_Vermont> -> FINAL_RESTING_PLACE",
            "<http://dbpedia.org/resource/Samuel_W._McCall> -> PREDECESSOR"
        ],
        "paths": "<http://dbpedia.org/resource/Plymouth,_Vermont> -> FINAL_RESTING_PLACE, <http://dbpedia.org/resource/Samuel_W._McCall> -> PREDECESSOR",
        "generated_query": "SELECT DISTINCT ?person WHERE {\n  ?person <http://dbpedia.org/ontology/restingPlace> <http://dbpedia.org/resource/Plymouth,_Vermont> .\n  ?person <http://dbpedia.org/property/predecessor> <http://dbpedia.org/resource/Samuel_W._McCall> .\n}"
    },
    {
        "question": "What disease led to the demise of Letitia MacTavish Hargrave and Martino Martini ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Letitia_MacTavish_Hargrave> <http://dbpedia.org/ontology/deathCause> ?uri. <http://dbpedia.org/resource/Martino_Martini> <http://dbpedia.org/ontology/deathCause> ?uri . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Disease>}",
        "entities": [
            "http://dbpedia.org/resource/Martino_Martini",
            "http://dbpedia.org/resource/Letitia_MacTavish_Hargrave"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Martino_Martini> -> \"cause of death\"",
            "<http://dbpedia.org/resource/Letitia_MacTavish_Hargrave> -> \"cause of death\""
        ],
        "paths": "<http://dbpedia.org/resource/Martino_Martini> -> \"cause of death\", <http://dbpedia.org/resource/Letitia_MacTavish_Hargrave> -> \"cause of death\"",
        "generated_query": "SELECT DISTINCT ?disease WHERE {\n  {\n    <http://dbpedia.org/resource/Martino_Martini> <http://dbpedia.org/ontology/deathCause> ?disease .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Martino_Martini> <http://dbpedia.org/property/deathCause> ?disease .\n  }\n  \n  {\n    <http://dbpedia.org/resource/Letitia_MacTavish_Hargrave> <http://dbpedia.org/ontology/deathCause> ?disease .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Letitia_MacTavish_Hargrave> <http://dbpedia.org/property/deathCause> ?disease .\n  }\n}"
    },
    {
        "question": "What are some software which are written in languages that are run on Unix like OS?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/operatingSystem> <http://dbpedia.org/resource/Unix-like> . ?uri <http://dbpedia.org/property/programmingLanguage> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Software>}",
        "entities": [
            "http://dbpedia.org/resource/Unix",
            "http://dbpedia.org/resource/Software"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Software> -> <http://dbpedia.org/resource/Unix>"
        ],
        "paths": "<http://dbpedia.org/resource/Software> -> <http://dbpedia.org/resource/Unix>",
        "generated_query": "SELECT DISTINCT ?software WHERE {\n  ?software <http://dbpedia.org/property/operatingSystem> <http://dbpedia.org/resource/Unix> .\n  ?software <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Software> .\n}"
    },
    {
        "question": "List all the movies whose directors were born in Kenosha, Wisconsin?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Kenosha,_Wisconsin> . ?uri <http://dbpedia.org/property/director> ?x  . }",
        "entities": [
            "http://dbpedia.org/resource/Kenosha,_Wisconsin"
        ],
        "classes": [],
        "relations": [
            "MOVIE -> DIRECTOR -> <http://dbpedia.org/resource/Kenosha,_Wisconsin>"
        ],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?movie WHERE {\n  ?movie <http://dbpedia.org/ontology/director> ?director .\n  ?director <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Kenosha,_Wisconsin> .\n}"
    },
    {
        "question": "Does the St lawrence river start in Kingston, Ontario?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/Saint_Lawrence_River> <http://dbpedia.org/ontology/sourceMountain> <http://dbpedia.org/resource/Kingston,_Ontario> }",
        "entities": [
            "http://dbpedia.org/resource/Kingston,_Ontario",
            "http://dbpedia.org/resource/Ontario"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/St_Lawrence_River> -> <http://dbpedia.org/resource/Kingston,_Ontario>"
        ],
        "paths": "<http://dbpedia.org/resource/St_Lawrence_River> -> <http://dbpedia.org/resource/Kingston,_Ontario>",
        "generated_query": "ASK WHERE {\n  {\n    <http://dbpedia.org/resource/St_Lawrence_River> <http://dbpedia.org/ontology/wikiPageRedirects> ?river .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/St_Lawrence_River> <http://dbpedia.org/ontology/wikiPageWikiLink> ?river .\n  }\n  {\n    ?river <http://dbpedia.org/ontology/sourcePlace> <http://dbpedia.org/resource/Kingston,_Ontario> .\n  }\n  UNION\n  {\n    ?river <http://dbpedia.org/property/sourceLocation> <http://dbpedia.org/resource/Kingston,_Ontario> .\n  }\n}"
    },
    {
        "question": "What stadium's operator is Stan Kroenke",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/operator> <http://dbpedia.org/resource/Stan_Kroenke>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Stadium>}",
        "entities": [
            "http://dbpedia.org/resource/Stan_Kroenke"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Stan_Kroenke> -> STADIUM"
        ],
        "paths": "<http://dbpedia.org/resource/Stan_Kroenke> -> STADIUM",
        "generated_query": "SELECT DISTINCT ?stadium WHERE {\n  ?stadium <http://dbpedia.org/ontology/operator> <http://dbpedia.org/resource/Stan_Kroenke> .\n}"
    },
    {
        "question": "Is Mike Babcock the head coach of Toronto Maple Leafs?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/Toronto_Maple_Leafs> <http://dbpedia.org/property/headCoach> <http://dbpedia.org/resource/Mike_Babcock> }",
        "entities": [
            "http://dbpedia.org/resource/Mike_Babcock",
            "http://dbpedia.org/resource/Toronto_Maple_Leafs"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Mike_Babcock> -> <http://dbpedia.org/resource/Toronto_Maple_Leafs>"
        ],
        "paths": "<http://dbpedia.org/resource/Mike_Babcock> -> <http://dbpedia.org/resource/Toronto_Maple_Leafs>",
        "generated_query": "ASK WHERE {\n  <http://dbpedia.org/resource/Toronto_Maple_Leafs> <http://dbpedia.org/property/headCoach> <http://dbpedia.org/resource/Mike_Babcock> .\n}"
    },
    {
        "question": "Whose commanders are John Mc Ewen and Park Chunghee?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/John_McEwen> . ?uri <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Park_Chung-hee> . }",
        "entities": [
            "http://dbpedia.org/resource/Park_Chung-hee",
            "http://dbpedia.org/resource/John_McEwen"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Park_Chung-hee> -> COMMANDER_OF",
            "<http://dbpedia.org/resource/John_McEwen> -> COMMANDER_OF"
        ],
        "paths": "<http://dbpedia.org/resource/Park_Chung-hee> -> COMMANDER_OF, <http://dbpedia.org/resource/John_McEwen> -> COMMANDER_OF",
        "generated_query": "SELECT DISTINCT ?entity WHERE {\n  ?entity <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Park_Chung-hee> .\n  ?entity <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/John_McEwen> .\n}"
    },
    {
        "question": "Who gave guest appearances on the show which is the next episode after the Bombshell one?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/previousWork> <http://dbpedia.org/resource/Bombshell_(Smash)> . ?x <http://dbpedia.org/property/guests> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionEpisode>}",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?guest WHERE {\n  # No triples provided to construct the query\n}"
    },
    {
        "question": "What is manufactured by a company headed by Kazuo Hirai?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/keyPeople> <http://dbpedia.org/resource/Kazuo_Hirai> . ?uri <http://dbpedia.org/ontology/manufacturer> ?x  . }",
        "entities": [
            "http://dbpedia.org/resource/Kaz_Hirai"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Kaz_Hirai> -> COMPANY -> \"manufactured products\""
        ],
        "paths": "<http://dbpedia.org/resource/Kaz_Hirai> -> COMPANY -> \"manufactured products\"",
        "generated_query": "SELECT DISTINCT ?product WHERE {\n  # Find the company headed by Kazuo Hirai\n  {\n    ?company <http://dbpedia.org/ontology/keyPerson> <http://dbpedia.org/resource/Kazuo_Hirai> .\n  }\n  UNION\n  {\n    ?company <http://dbpedia.org/property/keyPeople> <http://dbpedia.org/resource/Kazuo_Hirai> .\n  }\n  \n  # Find products manufactured by that company\n  {\n    ?product <http://dbpedia.org/ontology/manufacturer> ?company .\n  }\n  UNION\n  {\n    ?product <http://dbpedia.org/property/manufacturer> ?company .\n  }\n}"
    },
    {
        "question": "Under which presidents have politicians from the Continental army served?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/branch> <http://dbpedia.org/resource/Continental_Army> . ?x <http://dbpedia.org/property/president> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Continental_Army"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Continental_Army> -> POLITICIAN -> PRESIDENT"
        ],
        "paths": "<http://dbpedia.org/resource/Continental_Army> -> POLITICIAN -> PRESIDENT",
        "generated_query": "SELECT DISTINCT ?president WHERE {\n  ?politician <http://dbpedia.org/ontology/militaryBranch> <http://dbpedia.org/resource/Continental_Army> .\n  ?politician <http://dbpedia.org/ontology/president> ?president .\n}"
    },
    {
        "question": "Philadelphia City Council is the governing body of which city?",
        "gold_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/governingBody> <http://dbpedia.org/resource/Philadelphia_City_Council> } ",
        "entities": [
            "http://dbpedia.org/resource/Philadelphia_City_Council"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Philadelphia_City_Council> -> CITY"
        ],
        "paths": "<http://dbpedia.org/resource/Philadelphia_City_Council> -> CITY",
        "generated_query": "SELECT DISTINCT ?cityName WHERE {\n  <http://dbpedia.org/resource/Philadelphia_City_Council> <http://dbpedia.org/ontology/location> ?cityHall .\n  ?cityHall <http://dbpedia.org/property/location> ?cityName .\n}"
    },
    {
        "question": "What are the binomial authority of Menetries's warbler?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Menetries's_warbler> <http://dbpedia.org/ontology/binomialAuthority> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Principle_of_bivalence",
            "http://dbpedia.org/resource/Carabus_menetriesi"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Carabus_menetriesi> -> \"binomial authority\""
        ],
        "paths": "<http://dbpedia.org/resource/Carabus_menetriesi> -> \"binomial authority\"",
        "generated_query": "SELECT DISTINCT ?authorityEntity ?authorityLiteral WHERE {\n  {\n    <http://dbpedia.org/resource/Carabus_menetriesi> <http://dbpedia.org/ontology/binomialAuthority> ?authorityEntity .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Carabus_menetriesi> <http://dbpedia.org/property/binomialAuthority> ?authorityLiteral .\n  }\n}"
    },
    {
        "question": "Name the movie which has music composed by Elliot Goldenthal and screenplay by Akiva Goldsman ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Elliot_Goldenthal> . ?uri <http://dbpedia.org/property/screenplay> <http://dbpedia.org/resource/Akiva_Goldsman>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "entities": [
            "http://dbpedia.org/resource/Akiva_Goldsman",
            "http://dbpedia.org/resource/Elliot_Goldenthal"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Akiva_Goldsman> -> MOVIE",
            "<http://dbpedia.org/resource/Elliot_Goldenthal> -> MOVIE"
        ],
        "paths": "<http://dbpedia.org/resource/Akiva_Goldsman> -> MOVIE, <http://dbpedia.org/resource/Elliot_Goldenthal> -> MOVIE",
        "generated_query": "SELECT DISTINCT ?movie WHERE {\n  ?movie <http://dbpedia.org/property/screenplay> <http://dbpedia.org/resource/Akiva_Goldsman> .\n  ?movie <http://dbpedia.org/ontology/musicComposer> <http://dbpedia.org/resource/Elliot_Goldenthal> .\n}"
    },
    {
        "question": "Name the fictional character whose relative are Duck family and Clan McDuck?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/relative> <http://dbpedia.org/resource/Duck_family_(Disney)> . ?uri <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Clan_McDuck>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
        "entities": [
            "http://dbpedia.org/resource/Clan_McDuck",
            "http://dbpedia.org/resource/Duck_family_(Disney)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Clan_McDuck> -> RELATIVE -> <http://dbpedia.org/resource/Duck_family_(Disney)>"
        ],
        "paths": "<http://dbpedia.org/resource/Clan_McDuck> -> RELATIVE -> <http://dbpedia.org/resource/Duck_family_(Disney)>",
        "generated_query": "SELECT DISTINCT ?character WHERE {\n  ?character <http://dbpedia.org/ontology/relative> ?relative1 .\n  ?relative1 <http://dbpedia.org/property/family> <http://dbpedia.org/resource/Clan_McDuck> .\n  \n  ?character <http://dbpedia.org/ontology/relative> ?relative2 .\n  ?relative2 <http://dbpedia.org/property/family> <http://dbpedia.org/resource/Duck_family_(Disney)> .\n}"
    },
    {
        "question": "Which university with athletics department in NCAA Division I Football Bowl Subdivision has nickname Tulane Green Wave ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/mouthMountain> <http://dbpedia.org/resource/St._Louis> . ?uri <http://dbpedia.org/ontology/rightTributary> <http://dbpedia.org/resource/Madison_River>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
        "entities": [
            "http://dbpedia.org/resource/NCAA_Division_I_Football_Bowl_Subdivision"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/NCAA_Division_I_Football_Bowl_Subdivision> -> UNIVERSITY -> \"nickname\""
        ],
        "paths": "<http://dbpedia.org/resource/NCAA_Division_I_Football_Bowl_Subdivision> -> UNIVERSITY -> \"nickname\"",
        "generated_query": "SELECT DISTINCT ?university WHERE {\n  ?university <http://dbpedia.org/property/athletics> <http://dbpedia.org/resource/NCAA_Division_I_Football_Bowl_Subdivision> .\n  ?university <http://dbpedia.org/property/nickname> <http://dbpedia.org/resource/Tulane_Green_Wave> .\n}"
    },
    {
        "question": "Which state does Jerome B. Chaffee belong ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jerome_B._Chaffee> <http://dbpedia.org/property/state> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Jerome_B._Chaffee"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Jerome_B._Chaffee> -> STATE"
        ],
        "paths": "<http://dbpedia.org/resource/Jerome_B._Chaffee> -> STATE",
        "generated_query": "SELECT DISTINCT ?state WHERE {\n  {\n    <http://dbpedia.org/resource/Jerome_B._Chaffee> <http://dbpedia.org/property/state> ?state .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Jerome_B._Chaffee> <http://dbpedia.org/ontology/region> ?state .\n  }\n}"
    },
    {
        "question": "In which of the parties that have governed over Rishikesh, does Govinda belong too?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Govinda_(actor)> <http://dbpedia.org/ontology/party> ?uri. <http://dbpedia.org/resource/Rishikesh> <http://dbpedia.org/ontology/leaderName> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Rishikesh",
            "http://dbpedia.org/resource/Govinda_(actor)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Govinda_(actor)> -> GOVERNING_PARTY",
            "<http://dbpedia.org/resource/Rishikesh> -> GOVERNING_PARTY"
        ],
        "paths": "<http://dbpedia.org/resource/Govinda_(actor)> -> GOVERNING_PARTY, <http://dbpedia.org/resource/Rishikesh> -> GOVERNING_PARTY",
        "generated_query": "SELECT DISTINCT ?party WHERE {\n  {\n    <http://dbpedia.org/resource/Govinda_(actor)> <http://dbpedia.org/ontology/party> ?party .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Govinda_(actor)> <http://dbpedia.org/property/party> ?party .\n  }\n  \n  {\n    <http://dbpedia.org/resource/Rishikesh> <http://dbpedia.org/ontology/governingBody> ?governingBody .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Rishikesh> <http://dbpedia.org/property/governingBody> ?governingBody .\n  }\n  \n  # No direct link between ?party and ?governingBody available in provided triples.\n  # Hence, no further triple patterns.\n}"
    },
    {
        "question": "What awards are won by the screenwriter of Lucky You?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lucky_You_(film)> <http://dbpedia.org/property/screenplay> ?x . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Lucky_You_(film)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Lucky_You_(film)> -> SCREENWRITER -> \"awards\""
        ],
        "paths": "<http://dbpedia.org/resource/Lucky_You_(film)> -> SCREENWRITER -> \"awards\"",
        "generated_query": "SELECT DISTINCT ?award WHERE {\n  <http://dbpedia.org/resource/Lucky_You_(film)> <http://dbpedia.org/ontology/writer> ?screenwriter .\n  {\n    ?screenwriter <http://dbpedia.org/ontology/award> ?award .\n  }\n  UNION\n  {\n    ?screenwriter <http://dbpedia.org/property/awards> ?award .\n  }\n}"
    },
    {
        "question": "Name  the Pole driver of 1994 Spanish Grand Prix ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/1994_Spanish_Grand_Prix> <http://dbpedia.org/property/poleDriver> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/1994_Spanish_Grand_Prix",
            "http://dbpedia.org/resource/Pole_position"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/1994_Spanish_Grand_Prix> -> <http://dbpedia.org/resource/Pole_position>"
        ],
        "paths": "<http://dbpedia.org/resource/1994_Spanish_Grand_Prix> -> <http://dbpedia.org/resource/Pole_position>",
        "generated_query": "SELECT DISTINCT ?driver WHERE {\n  <http://dbpedia.org/resource/1994_Spanish_Grand_Prix> <http://dbpedia.org/ontology/poleDriver> ?driver .\n  ?driver <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Pole_position> .\n}"
    },
    {
        "question": "Where did Georges Wolinski and Judson Huss die/",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Georges_Wolinski> <http://dbpedia.org/property/placeOfDeath> ?uri. <http://dbpedia.org/resource/Judson_Huss> <http://dbpedia.org/property/deathPlace> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Judson_Huss",
            "http://dbpedia.org/resource/Georges_Wolinski"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Georges_Wolinski> -> \"place of death\"",
            "<http://dbpedia.org/resource/Judson_Huss> -> \"place of death\""
        ],
        "paths": "<http://dbpedia.org/resource/Georges_Wolinski> -> \"place of death\", <http://dbpedia.org/resource/Judson_Huss> -> \"place of death\"",
        "generated_query": "SELECT DISTINCT ?person ?placeOfDeath WHERE {\n  VALUES ?person {\n    <http://dbpedia.org/resource/Georges_Wolinski>\n    <http://dbpedia.org/resource/Judson_Huss>\n  }\n  {\n    ?person <http://dbpedia.org/property/deathPlace> ?placeOfDeath .\n  }\n  UNION\n  {\n    ?person <http://dbpedia.org/property/placeOfDeath> ?placeOfDeath .\n  }\n}"
    },
    {
        "question": "What is the parent company of the airline whose hub is in Detroit?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/hubs> <http://dbpedia.org/resource/Detroit> . ?x <http://dbpedia.org/ontology/parentCompany> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airline>}",
        "entities": [
            "http://dbpedia.org/resource/Detroit"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Detroit> -> AIRLINE -> PARENT_COMPANY"
        ],
        "paths": "<http://dbpedia.org/resource/Detroit> -> AIRLINE -> PARENT_COMPANY",
        "generated_query": "SELECT DISTINCT ?parentCompany WHERE {\n  {\n    ?airline <http://dbpedia.org/property/hubs> <http://dbpedia.org/resource/Detroit> .\n  }\n  UNION\n  {\n    ?airline <http://dbpedia.org/ontology/hubAirport> <http://dbpedia.org/resource/Detroit> .\n  }\n  ?airline <http://dbpedia.org/ontology/parentCompany> ?parentCompany .\n}"
    },
    {
        "question": "What is the appliance which uses the central processing unit manufactured by Marvell Technology Group?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/cpu> <http://dbpedia.org/resource/Marvell_Technology_Group>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/InformationAppliance>}",
        "entities": [
            "http://dbpedia.org/resource/Marvell_Technology"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Marvell_Technology> -> APPLIANCE"
        ],
        "paths": "<http://dbpedia.org/resource/Marvell_Technology> -> APPLIANCE",
        "generated_query": "SELECT DISTINCT ?appliance WHERE {\n  <http://dbpedia.org/resource/Marvell_Technology> <http://dbpedia.org/ontology/wikiPageWikiLink> ?cpu .\n  ?appliance <http://dbpedia.org/ontology/cpu> ?cpu .\n}"
    },
    {
        "question": "Give me all magazines whose founder died in Berkeley, California?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Berkeley,_California> . ?uri <http://dbpedia.org/ontology/founder> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Magazine>}",
        "entities": [
            "http://dbpedia.org/resource/Berkeley,_California"
        ],
        "classes": [],
        "relations": [
            "MAGAZINE -> FOUNDER -> <http://dbpedia.org/resource/Berkeley,_California>"
        ],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?magazine WHERE {\n  ?magazine <http://dbpedia.org/ontology/founder> ?founder .\n  ?founder <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Berkeley,_California> .\n}"
    },
    {
        "question": "Which technological products were manufactured by Foxconn?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/manufacturer> <http://dbpedia.org/resource/Foxconn>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/InformationAppliance>}",
        "entities": [
            "http://dbpedia.org/resource/Foxconn"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Foxconn> -> TECHNOLOGICAL_PRODUCT"
        ],
        "paths": "<http://dbpedia.org/resource/Foxconn> -> TECHNOLOGICAL_PRODUCT",
        "generated_query": "SELECT DISTINCT ?product WHERE {\n  ?product <http://dbpedia.org/ontology/manufacturer> <http://dbpedia.org/resource/Foxconn> .\n}"
    },
    {
        "question": "Is George Lucas the cinematographer of 6-18-67?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/6-18-67> <http://dbpedia.org/property/cinematography> <http://dbpedia.org/resource/George_Lucas> }",
        "entities": [
            "http://dbpedia.org/resource/6-18-67",
            "http://dbpedia.org/resource/George_Lucas"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/6-18-67> -> <http://dbpedia.org/resource/George_Lucas>"
        ],
        "paths": "<http://dbpedia.org/resource/6-18-67> -> <http://dbpedia.org/resource/George_Lucas>",
        "generated_query": "ASK WHERE {\n  {\n    <http://dbpedia.org/resource/6-18-67> <http://dbpedia.org/property/cinematography> <http://dbpedia.org/resource/George_Lucas> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/6-18-67> <http://dbpedia.org/ontology/cinematography> <http://dbpedia.org/resource/George_Lucas> .\n  }\n}"
    },
    {
        "question": "Whose predecessor had Jenny Macklin as a deputy ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/deputy> <http://dbpedia.org/resource/Jenny_Macklin> . ?uri <http://dbpedia.org/property/predecessor> ?x  . }",
        "entities": [
            "http://dbpedia.org/resource/Jenny_Macklin"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Jenny_Macklin> -> PREDECESSOR"
        ],
        "paths": "<http://dbpedia.org/resource/Jenny_Macklin> -> PREDECESSOR",
        "generated_query": "SELECT DISTINCT ?person WHERE {\n  ?person <http://dbpedia.org/ontology/predecessor> ?predecessor .\n  ?predecessor <http://dbpedia.org/ontology/deputy> <http://dbpedia.org/resource/Jenny_Macklin> .\n}"
    },
    {
        "question": "How many cars are similar to the ones assembled in the Jefferson North Assembly?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/property/assembly> <http://dbpedia.org/resource/Jefferson_North_Assembly> . ?x <http://dbpedia.org/property/related> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Detroit_Assembly_Complex_\u2013_Jefferson"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Detroit_Assembly_Complex_\u2013_Jefferson> -> SIMILAR_CAR -> \"count\""
        ],
        "paths": "",
        "generated_query": "SELECT (COUNT(DISTINCT ?car) AS ?count)\nWHERE {\n  <http://dbpedia.org/resource/Detroit_Assembly_Complex_\u2013_Jefferson> ?p ?car .\n}"
    },
    {
        "question": "Count the number of region of AN/FSQ-7 Combat Direction Central?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { <http://dbpedia.org/resource/AN/FSQ-7_Combat_Direction_Central> <http://dbpedia.org/ontology/region> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/AN/FSQ-7_Combat_Direction_Central"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/AN/FSQ-7_Combat_Direction_Central> -> \"region\""
        ],
        "paths": "<http://dbpedia.org/resource/AN/FSQ-7_Combat_Direction_Central> -> \"region\"",
        "generated_query": "SELECT (COUNT(DISTINCT ?region) AS ?regionCount)\nWHERE {\n  <http://dbpedia.org/resource/AN/FSQ-7_Combat_Direction_Central> <http://dbpedia.org/ontology/region> ?region .\n}"
    },
    {
        "question": "What are the common houses of US Congress and the Kansas Legislature?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/United_States_Congress> <http://dbpedia.org/property/houses> ?uri. <http://dbpedia.org/resource/Kansas_Legislature> <http://dbpedia.org/ontology/house> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Kansas_Legislature",
            "http://dbpedia.org/resource/United_States_Congress"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Kansas_Legislature> -> COMMON_HOUSES",
            "<http://dbpedia.org/resource/United_States_Congress> -> COMMON_HOUSES"
        ],
        "paths": "<http://dbpedia.org/resource/Kansas_Legislature> -> COMMON_HOUSES, <http://dbpedia.org/resource/United_States_Congress> -> COMMON_HOUSES",
        "generated_query": "SELECT DISTINCT ?commonHouse WHERE {\n  {\n    {\n      <http://dbpedia.org/resource/Kansas_Legislature> <http://dbpedia.org/ontology/house> ?commonHouse .\n    }\n    UNION\n    {\n      <http://dbpedia.org/resource/Kansas_Legislature> <http://dbpedia.org/property/houses> ?commonHouse .\n    }\n  }\n  {\n    {\n      <http://dbpedia.org/resource/United_States_Congress> <http://dbpedia.org/ontology/house> ?commonHouse .\n    }\n    UNION\n    {\n      <http://dbpedia.org/resource/United_States_Congress> <http://dbpedia.org/property/houses> ?commonHouse .\n    }\n  }\n}"
    },
    {
        "question": "Was John Muir the first one to ascend one of the peaks in the cathedral peak?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/Cathedral_Peak_(California)> <http://dbpedia.org/ontology/firstAscentPerson> <http://dbpedia.org/resource/John_Muir> }",
        "entities": [
            "http://dbpedia.org/resource/John_Muir"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/John_Muir> -> \"ascended peak\""
        ],
        "paths": "<http://dbpedia.org/resource/John_Muir> -> \"ascended peak\"",
        "generated_query": "ASK WHERE {\n  <http://dbpedia.org/resource/Cathedral_Peak_(California)> <http://dbpedia.org/ontology/firstAscentPerson> <http://dbpedia.org/resource/John_Muir> .\n}"
    },
    {
        "question": "From how many different places have people gone to the Harward Medical School?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/ontology/institution> <http://dbpedia.org/resource/Harvard_Medical_School> . ?x <http://dbpedia.org/ontology/birthPlace> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Harvard_Medical_School"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Harvard_Medical_School> -> \"people\" -> \"place of origin\""
        ],
        "paths": "<http://dbpedia.org/resource/Harvard_Medical_School> -> \"people\" -> \"place of origin\"",
        "generated_query": "SELECT (COUNT(DISTINCT ?person) AS ?count)\nWHERE {\n  ?person <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Harvard_Medical_School> .\n}"
    },
    {
        "question": "Name the television show where Mona Marshall has given voice and is distributed by Comedy Central?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/Mona_Marshall> . ?uri <http://dbpedia.org/property/distributor> <http://dbpedia.org/resource/Comedy_Central>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "entities": [
            "http://dbpedia.org/resource/Mona_Marshall",
            "http://dbpedia.org/resource/Comedy_Central"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Mona_Marshall> -> <http://dbpedia.org/resource/Comedy_Central>"
        ],
        "paths": "<http://dbpedia.org/resource/Mona_Marshall> -> <http://dbpedia.org/resource/Comedy_Central>",
        "generated_query": "SELECT DISTINCT ?show WHERE {\n  ?show <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/Mona_Marshall> .\n  ?show <http://dbpedia.org/ontology/distributor> <http://dbpedia.org/resource/Comedy_Central> .\n}"
    },
    {
        "question": "What are Jerry Bock's musicals based upon?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Jerry_Bock> . ?x <http://dbpedia.org/ontology/basedOn> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Musical>}",
        "entities": [
            "http://dbpedia.org/resource/Jerry_Bock"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Jerry_Bock> -> MUSICAL -> \"based upon\""
        ],
        "paths": "<http://dbpedia.org/resource/Jerry_Bock> -> MUSICAL -> \"based upon\"",
        "generated_query": "SELECT DISTINCT ?musical ?basedOn WHERE {\n  ?musical <http://dbpedia.org/ontology/musicBy> <http://dbpedia.org/resource/Jerry_Bock> .\n  ?musical <http://dbpedia.org/ontology/basedOn> ?basedOn .\n}"
    },
    {
        "question": "Give me list of people who were the first to climb a peak in the Yosemite park?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/Yosemite_National_Park> . ?x <http://dbpedia.org/ontology/firstAscentPerson> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Yosemite_National_Park"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Yosemite_National_Park> -> FIRST_CLIMBER"
        ],
        "paths": "<http://dbpedia.org/resource/Yosemite_National_Park> -> FIRST_CLIMBER",
        "generated_query": "SELECT DISTINCT ?firstClimber WHERE {\n  ?peak <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/Yosemite_National_Park> .\n  ?peak <http://dbpedia.org/ontology/firstAscentPerson> ?firstClimber .\n}"
    },
    {
        "question": "What is Naval Support Activity Naples a part of?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Naval_Support_Activity_Naples> <http://dbpedia.org/ontology/type> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Naval_Support_Activity_Naples"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Naval_Support_Activity_Naples> -> \"part of\""
        ],
        "paths": "<http://dbpedia.org/resource/Naval_Support_Activity_Naples> -> \"part of\"",
        "generated_query": "SELECT DISTINCT ?partOf WHERE {\n  <http://dbpedia.org/resource/Naval_Support_Activity_Naples> <http://dbpedia.org/ontology/wikiPageWikiLink> ?partOf .\n  ?partOf <http://dbpedia.org/property/commandStructure> ?someEntity .\n}"
    },
    {
        "question": "Who has allegiance is Colony of Virginia and buried in Montpelier?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/allegiance> <http://dbpedia.org/resource/Colony_of_Virginia> . ?uri <http://dbpedia.org/property/restingplace> <http://dbpedia.org/resource/Montpelier_(Orange,_Virginia)>  . }",
        "entities": [
            "http://dbpedia.org/resource/Colony_of_Virginia",
            "http://dbpedia.org/resource/Montpelier,_Vermont"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Colony_of_Virginia> -> PERSON -> <http://dbpedia.org/resource/Montpelier,_Vermont>"
        ],
        "paths": "<http://dbpedia.org/resource/Colony_of_Virginia> -> PERSON -> <http://dbpedia.org/resource/Montpelier,_Vermont>",
        "generated_query": "SELECT DISTINCT ?person WHERE {\n  ?person <http://dbpedia.org/property/allegiance> <http://dbpedia.org/resource/Colony_of_Virginia> .\n  \n  {\n    ?person <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Montpelier,_Vermont> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Montpelier,_Vermont> <http://dbpedia.org/ontology/wikiPageWikiLink> ?person .\n  }\n}"
    },
    {
        "question": "Was Tim Gunn a guest on The Broken Code?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/The_Broken_Code> <http://dbpedia.org/property/guests> <http://dbpedia.org/resource/Tim_Gunn> }",
        "entities": [
            "http://dbpedia.org/resource/Brad_Meltzer's_Decoded",
            "http://dbpedia.org/resource/Tim_Gunn"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Tim_Gunn> -> <http://dbpedia.org/resource/Brad_Meltzer's_Decoded>"
        ],
        "paths": "<http://dbpedia.org/resource/Tim_Gunn> -> <http://dbpedia.org/resource/Brad_Meltzer's_Decoded>",
        "generated_query": "ASK WHERE {\n  <http://dbpedia.org/resource/Tim_Gunn> <http://dbpedia.org/property/wikiPageUsesTemplate> ?template .\n  <http://dbpedia.org/resource/Brad_Meltzer's_Decoded> <http://dbpedia.org/property/wikiPageUsesTemplate> ?template .\n}"
    },
    {
        "question": "What is the successor of PlayStation 4",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/successor> <http://dbpedia.org/resource/PlayStation_4>  . }",
        "entities": [
            "http://dbpedia.org/resource/PlayStation_4"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/PlayStation_4> -> \"successor\""
        ],
        "paths": "<http://dbpedia.org/resource/PlayStation_4> -> \"successor\"",
        "generated_query": "SELECT DISTINCT ?successor WHERE {\n  ?successor <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/PlayStation_4> .\n}"
    },
    {
        "question": "What is the sovereign state of the Dafydd Benfras where Jasmine Lowson is also citizen of ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dafydd_Benfras> <http://dbpedia.org/ontology/country> ?uri. <http://dbpedia.org/resource/Jasmine_Lowson> <http://dbpedia.org/ontology/citizenship> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Jasmine_Lowson",
            "http://dbpedia.org/resource/Dafydd_Benfras"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Jasmine_Lowson> -> SOVEREIGN_STATE",
            "<http://dbpedia.org/resource/Dafydd_Benfras> -> SOVEREIGN_STATE"
        ],
        "paths": "<http://dbpedia.org/resource/Jasmine_Lowson> -> SOVEREIGN_STATE, <http://dbpedia.org/resource/Dafydd_Benfras> -> SOVEREIGN_STATE",
        "generated_query": "SELECT DISTINCT ?state WHERE {\n  <http://dbpedia.org/resource/Dafydd_Benfras> <http://dbpedia.org/ontology/country> ?state .\n  <http://dbpedia.org/resource/Jasmine_Lowson> <http://dbpedia.org/ontology/citizenship> ?state .\n}"
    },
    {
        "question": "Who did their highschool from a school whose mascot was a fighting tiger?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/mascot> <http://dbpedia.org/resource/Fighting_Tiger> . ?uri <http://dbpedia.org/ontology/highschool> ?x  . }",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?person WHERE {\n}"
    },
    {
        "question": "Which destination of Emerald Air is also the city served by houston Fort Bend Airport ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Emerald_Air_(United_States)> <http://dbpedia.org/ontology/destination> ?uri. <http://dbpedia.org/resource/Houston_Fort_Bend_Airport> <http://dbpedia.org/property/cityServed> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Houston_Fort_Bend_Airport",
            "http://dbpedia.org/resource/Emerald_Airlines"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Emerald_Airlines> -> <http://dbpedia.org/resource/Houston_Fort_Bend_Airport>"
        ],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?city WHERE {\n  <http://dbpedia.org/resource/Emerald_Airlines> <http://dbpedia.org/ontology/destination> ?city .\n  <http://dbpedia.org/resource/Houston_Fort_Bend_Airport> <http://dbpedia.org/ontology/city> ?city .\n}"
    },
    {
        "question": "name the region served by Jerusalem Institue of Justice which was also the conflict region in GazaIsrael ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jerusalem_Institute_of_Justice> <http://dbpedia.org/ontology/service> ?uri. <http://dbpedia.org/resource/Gaza\u2013Israel_conflict> <http://dbpedia.org/property/result> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Gaza_Strip",
            "http://dbpedia.org/resource/Jerusalem_Institute_of_Justice"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Jerusalem_Institute_of_Justice> -> <http://dbpedia.org/resource/Gaza_Strip>"
        ],
        "paths": "<http://dbpedia.org/resource/Jerusalem_Institute_of_Justice> -> <http://dbpedia.org/resource/Gaza_Strip>",
        "generated_query": "SELECT DISTINCT ?region WHERE {\n  <http://dbpedia.org/resource/Jerusalem_Institute_of_Justice> <http://dbpedia.org/ontology/service> ?region .\n  ?region <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Gaza_Strip> .\n}"
    },
    {
        "question": "Name the company whose key person is Raymond Conner and produces Boeing CH-47 Chinook?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/keyPeople> <http://dbpedia.org/resource/Raymond_Conner> . ?uri <http://dbpedia.org/property/products> <http://dbpedia.org/resource/Boeing_CH-47_Chinook>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
        "entities": [
            "http://dbpedia.org/resource/Raymond_Conner",
            "http://dbpedia.org/resource/Boeing_CH-47_Chinook"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Raymond_Conner> -> COMPANY",
            "<http://dbpedia.org/resource/Boeing_CH-47_Chinook> -> COMPANY"
        ],
        "paths": "<http://dbpedia.org/resource/Raymond_Conner> -> COMPANY, <http://dbpedia.org/resource/Boeing_CH-47_Chinook> -> COMPANY",
        "generated_query": "SELECT DISTINCT ?company WHERE {\n  ?company <http://dbpedia.org/ontology/keyPerson> <http://dbpedia.org/resource/Raymond_Conner> .\n  {\n    <http://dbpedia.org/resource/Boeing_CH-47_Chinook> <http://dbpedia.org/ontology/manufacturer> ?company .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Boeing_CH-47_Chinook> <http://dbpedia.org/property/manufacturer> ?company .\n  }\n}"
    },
    {
        "question": "What is the total number of professions in which someone who has suicided worked?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/property/deathCause> <http://dbpedia.org/resource/Suicide> . ?x <http://dbpedia.org/ontology/occupation> ?uri  . }",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT (COUNT(DISTINCT ?profession) AS ?totalProfessions) WHERE {\n  ?person <http://dbpedia.org/ontology/deathCause> <http://dbpedia.org/resource/Suicide> .\n  ?person <http://dbpedia.org/ontology/profession> ?profession .\n}"
    },
    {
        "question": "How many golf players are there in Arizona State Sun Devils ?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE {?uri <http://dbpedia.org/ontology/college> <http://dbpedia.org/resource/Arizona_State_Sun_Devils>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/GolfPlayer>}",
        "entities": [
            "http://dbpedia.org/resource/Arizona_State_Sun_Devils",
            "http://dbpedia.org/resource/Golf"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Arizona_State_Sun_Devils> -> <http://dbpedia.org/resource/Golf>"
        ],
        "paths": "<http://dbpedia.org/resource/Arizona_State_Sun_Devils> -> <http://dbpedia.org/resource/Golf>",
        "generated_query": "SELECT (COUNT(DISTINCT ?player) AS ?count)\nWHERE {\n  ?player <http://dbpedia.org/property/college> <http://dbpedia.org/resource/Arizona_State_Sun_Devils> .\n  ?player <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Golf> .\n}"
    },
    {
        "question": "Count the number of characters in Batman Live?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { <http://dbpedia.org/resource/Batman_Live> <http://dbpedia.org/property/characters> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCharacter>}",
        "entities": [
            "http://dbpedia.org/resource/Batman_Live"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Batman_Live> -> \"characters\""
        ],
        "paths": "<http://dbpedia.org/resource/Batman_Live> -> \"characters\"",
        "generated_query": "SELECT (COUNT(DISTINCT ?character) AS ?characterCount)\nWHERE {\n  <http://dbpedia.org/resource/Batman_Live> <http://dbpedia.org/property/characters> ?character .\n  ?character <http://purl.org/dc/terms/subject> ?category .\n}"
    },
    {
        "question": "List the services provided by the company which provides Microsoft azure as one of the service ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/services> <http://dbpedia.org/resource/Microsoft_Azure> . ?x <http://dbpedia.org/property/services> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
        "entities": [
            "http://dbpedia.org/resource/Microsoft_Azure"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Microsoft_Azure> -> COMPANY -> \"services\""
        ],
        "paths": "<http://dbpedia.org/resource/Microsoft_Azure> -> COMPANY -> \"services\"",
        "generated_query": "SELECT DISTINCT ?service WHERE {\n  {\n    ?company <http://dbpedia.org/property/products> <http://dbpedia.org/resource/Microsoft_Azure> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Microsoft_Azure> <http://dbpedia.org/ontology/developer> ?company .\n  }\n  ?company <http://dbpedia.org/ontology/service> ?service .\n}"
    },
    {
        "question": "What are some team members of the team based in Camp Nou?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/homeStadium> <http://dbpedia.org/resource/Camp_Nou> . ?x <http://dbpedia.org/property/name> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Camp_Nou"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Camp_Nou> -> TEAM -> \"member\""
        ],
        "paths": "<http://dbpedia.org/resource/Camp_Nou> -> TEAM -> \"member\"",
        "generated_query": "SELECT DISTINCT ?member WHERE {\n  <http://dbpedia.org/resource/Camp_Nou> <http://dbpedia.org/ontology/tenant> ?team .\n  {\n    ?member <http://dbpedia.org/ontology/team> ?team .\n  }\n  UNION\n  {\n    ?member <http://dbpedia.org/property/clubs> ?team .\n  }\n}"
    },
    {
        "question": "Which universities are also known as the Tulane Green wave?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/nickname> <http://dbpedia.org/resource/Tulane_Green_Wave>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
        "entities": [
            "http://dbpedia.org/resource/Tulane_Green_Wave"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Tulane_Green_Wave> -> <http://dbpedia.org/ontology/University>"
        ],
        "paths": "<http://dbpedia.org/resource/Tulane_Green_Wave> -> <http://dbpedia.org/ontology/University>",
        "generated_query": "SELECT DISTINCT ?university WHERE {\n  ?university <http://dbpedia.org/property/nickname> <http://dbpedia.org/resource/Tulane_Green_Wave> .\n  ?university <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University> .\n}"
    },
    {
        "question": "What is the branch of the politicians whose governor is Bill Clements?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/governor> <http://dbpedia.org/resource/Bill_Clements> . ?x <http://dbpedia.org/property/branch> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>}",
        "entities": [
            "http://dbpedia.org/resource/Bill_Clements"
        ],
        "classes": [],
        "relations": [
            "POLITICIAN -> \"branch\"",
            "<http://dbpedia.org/resource/Bill_Clements> -> POLITICIAN"
        ],
        "paths": "<http://dbpedia.org/resource/Bill_Clements> -> POLITICIAN",
        "generated_query": "SELECT DISTINCT ?branch WHERE {\n  ?politician <http://dbpedia.org/property/governor> <http://dbpedia.org/resource/Bill_Clements> .\n  {\n    ?politician <http://dbpedia.org/ontology/party> ?branch .\n  }\n  UNION\n  {\n    ?politician <http://dbpedia.org/property/party> ?branch .\n  }\n}"
    },
    {
        "question": "Who composed the episode after which came Butter's Very own Episode?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/subsequentWork> <http://dbpedia.org/resource/Butters'_Very_Own_Episode> . ?x <http://dbpedia.org/ontology/musicComposer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionEpisode>}",
        "entities": [
            "http://dbpedia.org/resource/Butters'_Very_Own_Episode"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Butters'_Very_Own_Episode> -> NEXT_EPISODE -> \"composer\""
        ],
        "paths": "<http://dbpedia.org/resource/Butters'_Very_Own_Episode> -> NEXT_EPISODE -> \"composer\"",
        "generated_query": "SELECT DISTINCT ?composer WHERE {\n  ?prevEpisode <http://dbpedia.org/property/next> <http://dbpedia.org/resource/Butters'_Very_Own_Episode> .\n  ?prevEpisode <http://dbpedia.org/property/writer> ?composer .\n}"
    },
    {
        "question": "What is the location country of Teperberg 1870 ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Teperberg_1870> <http://dbpedia.org/property/locationCountry> ?uri } ",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?country WHERE {\n    <http://example.org/resource/Teperberg_1870> ?p ?country .\n}"
    },
    {
        "question": "List the software developed by Shawn Fanning ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Shawn_Fanning>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Software>}",
        "entities": [
            "http://dbpedia.org/resource/Shawn_Fanning"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Shawn_Fanning> -> \"software developed\""
        ],
        "paths": "<http://dbpedia.org/resource/Shawn_Fanning> -> \"software developed\"",
        "generated_query": "SELECT DISTINCT ?software WHERE {\n  <http://dbpedia.org/resource/Shawn_Fanning> <http://dbpedia.org/property/notableWorks> ?software .\n  {\n    ?software <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/Shawn_Fanning> .\n  }\n  UNION\n  {\n    ?software <http://dbpedia.org/property/developer> <http://dbpedia.org/resource/Shawn_Fanning> .\n  }\n}"
    },
    {
        "question": "What is the stylistic origin of the music genres where the Bass guitar is important?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/instruments> <http://dbpedia.org/resource/Bass_guitar> . ?x <http://dbpedia.org/ontology/stylisticOrigin> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicGenre>}",
        "entities": [
            "http://dbpedia.org/resource/Bass_guitar"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Bass_guitar> -> MUSIC_GENRE -> \"stylistic origin\""
        ],
        "paths": "<http://dbpedia.org/resource/Bass_guitar> -> MUSIC_GENRE -> \"stylistic origin\"",
        "generated_query": "SELECT DISTINCT ?stylisticOrigin WHERE {\n  ?entity <http://dbpedia.org/ontology/instrument> <http://dbpedia.org/resource/Bass_guitar> .\n  ?entity <http://dbpedia.org/ontology/genre> ?genre .\n  ?genre <http://dbpedia.org/ontology/stylisticOrigin> ?stylisticOrigin .\n}"
    },
    {
        "question": "What are the other notable work of the executive producer of The Runaway Bride episode of Doctor Who?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Runaway_Bride_(Doctor_Who)> <http://dbpedia.org/ontology/executiveProducer> ?x . ?x <http://dbpedia.org/property/notableworks> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/The_Runaway_Bride_(Doctor_Who)",
            "http://dbpedia.org/resource/Doctor_Who"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/The_Runaway_Bride_(Doctor_Who)> -> EXECUTIVE_PRODUCER"
        ],
        "paths": "<http://dbpedia.org/resource/The_Runaway_Bride_(Doctor_Who)> -> EXECUTIVE_PRODUCER",
        "generated_query": "SELECT DISTINCT ?work WHERE {\n  <http://dbpedia.org/resource/The_Runaway_Bride_(Doctor_Who)> <http://dbpedia.org/property/executiveProducer> ?producer .\n  \n  {\n    ?producer <http://dbpedia.org/property/notableworks> ?work .\n  }\n  UNION\n  {\n    ?producer <http://dbpedia.org/property/notableWorks> ?work .\n  }\n  \n  FILTER(?work != <http://dbpedia.org/resource/The_Runaway_Bride_(Doctor_Who)>)\n}"
    },
    {
        "question": "Who was the voice actor of allen walker also gave voice to kimihiro watanuki?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Allen_Walker> <http://dbpedia.org/ontology/voice> ?uri. <http://dbpedia.org/resource/Kimihiro_Watanuki> <http://dbpedia.org/ontology/voice> ?uri . }",
        "entities": [
            "http://dbpedia.org/resource/Kimihiro_Watanuki",
            "http://dbpedia.org/resource/Allen_Walker"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Allen_Walker> -> \"voice actor\"",
            "<http://dbpedia.org/resource/Kimihiro_Watanuki> -> \"voice actor\""
        ],
        "paths": "<http://dbpedia.org/resource/Allen_Walker> -> \"voice actor\", <http://dbpedia.org/resource/Kimihiro_Watanuki> -> \"voice actor\"",
        "generated_query": "SELECT DISTINCT ?actor WHERE {\n  <http://dbpedia.org/resource/Allen_Walker> <http://dbpedia.org/property/voicedBy> ?actor .\n  <http://dbpedia.org/resource/Kimihiro_Watanuki> <http://dbpedia.org/property/voicedBy> ?actor .\n}"
    },
    {
        "question": "Name the office holder whose final resting place is North Bend and was part of Siege of fort recovery conflict ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Siege_of_Fort_Recovery> . ?uri <http://dbpedia.org/property/restingplace> <http://dbpedia.org/resource/North_Bend,_Ohio>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
        "entities": [
            "http://dbpedia.org/resource/North_Bend,_Washington",
            "http://dbpedia.org/resource/Defense_of_Brest_Fortress"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Defense_of_Brest_Fortress> -> <http://dbpedia.org/resource/North_Bend,_Washington>"
        ],
        "paths": "<http://dbpedia.org/resource/Defense_of_Brest_Fortress> -> <http://dbpedia.org/resource/North_Bend,_Washington>",
        "generated_query": "SELECT DISTINCT ?officeHolder WHERE {\n  ?officeHolder <http://dbpedia.org/property/wikiPageUsesTemplate> <http://dbpedia.org/resource/Template:Reflist> .\n  <http://dbpedia.org/resource/Defense_of_Brest_Fortress> <http://dbpedia.org/property/wikiPageUsesTemplate> <http://dbpedia.org/resource/Template:Reflist> .\n  <http://dbpedia.org/resource/North_Bend,_Washington> <http://dbpedia.org/property/wikiPageUsesTemplate> <http://dbpedia.org/resource/Template:Reflist> .\n}"
    },
    {
        "question": "What type of engines are utilised by Purvis Eureka?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Purvis_Eureka> <http://dbpedia.org/property/engine> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Purvis_Eureka"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Purvis_Eureka> -> \"engine type\""
        ],
        "paths": "<http://dbpedia.org/resource/Purvis_Eureka> -> \"engine type\"",
        "generated_query": "SELECT DISTINCT ?engineType WHERE {\n  {\n    <http://dbpedia.org/resource/Purvis_Eureka> <http://dbpedia.org/ontology/engine> ?engine .\n    ?engine <http://dbpedia.org/ontology/configuration> ?engineType .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Purvis_Eureka> <http://dbpedia.org/property/engine> ?engineType .\n  }\n}"
    },
    {
        "question": "Who edited Easy street ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Easy_Street_(film)> <http://dbpedia.org/ontology/editing> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Easy_Street_(Alan_Rankin_Jones_song)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Easy_Street_(Alan_Rankin_Jones_song)> -> \"editor\""
        ],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?editor WHERE {\n  <http://dbpedia.org/resource/Easy_Street_(Alan_Rankin_Jones_song)> ?p ?editor .\n  FILTER(CONTAINS(LCASE(STR(?p)), \"editor\"))\n}"
    },
    {
        "question": "Who were involved in the wars where Jonathan Haskell battled?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jonathan_Haskell> <http://dbpedia.org/property/battles> ?x . ?x <http://dbpedia.org/property/combatant> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Jonathan_Haskell"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Jonathan_Haskell> -> WARS -> INVOLVED_PARTIES"
        ],
        "paths": "<http://dbpedia.org/resource/Jonathan_Haskell> -> WARS -> INVOLVED_PARTIES",
        "generated_query": "SELECT DISTINCT ?involved WHERE {\n  <http://dbpedia.org/resource/Jonathan_Haskell> <http://dbpedia.org/property/battles> ?battle .\n  ?battle <http://dbpedia.org/ontology/isPartOfMilitaryConflict> ?war .\n  \n  ?involved <http://dbpedia.org/ontology/battle> ?war .\n  ?involved <http://dbpedia.org/ontology/country> ?country .\n}"
    },
    {
        "question": "In which city was the film star of Singhasan Battisi born ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Singhasan_Battisi_(TV_series)> <http://dbpedia.org/ontology/starring> ?x . ?x <http://dbpedia.org/property/birthPlace> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Singhasan_Battisi"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Singhasan_Battisi> -> STAR -> \"birth city\""
        ],
        "paths": "<http://dbpedia.org/resource/Singhasan_Battisi> -> STAR -> \"birth city\"",
        "generated_query": "SELECT DISTINCT ?birthPlace WHERE {\n  <http://dbpedia.org/resource/Singhasan_Battisi> <http://dbpedia.org/ontology/wikiPageWikiLink> ?star .\n  {\n    ?star <http://dbpedia.org/ontology/birthPlace> ?birthPlace .\n  }\n  UNION\n  {\n    ?star <http://dbpedia.org/property/birthPlace> ?birthPlace .\n  }\n}"
    },
    {
        "question": "What are the reason served by Toll Global Express which is also the country of LPGA ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Toll_Global_Express> <http://dbpedia.org/ontology/regionServed> ?uri. <http://dbpedia.org/resource/LPGA> <http://dbpedia.org/ontology/country> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Toll_Group",
            "http://dbpedia.org/resource/LPGA"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/LPGA> -> \"country\"",
            "<http://dbpedia.org/resource/Toll_Group> -> \"reason served\""
        ],
        "paths": "<http://dbpedia.org/resource/LPGA> -> \"country\", <http://dbpedia.org/resource/Toll_Group> -> \"reason served\"",
        "generated_query": "SELECT DISTINCT ?country WHERE {\n  <http://dbpedia.org/resource/LPGA> <http://dbpedia.org/ontology/country> ?country .\n  <http://dbpedia.org/resource/Toll_Group> <http://dbpedia.org/ontology/regionServed> ?country .\n}"
    },
    {
        "question": "List the territory of Tonkin Campaign ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tonkin_Campaign> <http://dbpedia.org/ontology/territory> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Tonkin"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Tonkin> -> \"territory\""
        ],
        "paths": "<http://dbpedia.org/resource/Tonkin> -> \"territory\"",
        "generated_query": "SELECT DISTINCT ?territory WHERE {\n  {\n    <http://dbpedia.org/resource/Tonkin_Campaign> <http://dbpedia.org/property/place> ?territory .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Tonkin_Campaign> <http://dbpedia.org/ontology/place> ?territory .\n  }\n}"
    },
    {
        "question": "For which teams did Ryan Powell play for?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ryan_Powell_(lacrosse)> <http://dbpedia.org/ontology/team> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Ryan_Powell_(rugby_union)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Ryan_Powell_(rugby_union)> -> \"team\""
        ],
        "paths": "<http://dbpedia.org/resource/Ryan_Powell_(rugby_union)> -> \"team\"",
        "generated_query": "SELECT DISTINCT ?team WHERE {\n  <http://dbpedia.org/resource/Ryan_Powell_(rugby_union)> <http://dbpedia.org/property/ruProclubs> ?team .\n}"
    },
    {
        "question": "What are the awards won by the person who wrote the screen play for Lost in Rio ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/OSS_117:_Lost_in_Rio> <http://dbpedia.org/property/screenplay> ?x . ?x <http://dbpedia.org/property/awards> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Prisoner_of_Rio"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Prisoner_of_Rio> -> WRITER -> AWARD"
        ],
        "paths": "<http://dbpedia.org/resource/Prisoner_of_Rio> -> WRITER -> AWARD",
        "generated_query": "SELECT DISTINCT ?award WHERE {\n  <http://dbpedia.org/resource/Prisoner_of_Rio> <http://dbpedia.org/ontology/writer> ?writer .\n  ?writer <http://dbpedia.org/ontology/wikiPageWikiLink> ?linkedEntity .\n  ?linkedEntity <http://dbpedia.org/ontology/award> ?award .\n}"
    },
    {
        "question": "Total number of places where people drafted in the detroit pistons have died?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/ontology/draftTeam> <http://dbpedia.org/resource/Detroit_Pistons> . ?x <http://dbpedia.org/property/placeOfDeath> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Location>}",
        "entities": [
            "http://dbpedia.org/resource/Detroit_Pistons"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Detroit_Pistons> -> DRAFTED_PLAYER -> DEATH_PLACE"
        ],
        "paths": "<http://dbpedia.org/resource/Detroit_Pistons> -> DRAFTED_PLAYER -> DEATH_PLACE",
        "generated_query": "SELECT (COUNT(DISTINCT ?deathPlace) AS ?totalDeathPlaces)\nWHERE {\n  {\n    ?player <http://dbpedia.org/ontology/draftTeam> <http://dbpedia.org/resource/Detroit_Pistons> .\n  }\n  UNION\n  {\n    ?player <http://dbpedia.org/property/draftTeam> <http://dbpedia.org/resource/Detroit_Pistons> .\n  }\n  \n  {\n    ?player <http://dbpedia.org/ontology/deathPlace> ?deathPlace .\n  }\n  UNION\n  {\n    ?player <http://dbpedia.org/property/deathPlace> ?deathPlace .\n  }\n}"
    },
    {
        "question": "What band made The trial and One of these days song?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Trial_(song)> <http://dbpedia.org/property/artist> ?uri. <http://dbpedia.org/resource/One_of_These_Days_(instrumental)> <http://dbpedia.org/ontology/musicalArtist> ?uri . }",
        "entities": [
            "http://dbpedia.org/resource/One_of_These_Days_(instrumental)",
            "http://dbpedia.org/resource/The_Trial_(song)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/One_of_These_Days_(instrumental)> -> BAND",
            "<http://dbpedia.org/resource/The_Trial_(song)> -> BAND"
        ],
        "paths": "<http://dbpedia.org/resource/One_of_These_Days_(instrumental)> -> BAND, <http://dbpedia.org/resource/The_Trial_(song)> -> BAND",
        "generated_query": "SELECT DISTINCT ?band WHERE {\n  {\n    <http://dbpedia.org/resource/One_of_These_Days_(instrumental)> <http://dbpedia.org/ontology/musicalBand> ?band .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/One_of_These_Days_(instrumental)> <http://dbpedia.org/ontology/musicalArtist> ?band .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/One_of_These_Days_(instrumental)> <http://dbpedia.org/property/artist> ?band .\n  }\n  \n  {\n    <http://dbpedia.org/resource/The_Trial_(song)> <http://dbpedia.org/ontology/artist> ?band .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/The_Trial_(song)> <http://dbpedia.org/property/artist> ?band .\n  }\n}"
    },
    {
        "question": "Name the club of Julie Hastings ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Julie_Hastings> <http://dbpedia.org/ontology/club> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Julie_Hastings"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Julie_Hastings> -> \"club\""
        ],
        "paths": "<http://dbpedia.org/resource/Julie_Hastings> -> \"club\"",
        "generated_query": "SELECT DISTINCT ?clubName WHERE {\n  {\n    <http://dbpedia.org/resource/Julie_Hastings> <http://dbpedia.org/property/curlingClub> ?club .\n    BIND(\n      IF(isURI(?club),\n         COALESCE(\n           ?labelCurlingClub,\n           STRAFTER(STR(?club), \"http://dbpedia.org/resource/\")\n         ),\n         STR(?club)\n      ) AS ?clubName\n    )\n    OPTIONAL {\n      ?club <http://www.w3.org/2000/01/rdf-schema#label> ?labelCurlingClub .\n      FILTER (lang(?labelCurlingClub) = \"en\")\n    }\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Julie_Hastings> <http://dbpedia.org/ontology/club> ?club2 .\n    BIND(\n      IF(isURI(?club2),\n         COALESCE(\n           ?labelClub,\n           STRAFTER(STR(?club2), \"http://dbpedia.org/resource/\")\n         ),\n         STR(?club2)\n      ) AS ?clubName\n    )\n    OPTIONAL {\n      ?club2 <http://www.w3.org/2000/01/rdf-schema#label> ?labelClub .\n      FILTER (lang(?labelClub) = \"en\")\n    }\n  }\n}"
    },
    {
        "question": "From where does the river Upper Neretva start flowing?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Upper_Neretva> <http://dbpedia.org/ontology/riverMouth> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Upper_Neretva"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Upper_Neretva> -> \"source\""
        ],
        "paths": "<http://dbpedia.org/resource/Upper_Neretva> -> \"source\"",
        "generated_query": "SELECT DISTINCT ?source WHERE {\n  {\n    <http://dbpedia.org/resource/Upper_Neretva> <http://dbpedia.org/ontology/source> ?source .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Upper_Neretva> <http://dbpedia.org/property/source> ?source .\n  }\n}"
    },
    {
        "question": "Name the university located in Indiana and has affiliations with Kaplan, Inc.?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/campus> <http://dbpedia.org/resource/Indiana> . ?uri <http://dbpedia.org/property/affiliations> <http://dbpedia.org/resource/Kaplan,_Inc.>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
        "entities": [
            "http://dbpedia.org/resource/Indiana",
            "http://dbpedia.org/resource/Kaplan,_Inc."
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Indiana> -> UNIVERSITY",
            "<http://dbpedia.org/resource/Kaplan,_Inc.> -> UNIVERSITY"
        ],
        "paths": "<http://dbpedia.org/resource/Indiana> -> UNIVERSITY, <http://dbpedia.org/resource/Kaplan,_Inc.> -> UNIVERSITY",
        "generated_query": "SELECT DISTINCT ?university WHERE {\n  ?university <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Indiana> .\n  {\n    ?university <http://dbpedia.org/ontology/affiliation> <http://dbpedia.org/resource/Kaplan,_Inc.> .\n  }\n  UNION\n  {\n    ?university <http://dbpedia.org/property/affiliations> <http://dbpedia.org/resource/Kaplan,_Inc.> .\n  }\n}"
    },
    {
        "question": "List the newspapers whose offices are situated in 1211 Avenue of the Americas?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/1211_Avenue_of_the_Americas>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Newspaper>}",
        "entities": [
            "http://dbpedia.org/resource/1211_Avenue_of_the_Americas"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/1211_Avenue_of_the_Americas> -> NEWSPAPER"
        ],
        "paths": "<http://dbpedia.org/resource/1211_Avenue_of_the_Americas> -> NEWSPAPER",
        "generated_query": "SELECT DISTINCT ?newspaper WHERE {\n  ?newspaper <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/1211_Avenue_of_the_Americas> .\n}"
    },
    {
        "question": "Was Morrissey a member of the Smiths?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/The_Smiths> <http://dbpedia.org/ontology/formerBandMember> <http://dbpedia.org/resource/Morrissey> }",
        "entities": [
            "http://dbpedia.org/resource/The_Smiths",
            "http://dbpedia.org/resource/Morrissey"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Morrissey> -> <http://dbpedia.org/resource/The_Smiths>"
        ],
        "paths": "<http://dbpedia.org/resource/Morrissey> -> <http://dbpedia.org/resource/The_Smiths>",
        "generated_query": "ASK WHERE {\n  {\n    <http://dbpedia.org/resource/Morrissey> <http://dbpedia.org/ontology/associatedBand> <http://dbpedia.org/resource/The_Smiths> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Morrissey> <http://dbpedia.org/property/associatedActs> <http://dbpedia.org/resource/The_Smiths> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/The_Smiths> <http://dbpedia.org/ontology/formerBandMember> <http://dbpedia.org/resource/Morrissey> .\n  }\n}"
    },
    {
        "question": "Did Phillippe Cabot go to Columbia for studying?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/Phillippe_Cabot> <http://dbpedia.org/ontology/university> <http://dbpedia.org/resource/Columbia_University> }",
        "entities": [
            "http://dbpedia.org/resource/Phillippe_Cabot",
            "http://dbpedia.org/resource/Columbia_University"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Phillippe_Cabot> -> <http://dbpedia.org/resource/Columbia_University>"
        ],
        "paths": "<http://dbpedia.org/resource/Phillippe_Cabot> -> <http://dbpedia.org/resource/Columbia_University>",
        "generated_query": "ASK WHERE {\n  {\n    <http://dbpedia.org/resource/Phillippe_Cabot> <http://dbpedia.org/ontology/university> <http://dbpedia.org/resource/Columbia_University> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Phillippe_Cabot> <http://dbpedia.org/property/university> <http://dbpedia.org/resource/Columbia_University> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Phillippe_Cabot> <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Columbia_University> .\n  }\n}"
    },
    {
        "question": "What river originates in Kingston Ontario?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/sourceLocation> <http://dbpedia.org/resource/Kingston,_Ontario>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "entities": [
            "http://dbpedia.org/resource/Kingston,_Ontario",
            "http://dbpedia.org/resource/Ontario"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Kingston,_Ontario> -> <http://dbpedia.org/resource/Ontario> -> \"originates\""
        ],
        "paths": "<http://dbpedia.org/resource/Kingston,_Ontario> -> <http://dbpedia.org/resource/Ontario> -> \"originates\"",
        "generated_query": "SELECT DISTINCT ?river WHERE {\n  {\n    ?river <http://dbpedia.org/ontology/sourcePlace> <http://dbpedia.org/resource/Kingston,_Ontario> .\n  }\n  UNION\n  {\n    ?river <http://dbpedia.org/ontology/sourceLocation> <http://dbpedia.org/resource/Kingston,_Ontario> .\n  }\n}"
    },
    {
        "question": "By what style was Providence Chapel, Charlwood made?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Providence_Chapel,_Charlwood> <http://dbpedia.org/property/style> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Providence_Chapel,_Charlwood"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Providence_Chapel,_Charlwood> -> \"architectural style\""
        ],
        "paths": "<http://dbpedia.org/resource/Providence_Chapel,_Charlwood> -> \"architectural style\"",
        "generated_query": "SELECT DISTINCT ?architecturalStyle WHERE {\n  <http://dbpedia.org/resource/Providence_Chapel,_Charlwood> <http://dbpedia.org/ontology/architecturalStyle> ?architecturalStyle .\n  ?someEntity <http://dbpedia.org/ontology/structuralSystem> ?architecturalStyle .\n}"
    },
    {
        "question": "For how many PMs did the politician work, whose successor was Kingsley Wood?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { <http://dbpedia.org/resource/Kingsley_Wood> <http://dbpedia.org/ontology/successor> ?x . ?x <http://dbpedia.org/property/primeminister> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
        "entities": [
            "http://dbpedia.org/resource/Kingsley_Wood"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Kingsley_Wood> -> SUCCESSOR -> POLITICIAN -> WORKED_FOR -> \"number of PMs\""
        ],
        "paths": "<http://dbpedia.org/resource/Kingsley_Wood> -> SUCCESSOR -> POLITICIAN -> WORKED_FOR -> \"number of PMs\"",
        "generated_query": "SELECT (COUNT(DISTINCT ?pm) AS ?numberOfPMs)\nWHERE {\n  ?politician <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Kingsley_Wood> .\n  {\n    ?politician <http://dbpedia.org/property/primeminister> ?pm .\n  }\n  UNION\n  {\n    ?politician <http://dbpedia.org/property/primeMinister> ?pm .\n  }\n}"
    },
    {
        "question": "list some companies founded by Jim Harris.",
        "gold_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/foundedBy> <http://dbpedia.org/resource/Jim_Harris_(entrepreneur)> } ",
        "entities": [
            "http://dbpedia.org/resource/Jim_Harris_(entrepreneur)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Jim_Harris_(entrepreneur)> -> COMPANY"
        ],
        "paths": "<http://dbpedia.org/resource/Jim_Harris_(entrepreneur)> -> COMPANY",
        "generated_query": "SELECT DISTINCT ?company WHERE {\n  {\n    ?company <http://dbpedia.org/property/founder> <http://dbpedia.org/resource/Jim_Harris_(entrepreneur)> .\n  }\n  UNION\n  {\n    ?company <http://dbpedia.org/ontology/foundedBy> <http://dbpedia.org/resource/Jim_Harris_(entrepreneur)> .\n  }\n}"
    },
    {
        "question": "Give me the total number of employer of the engineers whose one of the employer is McDonnell Aircraft ?",
        "gold_query": " SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/ontology/employer> <http://dbpedia.org/resource/McDonnell_Aircraft> . ?x <http://dbpedia.org/ontology/employer> ?uri }",
        "entities": [
            "http://dbpedia.org/resource/McDonnell_Aircraft_Corporation"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/McDonnell_Aircraft_Corporation> -> ENGINEER -> EMPLOYER -> \"total number\""
        ],
        "paths": "<http://dbpedia.org/resource/McDonnell_Aircraft_Corporation> -> ENGINEER -> EMPLOYER -> \"total number\"",
        "generated_query": "SELECT (COUNT(DISTINCT ?employer) AS ?totalEmployers)\nWHERE {\n  {\n    ?engineer <http://dbpedia.org/ontology/employer> <http://dbpedia.org/resource/McDonnell_Aircraft> .\n  }\n  UNION\n  {\n    ?engineer <http://dbpedia.org/property/employer> <http://dbpedia.org/resource/McDonnell_Aircraft> .\n  }\n  {\n    ?engineer <http://dbpedia.org/ontology/employer> ?employer .\n  }\n  UNION\n  {\n    ?engineer <http://dbpedia.org/property/employer> ?employer .\n  }\n}"
    },
    {
        "question": "How many developers have games where I can hear Lightning McQueen?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { <http://dbpedia.org/resource/Lightning_McQueen> <http://dbpedia.org/ontology/voice> ?x . ?x <http://dbpedia.org/ontology/developer> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Lightning_McQueen"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Lightning_McQueen> -> GAMES -> DEVELOPERS"
        ],
        "paths": "<http://dbpedia.org/resource/Lightning_McQueen> -> GAMES -> DEVELOPERS",
        "generated_query": "SELECT (COUNT(DISTINCT ?developer) AS ?developerCount)\nWHERE {\n  <http://dbpedia.org/resource/Lightning_McQueen> <http://dbpedia.org/ontology/voice> ?game .\n  {\n    ?game <http://dbpedia.org/property/developer> ?developer .\n  }\n  UNION\n  {\n    ?game <http://dbpedia.org/ontology/developer> ?developer .\n  }\n}"
    },
    {
        "question": "Which universit's affiliation is with Kalpan, Inc. and has campus at Iowa ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/affiliations> <http://dbpedia.org/resource/Kaplan,_Inc.> . ?uri <http://dbpedia.org/ontology/campus> <http://dbpedia.org/resource/Iowa>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
        "entities": [
            "http://dbpedia.org/resource/Iowa"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Iowa> -> UNIVERSITY"
        ],
        "paths": "<http://dbpedia.org/resource/Iowa> -> UNIVERSITY",
        "generated_query": "SELECT DISTINCT ?university WHERE {\n  ?university <http://dbpedia.org/ontology/campus> <http://dbpedia.org/resource/Iowa> .\n  {\n    ?university <http://dbpedia.org/ontology/affiliation> <http://dbpedia.org/resource/Kaplan,_Inc.> .\n  }\n  UNION\n  {\n    ?university <http://dbpedia.org/property/affiliations> <http://dbpedia.org/resource/Kaplan,_Inc.> .\n  }\n}"
    },
    {
        "question": "How many record labels publish works of Jazz fusion?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/ontology/genre> <http://dbpedia.org/resource/Jazz_fusion> . ?x <http://dbpedia.org/ontology/recordLabel> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Jazz_fusion",
            "http://dbpedia.org/resource/Record_label"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Record_label> -> \"count\"",
            "<http://dbpedia.org/resource/Record_label> -> <http://dbpedia.org/resource/Jazz_fusion>"
        ],
        "paths": "<http://dbpedia.org/resource/Record_label> -> \"count\", <http://dbpedia.org/resource/Record_label> -> <http://dbpedia.org/resource/Jazz_fusion>",
        "generated_query": "SELECT (COUNT(DISTINCT ?label) AS ?count)\nWHERE {\n  ?label <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Record_label> .\n  ?label <http://dbpedia.org/ontology/genre> <http://dbpedia.org/resource/Jazz_fusion> .\n}"
    },
    {
        "question": "What are the regions in which the distributor of Secrets and Lies serves ? ",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Secrets_and_Lies_(U.S._TV_series)> <http://dbpedia.org/ontology/distributor> ?x . ?x <http://dbpedia.org/ontology/regionServed> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Secrets_&_Lies_(film)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Secrets_&_Lies_(film)> -> DISTRIBUTOR -> REGION"
        ],
        "paths": "<http://dbpedia.org/resource/Secrets_&_Lies_(film)> -> DISTRIBUTOR -> REGION",
        "generated_query": "SELECT DISTINCT ?region WHERE {\n  <http://dbpedia.org/resource/Secrets_&_Lies_(film)> <http://dbpedia.org/ontology/distributor> ?distributor .\n  ?distributor <http://dbpedia.org/ontology/wikiPageWikiLink> ?linkedEntity .\n  ?linkedEntity <http://dbpedia.org/ontology/regionServed> ?region .\n}"
    },
    {
        "question": "List all the writers of the comics which has Robert Bernstein as one of the writer ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/writers> <http://dbpedia.org/resource/Robert_Bernstein_(comics)> . ?x <http://dbpedia.org/property/writers> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Comic>}",
        "entities": [
            "http://dbpedia.org/resource/Robert_Bernstein_(comics)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Robert_Bernstein_(comics)> -> COMIC -> WRITER"
        ],
        "paths": "<http://dbpedia.org/resource/Robert_Bernstein_(comics)> -> COMIC -> WRITER",
        "generated_query": "SELECT DISTINCT ?writer WHERE {\n  ?comic <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Robert_Bernstein_(comics)> .\n  ?comic <http://dbpedia.org/property/writer> ?writer .\n}"
    },
    {
        "question": "What are the settlements whose neighboring municipalities is Lancy?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/neighboringMunicipalities> <http://dbpedia.org/resource/Lancy>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>}",
        "entities": [
            "http://dbpedia.org/resource/Lancy"
        ],
        "classes": [],
        "relations": [
            "SETTLEMENT -> NEIGHBORING_MUNICIPALITY -> <http://dbpedia.org/resource/Lancy>"
        ],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?settlement WHERE {\n  ?settlement ?p <http://dbpedia.org/resource/Lancy> .\n}"
    },
    {
        "question": "Count the total number  of hometown of the gymnasts whose one of the hometown in Russia ?",
        "gold_query": " SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/property/hometown> <http://dbpedia.org/resource/Russia> . ?x <http://dbpedia.org/property/hometown> ?uri }",
        "entities": [
            "http://dbpedia.org/resource/Russia"
        ],
        "classes": [],
        "relations": [
            "GYMNAST -> \"hometown\" -> <http://dbpedia.org/resource/Russia>",
            "GYMNAST -> \"hometown\""
        ],
        "paths": "",
        "generated_query": "SELECT (COUNT(DISTINCT ?ht2) AS ?totalHometowns)\nWHERE {\n    ?gymnast <hometown> <http://dbpedia.org/resource/Russia> .\n    ?gymnast <hometown> ?ht2 .\n}"
    },
    {
        "question": "In which states does the river flow whose left tributary is Toms Creek?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Toms_Creek_(Monocacy_River)> <http://dbpedia.org/ontology/leftTributary> ?x . ?x <http://dbpedia.org/ontology/state> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Toms_River"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Toms_River> -> RIVER -> \"left tributary\"",
            "<http://dbpedia.org/resource/Toms_River> -> RIVER -> \"states\""
        ],
        "paths": "<http://dbpedia.org/resource/Toms_River> -> RIVER -> \"left tributary\", <http://dbpedia.org/resource/Toms_River> -> RIVER -> \"states\"",
        "generated_query": "SELECT DISTINCT ?state WHERE {\n  ?river <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Toms_River> .\n  ?river <http://purl.org/dc/terms/subject> ?riverCategory .\n  ?riverCategory <http://www.w3.org/2004/02/skos/core#broader> ?stateCategory .\n  FILTER(CONTAINS(STR(?stateCategory), \"Rivers_and_streams_of_the_United_States_by_state\"))\n  BIND(REPLACE(STR(?riverCategory), \"http://dbpedia.org/resource/Category:Rivers_and_streams_of_\", \"\") AS ?stateName) .\n  BIND(IRI(CONCAT(\"http://dbpedia.org/resource/\", ?stateName)) AS ?state)\n}"
    },
    {
        "question": "Name the river whose source mountain is Baikal Mountains and mouth location is Arctic Ocean?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/sourceMountain> <http://dbpedia.org/resource/Baikal_Mountains> . ?uri <http://dbpedia.org/property/mouthLocation> <http://dbpedia.org/resource/Arctic_Ocean>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "entities": [
            "http://dbpedia.org/resource/Baikal_Mountains",
            "http://dbpedia.org/resource/River",
            "http://dbpedia.org/resource/Arctic_Ocean"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/River> -> <http://dbpedia.org/resource/Baikal_Mountains>",
            "<http://dbpedia.org/resource/River> -> \"name\"",
            "<http://dbpedia.org/resource/River> -> <http://dbpedia.org/resource/Arctic_Ocean>"
        ],
        "paths": "<http://dbpedia.org/resource/River> -> <http://dbpedia.org/resource/Baikal_Mountains>, <http://dbpedia.org/resource/River> -> \"name\", <http://dbpedia.org/resource/River> -> <http://dbpedia.org/resource/Arctic_Ocean>",
        "generated_query": "SELECT DISTINCT ?name WHERE {\n  ?river <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Baikal_Mountains> .\n  ?river <http://dbpedia.org/property/mouth> <http://dbpedia.org/resource/Arctic_Ocean> .\n  ?river <http://xmlns.com/foaf/0.1/name> ?name .\n}"
    },
    {
        "question": "Count the PhD students whose thesis are supervised by National Medal of Science winners?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/property/prizes> <http://dbpedia.org/resource/National_Medal_of_Science> . ?x <http://dbpedia.org/property/doctoralStudents> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/National_Medal_of_Science",
            "http://dbpedia.org/resource/Doctor_of_Philosophy"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Doctor_of_Philosophy> -> <http://dbpedia.org/resource/National_Medal_of_Science>"
        ],
        "paths": "<http://dbpedia.org/resource/Doctor_of_Philosophy> -> <http://dbpedia.org/resource/National_Medal_of_Science>",
        "generated_query": "SELECT (COUNT(DISTINCT ?student) AS ?count)\nWHERE {\n  ?supervisor <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Doctor_of_Philosophy> .\n  ?supervisor <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/National_Medal_of_Science> .\n  ?student <http://dbpedia.org/ontology/thesisAdvisor> ?supervisor .\n}"
    },
    {
        "question": "Which broadcast area of CFRX is also the palce of birth of Anthony Raymond ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/CFRX> <http://dbpedia.org/ontology/broadcastArea> ?uri. <http://dbpedia.org/resource/Anthony_Raymond_Ceresko> <http://dbpedia.org/property/placeOfBirth> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Anthony_Raymond",
            "http://dbpedia.org/resource/CFRB"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Anthony_Raymond> -> PLACE_OF_BIRTH",
            "<http://dbpedia.org/resource/CFRB> -> BROADCAST_AREA"
        ],
        "paths": "<http://dbpedia.org/resource/CFRB> -> BROADCAST_AREA",
        "generated_query": "SELECT DISTINCT ?area WHERE {\n  <http://dbpedia.org/resource/CFRB> <http://dbpedia.org/ontology/broadcastArea> ?area .\n  <http://dbpedia.org/resource/Anthony_Raymond> <http://dbpedia.org/ontology/birthPlace> ?area .\n}"
    },
    {
        "question": "Count the total number of cast member of the television shows whose actress is Joey McIntyre?",
        "gold_query": " SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Joey_McIntyre> . ?x <http://dbpedia.org/property/starring> ?uri }",
        "entities": [
            "http://dbpedia.org/resource/Joey_McIntyre"
        ],
        "classes": [],
        "relations": [
            "<TELEVISION_SHOW> -> \"cast member\"",
            "<http://dbpedia.org/resource/Joey_McIntyre> -> <TELEVISION_SHOW>",
            "<TELEVISION_SHOW> -> \"count\""
        ],
        "paths": "<http://dbpedia.org/resource/Joey_McIntyre> -> <TELEVISION_SHOW>",
        "generated_query": "SELECT (COUNT(DISTINCT ?castMember) AS ?totalCastMembers)\nWHERE {\n  ?show <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Joey_McIntyre> .\n  FILTER(!CONTAINS(STR(?show), \"(film)\")) .\n  ?show <http://dbpedia.org/ontology/starring> ?castMember .\n}"
    },
    {
        "question": "List all the awards won by the artist who has won SIGGRAPH ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/SIGGRAPH> . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/SIGGRAPH"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/SIGGRAPH> -> ARTIST -> \"awards\""
        ],
        "paths": "<http://dbpedia.org/resource/SIGGRAPH> -> ARTIST -> \"awards\"",
        "generated_query": "SELECT DISTINCT ?award WHERE {\n  ?artist <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/SIGGRAPH> .\n  ?artist <http://dbpedia.org/ontology/award> ?award .\n}"
    },
    {
        "question": "Where was david Scherman trained ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/David_Scherman> <http://dbpedia.org/property/training> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Drew_Sherman"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Drew_Sherman> -> \"training institution\""
        ],
        "paths": "<http://dbpedia.org/resource/Drew_Sherman> -> \"training institution\"",
        "generated_query": "SELECT DISTINCT ?trainingInstitution WHERE {\n  <http://dbpedia.org/resource/Drew_Sherman> <http://dbpedia.org/property/youthclubs> ?trainingInstitution .\n}"
    },
    {
        "question": "Count the battles fought by Raoul Magrin-Vernerey?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { <http://dbpedia.org/resource/Raoul_Magrin-Vernerey> <http://dbpedia.org/property/battles> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>}",
        "entities": [
            "http://dbpedia.org/resource/Raoul_Magrin-Vernerey"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Raoul_Magrin-Vernerey> -> \"battles fought\""
        ],
        "paths": "<http://dbpedia.org/resource/Raoul_Magrin-Vernerey> -> \"battles fought\"",
        "generated_query": "SELECT (COUNT(DISTINCT ?battle) AS ?battleCount)\nWHERE {\n  <http://dbpedia.org/resource/Raoul_Magrin-Vernerey> <http://dbpedia.org/ontology/battle> ?battle .\n}"
    },
    {
        "question": "Which athlete was the flag bearer for Switzerland in 2004 and 2008 summer Olympics ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Switzerland_at_the_2004_Summer_Olympics> <http://dbpedia.org/property/flagbearer> ?uri. <http://dbpedia.org/resource/Switzerland_at_the_2008_Summer_Olympics> <http://dbpedia.org/property/flagbearer> ?uri . }",
        "entities": [
            "http://dbpedia.org/resource/Switzerland",
            "http://dbpedia.org/resource/2008_Summer_Olympics",
            "http://dbpedia.org/resource/Switzerland_at_the_2004_Summer_Olympics"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Switzerland_at_the_2004_Summer_Olympics> -> \"flag bearer\"",
            "<http://dbpedia.org/resource/2008_Summer_Olympics> -> \"flag bearer\"",
            "<http://dbpedia.org/resource/Switzerland> -> <http://dbpedia.org/resource/Switzerland_at_the_2004_Summer_Olympics>",
            "<http://dbpedia.org/resource/2008_Summer_Olympics> -> <http://dbpedia.org/resource/Switzerland>"
        ],
        "paths": "<http://dbpedia.org/resource/Switzerland_at_the_2004_Summer_Olympics> -> \"flag bearer\", <http://dbpedia.org/resource/2008_Summer_Olympics> -> \"flag bearer\", <http://dbpedia.org/resource/Switzerland> -> <http://dbpedia.org/resource/Switzerland_at_the_2004_Summer_Olympics>, <http://dbpedia.org/resource/2008_Summer_Olympics> -> <http://dbpedia.org/resource/Switzerland>",
        "generated_query": "SELECT DISTINCT ?athlete WHERE {\n  {\n    <http://dbpedia.org/resource/Switzerland_at_the_2004_Summer_Olympics> <http://dbpedia.org/ontology/flagBearer> ?athlete .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Switzerland_at_the_2004_Summer_Olympics> <http://dbpedia.org/property/flagbearer> ?athlete .\n  }\n  \n  ?athlete <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/2008_Summer_Olympics> .\n  \n  {\n    ?athlete <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/Switzerland> .\n  }\n  UNION\n  {\n    ?athlete <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Switzerland> .\n  }\n}"
    },
    {
        "question": "Which nationalist group was responsible for foundation of Young Lords?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Young_Lords> <http://dbpedia.org/property/international> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Young_Lords"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Young_Lords> -> NATIONALIST_GROUP"
        ],
        "paths": "<http://dbpedia.org/resource/Young_Lords> -> NATIONALIST_GROUP",
        "generated_query": "SELECT DISTINCT ?category ?broaderCategory WHERE {\n  <http://dbpedia.org/resource/Young_Lords> <http://purl.org/dc/terms/subject> ?category .\n  OPTIONAL {\n    ?category <http://www.w3.org/2004/02/skos/core#broader> ?broaderCategory .\n  }\n}"
    },
    {
        "question": "What award was won by the father of Angelina Jolie?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/children> <http://dbpedia.org/resource/Angelina_Jolie> . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Angelina_Jolie"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Angelina_Jolie> -> FATHER -> \"award\""
        ],
        "paths": "<http://dbpedia.org/resource/Angelina_Jolie> -> FATHER -> \"award\"",
        "generated_query": "SELECT DISTINCT ?award WHERE {\n  <http://dbpedia.org/resource/Angelina_Jolie> <http://dbpedia.org/ontology/parent> ?father .\n  FILTER (?father = <http://dbpedia.org/resource/Jon_Voight>)\n  ?father <http://dbpedia.org/ontology/award> ?award .\n}"
    },
    {
        "question": "What are the software whose programming language are Multilingual?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/language> <http://dbpedia.org/resource/Multilingualism> . ?uri <http://dbpedia.org/property/programmingLanguage> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Software>}",
        "entities": [
            "http://dbpedia.org/resource/Programming_language",
            "http://dbpedia.org/resource/Software"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Software> -> <http://dbpedia.org/resource/Programming_language> -> \"Multilingual\""
        ],
        "paths": "<http://dbpedia.org/resource/Software> -> <http://dbpedia.org/resource/Programming_language> -> \"Multilingual\"",
        "generated_query": "SELECT DISTINCT ?software WHERE {\n  ?software <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Software> .\n  ?software <http://dbpedia.org/ontology/programmingLanguage> ?language .\n  FILTER (STR(?language) = \"Multilingual\")\n}"
    },
    {
        "question": "Was Marshall Arisman the cover artist in american psycho?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/American_Psycho> <http://dbpedia.org/property/coverArtist> <http://dbpedia.org/resource/Marshall_Arisman> }",
        "entities": [
            "http://dbpedia.org/resource/Psycho_(1960_film)",
            "http://dbpedia.org/resource/Cover_version",
            "http://dbpedia.org/resource/Marshall_Arisman"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Marshall_Arisman> -> <http://dbpedia.org/resource/Cover_version> -> <http://dbpedia.org/resource/Psycho_(1960_film)>"
        ],
        "paths": "<http://dbpedia.org/resource/Marshall_Arisman> -> <http://dbpedia.org/resource/Cover_version> -> <http://dbpedia.org/resource/Psycho_(1960_film)>",
        "generated_query": "ASK WHERE {\n  {\n    <http://dbpedia.org/resource/American_Psycho> <http://dbpedia.org/property/coverArtist> <http://dbpedia.org/resource/Marshall_Arisman> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/American_Psycho> <http://dbpedia.org/ontology/coverArtist> <http://dbpedia.org/resource/Marshall_Arisman> .\n  }\n}"
    },
    {
        "question": "Which birthplace of Liliya Lobanova is also the location of the Snake Island ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Liliya_Lobanova> <http://dbpedia.org/property/birthplace> ?uri. <http://dbpedia.org/resource/Snake_Island_(Black_Sea)> <http://dbpedia.org/property/locationCountry> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Snake_Island_(Nanaimo)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Snake_Island_(Nanaimo)> -> \"location\""
        ],
        "paths": "<http://dbpedia.org/resource/Snake_Island_(Nanaimo)> -> \"location\"",
        "generated_query": "SELECT DISTINCT ?birthplace WHERE {\n  <http://dbpedia.org/resource/Liliya_Lobanova> <http://dbpedia.org/ontology/birthPlace> ?birthplace .\n  \n  <http://dbpedia.org/resource/Snake_Island_(Nanaimo)> <http://dbpedia.org/ontology/wikiPageWikiLink> ?loc .\n  \n  {\n    FILTER (?birthplace = ?loc)\n  }\n  UNION\n  {\n    ?birthplace <http://dbpedia.org/ontology/location> ?loc .\n  }\n  UNION\n  {\n    ?birthplace <http://dbpedia.org/ontology/locatedInArea> ?loc .\n  }\n}"
    },
    {
        "question": "Count all the stateless people",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE {?uri <http://dbpedia.org/ontology/citizenship> <http://dbpedia.org/resource/Statelessness>  . }",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT (COUNT(DISTINCT ?person) AS ?count)\nWHERE {\n}"
    },
    {
        "question": "Josef Bhler belongs to which political party?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Josef_B\u00fchler> <http://dbpedia.org/ontology/occupation> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Political_party"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Josef_Bhler> -> <http://dbpedia.org/resource/Political_party>"
        ],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?party WHERE {\n  <http://dbpedia.org/resource/Josef_Bhler> ?p ?party .\n  ?party <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/resource/Political_party> .\n}"
    },
    {
        "question": "Where did the war take place where one of the commander was Zuo Zongtang?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Zuo_Zongtang> . ?x <http://dbpedia.org/ontology/territory> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>}",
        "entities": [
            "http://dbpedia.org/resource/Zuo_Zongtang"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Zuo_Zongtang> -> WAR -> \"location\""
        ],
        "paths": "<http://dbpedia.org/resource/Zuo_Zongtang> -> WAR -> \"location\"",
        "generated_query": "SELECT DISTINCT ?location WHERE {\n  ?war <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Zuo_Zongtang> .\n  ?war <http://dbpedia.org/ontology/place> ?location .\n}"
    },
    {
        "question": "In which place is the company which is known for Barbara bestor located ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Barbara_Bestor> <http://dbpedia.org/property/knownFor> ?x . ?x <http://dbpedia.org/ontology/location> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
        "entities": [
            "http://dbpedia.org/resource/Barbara_Bestor"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Barbara_Bestor> -> COMPANY -> LOCATION"
        ],
        "paths": "<http://dbpedia.org/resource/Barbara_Bestor> -> COMPANY -> LOCATION",
        "generated_query": "SELECT DISTINCT ?place WHERE {\n  <http://dbpedia.org/resource/Barbara_Bestor> <http://dbpedia.org/ontology/knownFor> ?company .\n  {\n    ?company <http://dbpedia.org/ontology/location> ?place .\n  }\n  UNION\n  {\n    ?company <http://dbpedia.org/property/locationCity> ?place .\n  }\n}"
    },
    {
        "question": "What novels are belong to the genre of Utopian and dystopian fiction?",
        "gold_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/literaryGenre> <http://dbpedia.org/resource/Utopian_and_dystopian_fiction> } ",
        "entities": [
            "http://dbpedia.org/resource/Utopian_and_dystopian_fiction"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Utopian_and_dystopian_fiction> -> NOVEL"
        ],
        "paths": "<http://dbpedia.org/resource/Utopian_and_dystopian_fiction> -> NOVEL",
        "generated_query": "SELECT DISTINCT ?novel WHERE {\n  ?novel <http://dbpedia.org/ontology/literaryGenre> <http://dbpedia.org/resource/Utopian_and_dystopian_fiction> .\n  ?novel <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/class/Book> .\n}"
    },
    {
        "question": "What are the movies written by Nick Castle?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/writer> <http://dbpedia.org/resource/Nick_Castle>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "entities": [
            "http://dbpedia.org/resource/Nick_Castle"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Nick_Castle> -> \"written by\""
        ],
        "paths": "<http://dbpedia.org/resource/Nick_Castle> -> \"written by\"",
        "generated_query": "SELECT DISTINCT ?movie WHERE {\n  ?movie <http://dbpedia.org/ontology/writer> <http://dbpedia.org/resource/Nick_Castle> .\n  ?movie a <http://dbpedia.org/ontology/Film> .\n}"
    },
    {
        "question": "On which river are there things belonging to zambezi river authority?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/owner> <http://dbpedia.org/resource/Zambezi_River_Authority> . ?x <http://dbpedia.org/ontology/river> ?uri  . }",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?river WHERE {\n  ?thing ?p1 <ZAMBEZI_RIVER_AUTHORITY> .\n  ?thing ?p2 ?river .\n}"
    },
    {
        "question": "Is Egyptian Arabic belong to the Central Semitic Languages family?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/Egyptian_Arabic> <http://dbpedia.org/ontology/languageFamily> <http://dbpedia.org/resource/Central_Semitic_languages> }",
        "entities": [
            "http://dbpedia.org/resource/Central_Semitic_languages",
            "http://dbpedia.org/resource/Egyptian_Arabic"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Egyptian_Arabic> -> <http://dbpedia.org/resource/Central_Semitic_languages>"
        ],
        "paths": "<http://dbpedia.org/resource/Egyptian_Arabic> -> <http://dbpedia.org/resource/Central_Semitic_languages>",
        "generated_query": "ASK WHERE {\n  {\n    <http://dbpedia.org/resource/Egyptian_Arabic> <http://dbpedia.org/ontology/languageFamily> <http://dbpedia.org/resource/Central_Semitic_languages> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Egyptian_Arabic> <http://dbpedia.org/property/fam> <http://dbpedia.org/resource/Central_Semitic_languages> .\n  }\n}"
    },
    {
        "question": "Who is the artist of Sings Kristofferson and also performed Milk Cow Blues atleast once?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sings_Kristofferson> <http://dbpedia.org/property/artist> ?uri. <http://dbpedia.org/resource/Milk_Cow_Blues> <http://dbpedia.org/ontology/artist> ?uri . }",
        "entities": [
            "http://dbpedia.org/resource/Sings_Kristofferson",
            "http://dbpedia.org/resource/Milk_Cow_Blues"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Milk_Cow_Blues> -> PERFORMER",
            "<http://dbpedia.org/resource/Sings_Kristofferson> -> ARTIST"
        ],
        "paths": "<http://dbpedia.org/resource/Milk_Cow_Blues> -> PERFORMER, <http://dbpedia.org/resource/Sings_Kristofferson> -> ARTIST",
        "generated_query": "SELECT DISTINCT ?artist WHERE {\n  <http://dbpedia.org/resource/Sings_Kristofferson> <http://dbpedia.org/ontology/artist> ?artist .\n  <http://dbpedia.org/resource/Milk_Cow_Blues> <http://dbpedia.org/ontology/artist> ?artist .\n}"
    },
    {
        "question": "Who has fought in wars under commander Arthur St Clair?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Arthur_St._Clair> . ?x <http://dbpedia.org/property/combatant> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Arthur_St._Clair"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Arthur_St._Clair> -> WARRIOR"
        ],
        "paths": "<http://dbpedia.org/resource/Arthur_St._Clair> -> WARRIOR",
        "generated_query": "SELECT DISTINCT ?warrior WHERE {\n  ?battle <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Arthur_St._Clair> .\n  ?warrior <http://dbpedia.org/property/battles> ?battle .\n}"
    },
    {
        "question": "Which Paramount TV show was produced by Glen and Les Charles ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/executiveProducer> <http://dbpedia.org/resource/Glen_and_Les_Charles> . ?uri <http://dbpedia.org/property/company> <http://dbpedia.org/resource/Paramount_Television>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "entities": [
            "http://dbpedia.org/resource/Paramount_Pictures",
            "http://dbpedia.org/resource/Glen_and_Les_Charles"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Paramount_Pictures> -> <http://dbpedia.org/resource/Glen_and_Les_Charles>"
        ],
        "paths": "<http://dbpedia.org/resource/Paramount_Pictures> -> <http://dbpedia.org/resource/Glen_and_Les_Charles>",
        "generated_query": "SELECT DISTINCT ?show WHERE {\n  ?show <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Paramount_Pictures> .\n  ?show <http://dbpedia.org/property/creator> <http://dbpedia.org/resource/Glen_and_Les_Charles> .\n}"
    },
    {
        "question": "Name some basketball players who  have played for chicago bulls?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/team> <http://dbpedia.org/resource/Chicago_Bulls>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BasketballPlayer>}",
        "entities": [
            "http://dbpedia.org/resource/Chicago_Bulls",
            "http://dbpedia.org/resource/Basketball"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Basketball> -> <http://dbpedia.org/resource/Chicago_Bulls>"
        ],
        "paths": "<http://dbpedia.org/resource/Basketball> -> <http://dbpedia.org/resource/Chicago_Bulls>",
        "generated_query": "SELECT DISTINCT ?player WHERE {\n  {\n    ?player <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Basketball> .\n    ?player <http://dbpedia.org/property/team> <http://dbpedia.org/resource/Chicago_Bulls> .\n  }\n  UNION\n  {\n    ?player <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Basketball> .\n    ?player <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Chicago_Bulls> .\n  }\n}\nLIMIT 10"
    },
    {
        "question": "Which owner of the national Herald india is the leader of Kumta ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_National_Herald_(India)> <http://dbpedia.org/ontology/owner> ?uri. <http://dbpedia.org/resource/Kumta> <http://dbpedia.org/property/governmentType> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Kumta"
        ],
        "classes": [],
        "relations": [
            "OWNER -> \"national Herald india\"",
            "OWNER -> <http://dbpedia.org/resource/Kumta>",
            "<http://dbpedia.org/resource/Kumta> -> \"leader\""
        ],
        "paths": "<http://dbpedia.org/resource/Kumta> -> \"leader\"",
        "generated_query": "SELECT DISTINCT ?owner WHERE {\n  <http://dbpedia.org/resource/Kumta> <http://dbpedia.org/property/leaderName> ?owner .\n}"
    },
    {
        "question": "Was Francisco Pizarro of the monarch of Charles 5, of the roman empire?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/Francisco_Pizarro> <http://dbpedia.org/ontology/monarch> <http://dbpedia.org/resource/Charles_V,_Holy_Roman_Emperor> }",
        "entities": [
            "http://dbpedia.org/resource/Roman_Empire",
            "http://dbpedia.org/resource/Charles_V,_Holy_Roman_Emperor"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Francisco_Pizarro> -> <http://dbpedia.org/resource/Charles_V,_Holy_Roman_Emperor>",
            "<http://dbpedia.org/resource/Charles_V,_Holy_Roman_Emperor> -> <http://dbpedia.org/resource/Roman_Empire>",
            "<http://dbpedia.org/resource/Charles_V,_Holy_Roman_Emperor> -> \"monarch status\""
        ],
        "paths": "<http://dbpedia.org/resource/Francisco_Pizarro> -> <http://dbpedia.org/resource/Charles_V,_Holy_Roman_Emperor>, <http://dbpedia.org/resource/Charles_V,_Holy_Roman_Emperor> -> <http://dbpedia.org/resource/Roman_Empire>, <http://dbpedia.org/resource/Charles_V,_Holy_Roman_Emperor> -> \"monarch status\"",
        "generated_query": "ASK WHERE {\n  {\n    <http://dbpedia.org/resource/Francisco_Pizarro> <http://dbpedia.org/ontology/monarch> <http://dbpedia.org/resource/Charles_V,_Holy_Roman_Emperor> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Francisco_Pizarro> <http://dbpedia.org/property/monarch> <http://dbpedia.org/resource/Charles_V,_Holy_Roman_Emperor> .\n  }\n}"
    },
    {
        "question": "What is the largest city of Pulau Ubin ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pulau_Ubin> <http://dbpedia.org/ontology/largestCity> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Pulau_Ubin"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Pulau_Ubin> -> \"largest city\""
        ],
        "paths": "<http://dbpedia.org/resource/Pulau_Ubin> -> \"largest city\"",
        "generated_query": "SELECT DISTINCT ?city ?cityLabel WHERE {\n  <http://dbpedia.org/resource/Pulau_Ubin> <http://dbpedia.org/ontology/largestCity> ?city .\n  OPTIONAL {\n    ?city <http://www.w3.org/2000/01/rdf-schema#label> ?cityLabel .\n    FILTER (lang(?cityLabel) = \"en\")\n  }\n}"
    },
    {
        "question": "What is the origin of the musical artist of A Todo Romantic Style ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/A_Todo_Romantic_Style> <http://dbpedia.org/property/artist> ?x . ?x <http://dbpedia.org/property/origin> ?uri  . }",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?origin WHERE {\n  ?work <http://www.w3.org/2000/01/rdf-schema#label> \"A Todo Romantic Style\"@en .\n  ?work ?artistProp ?artist .\n  FILTER(?artistProp IN (\n    <http://dbpedia.org/ontology/artist>,\n    <http://dbpedia.org/ontology/performer>,\n    <http://dbpedia.org/ontology/musicalArtist>\n  )) .\n  ?artist ?originProp ?origin .\n  FILTER(?originProp IN (\n    <http://dbpedia.org/ontology/origin>,\n    <http://dbpedia.org/ontology/birthPlace>,\n    <http://dbpedia.org/ontology/hometown>\n  )) .\n}"
    },
    {
        "question": "Horses sired by Karinga Bay have participated in which races?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/sire> <http://dbpedia.org/resource/Karinga_Bay> . ?x <http://dbpedia.org/property/race> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Horse>}",
        "entities": [
            "http://dbpedia.org/resource/Cardigan_Bay_(horse)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Cardigan_Bay_(horse)> -> HORSES_SIRED_BY -> RACES_PARTICIPATED_IN"
        ],
        "paths": "<http://dbpedia.org/resource/Cardigan_Bay_(horse)> -> HORSES_SIRED_BY -> RACES_PARTICIPATED_IN",
        "generated_query": "SELECT DISTINCT ?race WHERE {\n  ?horse <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Cardigan_Bay_(horse)> .\n  ?horse <http://purl.org/dc/terms/subject> ?subject .\n  FILTER(?subject IN (\n    <http://dbpedia.org/resource/Category:1957_racehorse_births>,\n    <http://dbpedia.org/resource/Category:Inter_Dominion_winners>,\n    <http://dbpedia.org/resource/Category:New_Zealand_standardbred_racehorses>\n  )) .\n  {\n    ?horse <http://dbpedia.org/property/race> ?race .\n  } UNION {\n    ?horse <http://dbpedia.org/ontology/race> ?race .\n  }\n}"
    },
    {
        "question": "What is the alma mater of the scientists  known for  String theory?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/String_theory> . ?x <http://dbpedia.org/property/almaMater> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
        "entities": [
            "http://dbpedia.org/resource/String_theory",
            "http://dbpedia.org/resource/Alma_mater"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/String_theory> -> SCIENTIST -> <http://dbpedia.org/resource/Alma_mater>"
        ],
        "paths": "<http://dbpedia.org/resource/String_theory> -> SCIENTIST -> <http://dbpedia.org/resource/Alma_mater>",
        "generated_query": "SELECT DISTINCT ?scientist ?almaMater WHERE {\n  ?scientist <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/String_theory> .\n  ?scientist <http://dbpedia.org/ontology/almaMater> ?almaMater .\n}"
    },
    {
        "question": "How many apes are there?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE {?uri <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Ape>  . }",
        "entities": [
            "http://dbpedia.org/resource/Monkey"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Monkey> -> \"number of apes\""
        ],
        "paths": "<http://dbpedia.org/resource/Monkey> -> \"number of apes\"",
        "generated_query": "SELECT ?abstract WHERE {\n  <http://dbpedia.org/resource/Monkey> <http://www.w3.org/2002/07/owl#sameAs> ?entity .\n  ?entity <http://wikidata.dbpedia.org/ontology/abstract> ?abstract .\n}"
    },
    {
        "question": "What is a common nickname given to both Lyons Township high school and the wheaton college in massachusetts?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lyons_Township_High_School> <http://dbpedia.org/property/nickname> ?uri. <http://dbpedia.org/resource/Wheaton_College_(Massachusetts)> <http://dbpedia.org/property/nickname> ?uri . }",
        "entities": [
            "http://dbpedia.org/resource/Lyons_Township_High_School",
            "http://dbpedia.org/resource/Wheaton_College_(Massachusetts)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Wheaton_College_(Massachusetts)> -> \"nickname\"",
            "<http://dbpedia.org/resource/Lyons_Township_High_School> -> \"nickname\""
        ],
        "paths": "<http://dbpedia.org/resource/Wheaton_College_(Massachusetts)> -> \"nickname\", <http://dbpedia.org/resource/Lyons_Township_High_School> -> \"nickname\"",
        "generated_query": "SELECT DISTINCT ?nickname WHERE {\n  <http://dbpedia.org/resource/Lyons_Township_High_School> <http://dbpedia.org/property/nickname> ?nickname .\n  <http://dbpedia.org/resource/Wheaton_College_(Massachusetts)> <http://dbpedia.org/property/nickname> ?nickname .\n}"
    },
    {
        "question": "Where do beauty queens with brown hair reside?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/hairColor> <http://dbpedia.org/resource/Brown_hair> . ?x <http://dbpedia.org/ontology/residence> ?uri  . }",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?residence\nWHERE {\n  # No triples provided to fill in here.\n}\nLIMIT 10"
    },
    {
        "question": "List the television shows one of whose distributor's divisions is Warner Bros. Animation.",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/divisions> <http://dbpedia.org/resource/Warner_Bros._Animation> . ?uri <http://dbpedia.org/property/distributor> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "entities": [
            "http://dbpedia.org/resource/Warner_Bros._Animation"
        ],
        "classes": [],
        "relations": [
            "TELEVISION_SHOW -> DISTRIBUTOR -> DIVISION -> <http://dbpedia.org/resource/Warner_Bros._Animation>"
        ],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?tvShow WHERE {\n  ?tvShow <http://dbpedia.org/ontology/distributor> ?distributor .\n  ?distributor <http://dbpedia.org/ontology/division> <http://dbpedia.org/resource/Warner_Bros._Animation> .\n}"
    },
    {
        "question": "Name the television show directed by Simon Fuller and judged by Jennifier Lopez ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/creator> <http://dbpedia.org/resource/Simon_Fuller> . ?uri <http://dbpedia.org/property/judges> <http://dbpedia.org/resource/Jennifer_Lopez>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "entities": [
            "http://dbpedia.org/resource/Simon_Fuller"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Simon_Fuller> -> \"directed\""
        ],
        "paths": "<http://dbpedia.org/resource/Simon_Fuller> -> \"directed\"",
        "generated_query": "SELECT DISTINCT ?show ?showLabel WHERE {\n  ?show <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Simon_Fuller> .\n  ?show <http://dbpedia.org/ontology/showJudge> <http://dbpedia.org/resource/Jennifer_Lopez> .\n  ?show <http://www.w3.org/2000/01/rdf-schema#label> ?showLabel .\n  FILTER (lang(?showLabel) = \"en\")\n}"
    },
    {
        "question": "Name the appointer of William Clark ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/William_Clark> <http://dbpedia.org/property/appointer> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/William_Clark"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/William_Clark> -> \"appointer\""
        ],
        "paths": "<http://dbpedia.org/resource/William_Clark> -> \"appointer\"",
        "generated_query": "SELECT DISTINCT ?appointer WHERE {\n  <http://dbpedia.org/resource/William_Clark> <http://dbpedia.org/ontology/appointer> ?appointer .\n}"
    },
    {
        "question": "in which movies have momoki kochi acted",
        "gold_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Momoko_K\u014dchi> } ",
        "entities": [
            "http://dbpedia.org/resource/Maki_Goto"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Maki_Goto> -> \"acted in\""
        ],
        "paths": "<http://dbpedia.org/resource/Maki_Goto> -> \"acted in\"",
        "generated_query": "SELECT DISTINCT ?movie WHERE {\n  <http://dbpedia.org/resource/Maki_Goto> <http://dbpedia.org/ontology/wikiPageWikiLink> ?movie .\n}"
    },
    {
        "question": "What is the base currency of the Benelux and is also used as money in Kerguelen Islands?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Benelux> <http://dbpedia.org/property/currency> ?uri. <http://dbpedia.org/resource/Kerguelen_Islands> <http://dbpedia.org/ontology/currency> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Benelux",
            "http://dbpedia.org/resource/Kerguelen_Islands"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Kerguelen_Islands> -> \"currency\"",
            "<http://dbpedia.org/resource/Benelux> -> \"base currency\""
        ],
        "paths": "<http://dbpedia.org/resource/Kerguelen_Islands> -> \"currency\", <http://dbpedia.org/resource/Benelux> -> \"base currency\"",
        "generated_query": "SELECT DISTINCT ?currency WHERE {\n  <http://dbpedia.org/resource/Benelux> <http://dbpedia.org/ontology/currency> ?currency .\n  <http://dbpedia.org/resource/Kerguelen_Islands> <http://dbpedia.org/ontology/currency> ?currency .\n}"
    },
    {
        "question": "List the mammals whose taxonomy is Diprotodontia and phylum is Chordate?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/order> <http://dbpedia.org/resource/Diprotodontia> . ?uri <http://dbpedia.org/ontology/phylum> <http://dbpedia.org/resource/Chordate>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Mammal>}",
        "entities": [
            "http://dbpedia.org/resource/Chordate",
            "http://dbpedia.org/resource/Taxonomy_(biology)",
            "http://dbpedia.org/resource/Phylum",
            "http://dbpedia.org/resource/Mammal",
            "http://dbpedia.org/resource/Diprotodontia"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Mammal> -> <http://dbpedia.org/resource/Diprotodontia>",
            "<http://dbpedia.org/resource/Mammal> -> <http://dbpedia.org/resource/Chordate>"
        ],
        "paths": "<http://dbpedia.org/resource/Mammal> -> <http://dbpedia.org/resource/Diprotodontia>, <http://dbpedia.org/resource/Mammal> -> <http://dbpedia.org/resource/Chordate>",
        "generated_query": "{\n     ?m rdf:type <http://dbpedia.org/resource/Diprotodontia> .\n   }\n   UNION\n   {\n     ?m <http://dbpedia.org/property/order> <http://dbpedia.org/resource/Diprotodontia> .\n   }\n   UNION\n   {\n     ?m <http://dbpedia.org/ontology/order> <http://dbpedia.org/resource/Diprotodontia> .\n   }"
    },
    {
        "question": "Count the key people of the Clinton Foundation?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { <http://dbpedia.org/resource/Clinton_Foundation> <http://dbpedia.org/property/keyPeople> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Clinton_Foundation"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Clinton_Foundation> -> \"key people\""
        ],
        "paths": "<http://dbpedia.org/resource/Clinton_Foundation> -> \"key people\"",
        "generated_query": "SELECT (COUNT(DISTINCT ?person) AS ?count)\nWHERE {\n  {\n    <http://dbpedia.org/resource/Clinton_Foundation> <http://dbpedia.org/property/keyPeople> ?person .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Clinton_Foundation> <http://dbpedia.org/ontology/keyPerson> ?person .\n  }\n}"
    },
    {
        "question": "Name the company founded in New Mexico and provides Outlook.com as services ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/foundation> <http://dbpedia.org/resource/New_Mexico> . ?uri <http://dbpedia.org/property/services> <http://dbpedia.org/resource/Outlook.com>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
        "entities": [
            "http://dbpedia.org/resource/New_Mexico",
            "http://dbpedia.org/resource/Outlook.com"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/New_Mexico> -> <http://dbpedia.org/resource/Outlook.com>"
        ],
        "paths": "<http://dbpedia.org/resource/New_Mexico> -> <http://dbpedia.org/resource/Outlook.com>",
        "generated_query": "SELECT DISTINCT ?company WHERE {\n  ?company <http://dbpedia.org/ontology/foundationPlace> <http://dbpedia.org/resource/New_Mexico> .\n  ?company <http://dbpedia.org/ontology/service> <http://dbpedia.org/resource/Outlook.com> .\n}"
    },
    {
        "question": "Which tv show was preceded by The spirit of Christmas and voice to the character was given by Mona Marshall ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/previousWork> <http://dbpedia.org/resource/The_Spirit_of_Christmas_(short_film)> . ?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/Mona_Marshall>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "entities": [
            "http://dbpedia.org/resource/The_Spirit_of_Christmas_(TV_program)",
            "http://dbpedia.org/resource/Mona_Marshall"
        ],
        "classes": [],
        "relations": [
            "<TV_SHOW> -> \"voice actor\"",
            "<TV_SHOW> -> \"preceded by\"",
            "<http://dbpedia.org/resource/Mona_Marshall> -> <TV_SHOW>",
            "<http://dbpedia.org/resource/The_Spirit_of_Christmas_(TV_program)> -> <TV_SHOW>"
        ],
        "paths": "<http://dbpedia.org/resource/Mona_Marshall> -> <TV_SHOW>, <http://dbpedia.org/resource/The_Spirit_of_Christmas_(TV_program)> -> <TV_SHOW>",
        "generated_query": "SELECT DISTINCT ?show WHERE {\n  {\n    ?show <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/Mona_Marshall> .\n  } UNION {\n    ?show <http://dbpedia.org/ontology/voice> <http://dbpedia.org/resource/Mona_Marshall> .\n  }\n  {\n    ?show <http://dbpedia.org/property/predecessor> <http://dbpedia.org/resource/The_Spirit_of_Christmas_(TV_program)> .\n  } UNION {\n    ?show <http://dbpedia.org/ontology/predecessor> <http://dbpedia.org/resource/The_Spirit_of_Christmas_(TV_program)> .\n  } UNION {\n    ?show <http://dbpedia.org/property/prevSeries> <http://dbpedia.org/resource/The_Spirit_of_Christmas_(TV_program)> .\n  }\n}"
    },
    {
        "question": "Under which common jurisdiction do Trinity School, Brentwood and Buckhurst Hill County High School fall?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Trinity_School,_Brentwood> <http://dbpedia.org/ontology/localAuthority> ?uri. <http://dbpedia.org/resource/Buckhurst_Hill_County_High_School> <http://dbpedia.org/ontology/localAuthority> ?uri . }",
        "entities": [
            "http://dbpedia.org/resource/Trinity_School_(New_York_City)",
            "http://dbpedia.org/resource/Brentwood_County_High_School",
            "http://dbpedia.org/resource/Bunker_Hill_High_School",
            "http://dbpedia.org/resource/Brentwood_High_School_(New_York)",
            "http://dbpedia.org/resource/General_jurisdiction"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Trinity_School_(New_York_City)> -> <http://dbpedia.org/resource/General_jurisdiction>",
            "<http://dbpedia.org/resource/Bunker_Hill_High_School> -> <http://dbpedia.org/resource/General_jurisdiction>",
            "<http://dbpedia.org/resource/Brentwood_County_High_School> -> <http://dbpedia.org/resource/General_jurisdiction>"
        ],
        "paths": "<http://dbpedia.org/resource/Trinity_School_(New_York_City)> -> <http://dbpedia.org/resource/General_jurisdiction>, <http://dbpedia.org/resource/Bunker_Hill_High_School> -> <http://dbpedia.org/resource/General_jurisdiction>, <http://dbpedia.org/resource/Brentwood_County_High_School> -> <http://dbpedia.org/resource/General_jurisdiction>",
        "generated_query": "SELECT DISTINCT ?jurisdiction WHERE {\n  <http://dbpedia.org/resource/Trinity_School_(New_York_City)> <http://dbpedia.org/property/city> ?city .\n  ?city <http://dbpedia.org/ontology/wikiPageWikiLink> ?jurisdiction .\n\n  <http://dbpedia.org/resource/Brentwood_County_High_School> <http://dbpedia.org/ontology/country> ?country .\n  ?country <http://dbpedia.org/ontology/wikiPageWikiLink> ?jurisdiction .\n\n  <http://dbpedia.org/resource/Bunker_Hill_High_School> <http://dbpedia.org/ontology/wikiPageWikiLink> ?link1 .\n  ?link2 <http://dbpedia.org/ontology/country> ?link1 .\n  ?link2 <http://dbpedia.org/ontology/wikiPageWikiLink> ?jurisdiction .\n}"
    },
    {
        "question": "Music of how many things has been given by Akira Ifukube?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE {?uri <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Akira_Ifukube>  . }",
        "entities": [
            "http://dbpedia.org/resource/Akira_Ifukube"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Akira_Ifukube> -> \"music\""
        ],
        "paths": "<http://dbpedia.org/resource/Akira_Ifukube> -> \"music\"",
        "generated_query": "SELECT (COUNT(DISTINCT ?work) AS ?count)\nWHERE {\n  ?work <http://dbpedia.org/ontology/musicComposer> <http://dbpedia.org/resource/Akira_Ifukube> .\n}"
    },
    {
        "question": "What made jo garcia and merritt cabal both famous?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jo_Garcia> <http://dbpedia.org/ontology/knownFor> ?uri. <http://dbpedia.org/resource/Merritt_Cabal> <http://dbpedia.org/ontology/knownFor> ?uri . }",
        "entities": [
            "http://dbpedia.org/resource/Merton_Clivette"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Merton_Clivette> -> \"fame\""
        ],
        "paths": "<http://dbpedia.org/resource/Merton_Clivette> -> \"fame\"",
        "generated_query": "SELECT DISTINCT ?category WHERE {\n  <http://dbpedia.org/resource/Merton_Clivette> <http://purl.org/dc/terms/subject> ?category .\n}"
    },
    {
        "question": "What was the career of some people who have committed suicide?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/deathCause> <http://dbpedia.org/resource/Suicide> . ?x <http://dbpedia.org/ontology/occupation> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Suicide"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Suicide> -> CAREER"
        ],
        "paths": "<http://dbpedia.org/resource/Suicide> -> CAREER",
        "generated_query": "SELECT DISTINCT ?career WHERE {\n  ?person <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Suicide> .\n  ?person <http://dbpedia.org/ontology/wikiPageWikiLink> ?career .\n  FILTER (?career != <http://dbpedia.org/resource/Suicide>)\n}\nLIMIT 100"
    },
    {
        "question": "In how many places are the tombs of people who died in Connecticut Colony?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/property/placeOfDeath> <http://dbpedia.org/resource/Connecticut_Colony> . ?x <http://dbpedia.org/ontology/restingPlace> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Place>}",
        "entities": [
            "http://dbpedia.org/resource/Connecticut_Colony"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Connecticut_Colony> -> DECEASED -> TOMB -> \"location\""
        ],
        "paths": "<http://dbpedia.org/resource/Connecticut_Colony> -> DECEASED -> TOMB -> \"location\"",
        "generated_query": "SELECT (COUNT(DISTINCT ?place) AS ?count)\nWHERE {\n  {\n    ?person <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Connecticut_Colony> .\n  }\n  UNION\n  {\n    ?person <http://dbpedia.org/property/deathPlace> <http://dbpedia.org/resource/Connecticut_Colony> .\n  }\n  ?person <http://dbpedia.org/ontology/restingPlace> ?tomb .\n  OPTIONAL {\n    ?tomb <http://dbpedia.org/property/location> ?loc .\n  }\n  BIND(COALESCE(?loc, ?tomb) AS ?place)\n}"
    },
    {
        "question": "List the producer of the television shows distributed by FremantleMedia.",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/distributor> <http://dbpedia.org/resource/FremantleMedia> . ?x <http://dbpedia.org/ontology/producer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "entities": [
            "http://dbpedia.org/resource/Fremantle_(company)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Fremantle_(company)> -> DISTRIBUTED_TELEVISION_SHOW -> PRODUCER"
        ],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?producer WHERE {\n  <http://dbpedia.org/resource/Fremantle_(company)> ?dist ?show .\n  ?show ?prod ?producer .\n}"
    },
    {
        "question": "Name the awards won by Elie Wiesel ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Elie_Wiesel> <http://dbpedia.org/property/awards> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Elie_Wiesel"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Elie_Wiesel> -> \"award\""
        ],
        "paths": "<http://dbpedia.org/resource/Elie_Wiesel> -> \"award\"",
        "generated_query": "SELECT DISTINCT ?award WHERE {\n  {\n    <http://dbpedia.org/resource/Elie_Wiesel> <http://dbpedia.org/property/awards> ?award .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Elie_Wiesel> <http://dbpedia.org/ontology/award> ?award .\n  }\n}"
    },
    {
        "question": "Who are the producers of Marie Sisters?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Marie_Sisters> <http://dbpedia.org/property/producer> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Marie_Sisters"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Marie_Sisters> -> \"producer\""
        ],
        "paths": "<http://dbpedia.org/resource/Marie_Sisters> -> \"producer\"",
        "generated_query": "SELECT DISTINCT ?producer WHERE {\n  <http://dbpedia.org/resource/Marie_Sisters> <http://dbpedia.org/property/producer> ?producer .\n}"
    },
    {
        "question": "Who won the silver medal when the bronze was won by Yang Yilin?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/bronzeMedalist> <http://dbpedia.org/resource/Yang_Yilin> . ?x <http://dbpedia.org/ontology/silverMedalist> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Yang_Yilin"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Yang_Yilin> -> BRONZE_MEDAL_EVENT -> SILVER_MEDAL_WINNER"
        ],
        "paths": "<http://dbpedia.org/resource/Yang_Yilin> -> BRONZE_MEDAL_EVENT -> SILVER_MEDAL_WINNER",
        "generated_query": "SELECT DISTINCT ?silverMedalist WHERE {\n  ?event <http://dbpedia.org/ontology/bronzeMedalist> <http://dbpedia.org/resource/Yang_Yilin> .\n  ?event <http://dbpedia.org/ontology/silverMedalist> ?silverMedalist .\n}"
    },
    {
        "question": "List the successor of successor of Hayden, Stone & Co.",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hayden,_Stone_&_Co.> <http://dbpedia.org/ontology/successor> ?x . ?x <http://dbpedia.org/ontology/successor> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Hayden,_Stone_&_Co."
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Hayden,_Stone_&_Co.> -> SUCCESSOR -> SUCCESSOR"
        ],
        "paths": "<http://dbpedia.org/resource/Hayden,_Stone_&_Co.> -> SUCCESSOR -> SUCCESSOR",
        "generated_query": "SELECT DISTINCT ?secondSuccessor WHERE {\n  <http://dbpedia.org/resource/Hayden,_Stone_&_Co.> <http://dbpedia.org/ontology/successor> ?firstSuccessor .\n  ?firstSuccessor <http://dbpedia.org/ontology/successor> ?secondSuccessor .\n}"
    },
    {
        "question": "Count the number of battles fought by the military person involved in Morocco ?",
        "gold_query": " SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/property/battles> <http://dbpedia.org/resource/Morocco> . ?x <http://dbpedia.org/property/battles> ?uri }",
        "entities": [
            "http://dbpedia.org/resource/Morocco"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Morocco> -> MILITARY_PERSON"
        ],
        "paths": "<http://dbpedia.org/resource/Morocco> -> MILITARY_PERSON",
        "generated_query": "SELECT ?person (COUNT(DISTINCT ?battle) AS ?battleCount)\nWHERE {\n  ?person <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Morocco> .\n  ?person <http://dbpedia.org/ontology/battle> ?battle .\n}\nGROUP BY ?person"
    },
    {
        "question": "What is the origin of Xynisteri?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Xynisteri> <http://dbpedia.org/ontology/origin> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Xynisteri"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Xynisteri> -> \"origin\""
        ],
        "paths": "<http://dbpedia.org/resource/Xynisteri> -> \"origin\"",
        "generated_query": "SELECT DISTINCT ?origin WHERE {\n  {\n    <http://dbpedia.org/resource/Xynisteri> <http://dbpedia.org/ontology/origin> ?origin .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Xynisteri> <http://dbpedia.org/property/origin> ?origin .\n  }\n}"
    },
    {
        "question": "How many important works have been done by Russel Davies?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { <http://dbpedia.org/resource/Russell_T_Davies> <http://dbpedia.org/ontology/notableWork> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Russell_T_Davies"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Russell_T_Davies> -> \"important works\""
        ],
        "paths": "<http://dbpedia.org/resource/Russell_T_Davies> -> \"important works\"",
        "generated_query": "SELECT (COUNT(DISTINCT ?work) AS ?count) WHERE {\n  <http://dbpedia.org/resource/Russell_T_Davies> <http://dbpedia.org/ontology/notableWork> ?work .\n}"
    },
    {
        "question": "Who are currently playing for Barcelona FC?",
        "gold_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/currentclub> <http://dbpedia.org/resource/FC_Barcelona> } ",
        "entities": [
            "http://dbpedia.org/resource/FC_Barcelona"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/FC_Barcelona> -> \"currently playing\""
        ],
        "paths": "<http://dbpedia.org/resource/FC_Barcelona> -> \"currently playing\"",
        "generated_query": "SELECT DISTINCT ?player WHERE {\n  ?player <http://dbpedia.org/property/currentclub> <http://dbpedia.org/resource/FC_Barcelona> .\n}"
    },
    {
        "question": "Is Andrew Lincoln the narrator of Million Dollar Traders?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/Million_Dollar_Traders> <http://dbpedia.org/ontology/narrator> <http://dbpedia.org/resource/Andrew_Lincoln> }",
        "entities": [
            "http://dbpedia.org/resource/Andrew_Lincoln",
            "http://dbpedia.org/resource/Million_Dollar_Traders"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Million_Dollar_Traders> -> <http://dbpedia.org/resource/Andrew_Lincoln>"
        ],
        "paths": "<http://dbpedia.org/resource/Million_Dollar_Traders> -> <http://dbpedia.org/resource/Andrew_Lincoln>",
        "generated_query": "ASK WHERE {\n  {\n    <http://dbpedia.org/resource/Million_Dollar_Traders> <http://dbpedia.org/ontology/narrator> <http://dbpedia.org/resource/Andrew_Lincoln> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Million_Dollar_Traders> <http://dbpedia.org/property/narrated> <http://dbpedia.org/resource/Andrew_Lincoln> .\n  }\n}"
    },
    {
        "question": "Who is the owner of Saumarez ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Saumarez_(horse)> <http://dbpedia.org/ontology/owner> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Saumarez,_New_Brunswick"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Saumarez,_New_Brunswick> -> \"owner\""
        ],
        "paths": "<http://dbpedia.org/resource/Saumarez,_New_Brunswick> -> \"owner\"",
        "generated_query": "SELECT DISTINCT ?owner WHERE {\n  <http://dbpedia.org/resource/Saumarez,_New_Brunswick> <http://dbpedia.org/ontology/wikiPageWikiLink> ?x .\n  ?owner <http://dbpedia.org/ontology/owner> ?x .\n}"
    },
    {
        "question": "What is telecasted on the network where Deborah Turness holds important position?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/keyPerson> <http://dbpedia.org/resource/Deborah_Turness> . ?uri <http://dbpedia.org/ontology/network> ?x  . }",
        "entities": [
            "http://dbpedia.org/resource/Deborah_Turness"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Deborah_Turness> -> NETWORK -> \"telecasted content\""
        ],
        "paths": "<http://dbpedia.org/resource/Deborah_Turness> -> NETWORK -> \"telecasted content\"",
        "generated_query": "SELECT DISTINCT ?content WHERE {\n  ?network <http://dbpedia.org/ontology/keyPerson> <http://dbpedia.org/resource/Deborah_Turness> .\n  {\n    ?content <http://dbpedia.org/ontology/channel> ?network .\n  }\n  UNION\n  {\n    ?content <http://dbpedia.org/property/channel> ?network .\n  }\n}"
    },
    {
        "question": "Who is the fictional character whose relative is Vestigial Peter?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/relative> <http://dbpedia.org/resource/Vestigial_Peter>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
        "entities": [
            "http://dbpedia.org/resource/Vestigial_Peter"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Vestigial_Peter> -> RELATIVE -> FICTIONAL_CHARACTER"
        ],
        "paths": "<http://dbpedia.org/resource/Vestigial_Peter> -> RELATIVE -> FICTIONAL_CHARACTER",
        "generated_query": "SELECT DISTINCT ?character WHERE {\n  ?character <http://dbpedia.org/ontology/relative> <http://dbpedia.org/resource/Vestigial_Peter> .\n}"
    },
    {
        "question": "How many home stadium are there, of the soccer club seasons whose chairman is Merritt Paulson?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/property/chairman> <http://dbpedia.org/resource/Merritt_Paulson> . ?x <http://dbpedia.org/ontology/homeStadium> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Association_football",
            "http://dbpedia.org/resource/Merritt_Paulson"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Merritt_Paulson> -> SOCCER_CLUB_SEASON",
            "SOCCER_CLUB_SEASON -> \"home stadium\""
        ],
        "paths": "<http://dbpedia.org/resource/Merritt_Paulson> -> SOCCER_CLUB_SEASON",
        "generated_query": "SELECT (COUNT(DISTINCT ?homeStadium) AS ?countHomeStadiums)\nWHERE {\n  <http://dbpedia.org/resource/Merritt_Paulson> <http://dbpedia.org/ontology/wikiPageWikiLink> ?team .\n  ?team <http://dbpedia.org/ontology/season> ?season .\n  ?season <http://dbpedia.org/ontology/team> ?team .\n  ?team <http://dbpedia.org/ontology/homeStadium> ?homeStadium .\n}"
    },
    {
        "question": "Name the alma mater of Ernest de Saisset ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ernest_de_Saisset> <http://dbpedia.org/ontology/almaMater> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Alma_mater",
            "http://dbpedia.org/resource/Ernest_de_Saisset"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Ernest_de_Saisset> -> <http://dbpedia.org/resource/Alma_mater>"
        ],
        "paths": "<http://dbpedia.org/resource/Ernest_de_Saisset> -> <http://dbpedia.org/resource/Alma_mater>",
        "generated_query": "SELECT DISTINCT ?almaMaterLabel WHERE {\n  {\n    <http://dbpedia.org/resource/Ernest_de_Saisset> <http://dbpedia.org/ontology/almaMater> ?almaMater .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Ernest_de_Saisset> <http://dbpedia.org/property/almaMater> ?almaMater .\n  }\n  ?almaMater a <http://dbpedia.org/ontology/School> .\n  ?almaMater <http://www.w3.org/2000/01/rdf-schema#label> ?almaMaterLabel .\n  FILTER (lang(?almaMaterLabel) = \"en\")\n}"
    },
    {
        "question": "What magazine companies are of form Limited liability company?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/company> <http://dbpedia.org/resource/Limited_liability_company>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Magazine>}",
        "entities": [
            "http://dbpedia.org/resource/Limited_liability_company"
        ],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?company WHERE {\n  ?company a <http://dbpedia.org/ontology/Company> .\n  \n  {\n    ?company <http://dbpedia.org/ontology/companyType> <http://dbpedia.org/resource/Limited_liability_company> .\n  }\n  UNION\n  {\n    ?company <http://dbpedia.org/ontology/organisationType> <http://dbpedia.org/resource/Limited_liability_company> .\n  }\n  UNION\n  {\n    ?company <http://dbpedia.org/ontology/legalForm> <http://dbpedia.org/resource/Limited_liability_company> .\n  }\n  \n  {\n    ?company <http://dbpedia.org/ontology/product> ?magazineProduct .\n    ?magazineProduct a <http://dbpedia.org/ontology/Magazine> .\n  }\n  UNION\n  {\n    ?company <http://dbpedia.org/ontology/industry> ?magazineIndustry .\n    ?magazineIndustry a <http://dbpedia.org/ontology/Magazine> .\n  }\n}"
    },
    {
        "question": "List the driver of SA MArino Grand Prix is also the Pole driver of Canadian Grand Proix ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/1999_San_Marino_Grand_Prix> <http://dbpedia.org/property/firstDriver> ?uri. <http://dbpedia.org/resource/1997_Canadian_Grand_Prix> <http://dbpedia.org/property/poleDriver> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/San_Marino_and_Rimini_Riviera_motorcycle_Grand_Prix",
            "http://dbpedia.org/resource/Canadian_Grand_Prix"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Canadian_Grand_Prix> -> POLE_DRIVER",
            "<http://dbpedia.org/resource/San_Marino_and_Rimini_Riviera_motorcycle_Grand_Prix> -> DRIVER"
        ],
        "paths": "<http://dbpedia.org/resource/Canadian_Grand_Prix> -> POLE_DRIVER",
        "generated_query": "<http://dbpedia.org/resource/San_Marino_and_Rimini_Riviera_motorcycle_Grand_Prix> <someProperty> ?driver ."
    },
    {
        "question": "Where does John A Danaher III work?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_A._Danaher_III> <http://dbpedia.org/property/office> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/John_A._Danaher_III"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/John_A._Danaher_III> -> \"workplace\""
        ],
        "paths": "<http://dbpedia.org/resource/John_A._Danaher_III> -> \"workplace\"",
        "generated_query": "SELECT DISTINCT ?workplace WHERE {\n  <http://dbpedia.org/resource/John_A._Danaher_III> <http://dbpedia.org/property/office> ?workplace .\n}"
    },
    {
        "question": "Name few movies directed by Tim Burton ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/director> <http://dbpedia.org/resource/Tim_Burton>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "entities": [
            "http://dbpedia.org/resource/Tim_Burton"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Tim_Burton> -> <http://dbpedia.org/ontology/Movie>"
        ],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?movie ?label\nWHERE {\n  ?movie a <http://dbpedia.org/ontology/Movie> .\n  ?movie <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Tim_Burton> .\n  OPTIONAL {\n    ?movie <http://www.w3.org/2000/01/rdf-schema#label> ?label .\n    FILTER(lang(?label) = \"en\")\n  }\n}\nLIMIT 10"
    },
    {
        "question": "Where was Live in Detroit, MI recorded ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Live_in_Detroit,_MI> <http://dbpedia.org/ontology/recordedIn> ?uri } ",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?location WHERE {\n  ?recording <http://www.w3.org/2000/01/rdf-schema#label> \"Live in Detroit, MI\" .\n  ?recording ?property ?location .\n  FILTER(CONTAINS(LCASE(STR(?property)), \"location\") || CONTAINS(LCASE(STR(?property)), \"place\") || CONTAINS(LCASE(STR(?property)), \"venue\") || CONTAINS(LCASE(STR(?property)), \"recordedat\"))\n}"
    },
    {
        "question": "Name all the bands which have members of QDT in them.",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/QDT> <http://dbpedia.org/ontology/bandMember> ?x . ?x <http://dbpedia.org/ontology/associatedBand> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/QDT"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/QDT> -> BAND"
        ],
        "paths": "<http://dbpedia.org/resource/QDT> -> BAND",
        "generated_query": "SELECT DISTINCT ?band WHERE {\n  <http://dbpedia.org/resource/QDT> <http://dbpedia.org/property/currentMembers> ?member .\n  ?member <http://dbpedia.org/ontology/associatedBand> ?band .\n}"
    },
    {
        "question": "Which footballers did their high school in west Sacramento california? ",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/highSchool> <http://dbpedia.org/resource/West_Sacramento,_California>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AmericanFootballPlayer>}",
        "entities": [
            "http://dbpedia.org/resource/Sacramento,_California"
        ],
        "classes": [],
        "relations": [
            "FOOTBALLER -> HIGH_SCHOOL -> <http://dbpedia.org/resource/Sacramento,_California>"
        ],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?footballer WHERE {\n  ?footballer ?p1 ?highSchool .\n  ?highSchool ?p2 <http://dbpedia.org/resource/Sacramento,_California> .\n}"
    },
    {
        "question": "List the names of the soccer club seasons whose division is 2012 Campeonato Brasileiro Srie A.",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/league> <http://dbpedia.org/resource/2012_Campeonato_Brasileiro_S\u00e9rie_A> . ?x <http://dbpedia.org/property/name> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClubSeason>}",
        "entities": [
            "http://dbpedia.org/resource/Association_football",
            "http://dbpedia.org/resource/2012_Campeonato_Brasileiro_S\u00e9rie_A"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Association_football> -> \"SOCCER_CLUB_SEASON\" -> <http://dbpedia.org/resource/2012_Campeonato_Brasileiro_S\u00e9rie_A> -> \"name\""
        ],
        "paths": "<http://dbpedia.org/resource/Association_football> -> \"SOCCER_CLUB_SEASON\" -> <http://dbpedia.org/resource/2012_Campeonato_Brasileiro_S\u00e9rie_A> -> \"name\"",
        "generated_query": "SELECT DISTINCT ?name WHERE {\n  ?season <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/2012_Campeonato_Brasileiro_S\u00e9rie_A> .\n  ?season <http://dbpedia.org/property/name> ?name .\n}"
    },
    {
        "question": "Which successor of Philippine Ports Authority is the state of origin of Ruben J. Villote ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Philippine_Ports_Authority> <http://dbpedia.org/ontology/successor> ?uri. <http://dbpedia.org/resource/Ruben_J._Villote> <http://dbpedia.org/ontology/stateOfOrigin> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Ruben_J._Villote",
            "http://dbpedia.org/resource/Philippine_Ports_Authority"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Ruben_J._Villote> -> \"state of origin\"",
            "<http://dbpedia.org/resource/Philippine_Ports_Authority> -> SUCCESSOR"
        ],
        "paths": "<http://dbpedia.org/resource/Ruben_J._Villote> -> \"state of origin\", <http://dbpedia.org/resource/Philippine_Ports_Authority> -> SUCCESSOR",
        "generated_query": "SELECT DISTINCT ?successor WHERE {\n  <http://dbpedia.org/resource/Philippine_Ports_Authority> <http://dbpedia.org/ontology/successor> ?successor .\n  <http://dbpedia.org/resource/Ruben_J._Villote> <http://dbpedia.org/ontology/stateOfOrigin> ?state .\n  FILTER (?successor = ?state)\n}"
    },
    {
        "question": "What awards have been won by the executive producer of Timmy Time ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Timmy_Time> <http://dbpedia.org/ontology/executiveProducer> ?x . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Timmy_Time"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Timmy_Time> -> EXECUTIVE_PRODUCER -> \"awards\""
        ],
        "paths": "<http://dbpedia.org/resource/Timmy_Time> -> EXECUTIVE_PRODUCER -> \"awards\"",
        "generated_query": "SELECT DISTINCT ?award WHERE {\n  <http://dbpedia.org/resource/Timmy_Time> <http://dbpedia.org/property/executiveProducer> ?producer .\n  ?producer <http://dbpedia.org/property/awards> ?award .\n}"
    },
    {
        "question": "Which american football team is owned by Mark davis and is located in O.co Colliseum ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/owner> <http://dbpedia.org/resource/Mark_Davis_(American_football)> . ?uri <http://dbpedia.org/ontology/locationCity> <http://dbpedia.org/resource/O.co_Coliseum>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AmericanFootballTeam>}",
        "entities": [
            "http://dbpedia.org/resource/American_football",
            "http://dbpedia.org/resource/Ocoee,_Florida"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/American_football> -> \"location\" -> <http://dbpedia.org/resource/Ocoee,_Florida>",
            "<http://dbpedia.org/resource/American_football> -> \"owner\" -> \"Mark davis\""
        ],
        "paths": "<http://dbpedia.org/resource/American_football> -> \"location\" -> <http://dbpedia.org/resource/Ocoee,_Florida>, <http://dbpedia.org/resource/American_football> -> \"owner\" -> \"Mark davis\"",
        "generated_query": "SELECT DISTINCT ?team WHERE {\n  ?team <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/American_football> .\n  ?team <http://dbpedia.org/ontology/owner> ?owner .\n  ?team <http://dbpedia.org/property/location> ?loc .\n  \n  FILTER (regex(str(?owner), \"Mark davis\", \"i\")) .\n  FILTER (regex(str(?loc), \"O.co\", \"i\")) .\n  FILTER (regex(str(?loc), \"Collis?eum\", \"i\")) .\n}"
    },
    {
        "question": "The successor of Ulrich II, Count of East Frisia was born in what place?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ulrich_II,_Count_of_East_Frisia> <http://dbpedia.org/property/successor> ?x . ?x <http://dbpedia.org/property/placeOfBirth> ?uri  . }",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?birthPlace WHERE {\n  <http://example.org/resource/Ulrich_II_Count_of_East_Frisia> ?succPredicate ?successor .\n  ?successor ?birthPlacePredicate ?birthPlace .\n  FILTER(CONTAINS(LCASE(STR(?succPredicate)), \"successor\") || CONTAINS(LCASE(STR(?succPredicate)), \"next\"))\n  FILTER(CONTAINS(LCASE(STR(?birthPlacePredicate)), \"birthplace\") || CONTAINS(LCASE(STR(?birthPlacePredicate)), \"birth\"))\n}"
    },
    {
        "question": "Who is the prime minister of Michael Jeffery who is also the minister of Williuam Deane ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Michael_Jeffery> <http://dbpedia.org/property/primeminister> ?uri. <http://dbpedia.org/resource/William_Deane> <http://dbpedia.org/ontology/primeMinister> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/William_Deane",
            "http://dbpedia.org/resource/Michael_Jeffery"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/William_Deane> -> MINISTER",
            "<http://dbpedia.org/resource/Michael_Jeffery> -> PRIME_MINISTER"
        ],
        "paths": "<http://dbpedia.org/resource/William_Deane> -> MINISTER, <http://dbpedia.org/resource/Michael_Jeffery> -> PRIME_MINISTER",
        "generated_query": "SELECT DISTINCT ?pm WHERE {\n  {\n    <http://dbpedia.org/resource/Michael_Jeffery> <http://dbpedia.org/property/primeminister> ?pm .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Michael_Jeffery> <http://dbpedia.org/ontology/primeMinister> ?pm .\n  }\n  \n  {\n    <http://dbpedia.org/resource/William_Deane> <http://dbpedia.org/property/primeminister> ?pm .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/William_Deane> <http://dbpedia.org/ontology/primeMinister> ?pm .\n  }\n}"
    },
    {
        "question": "Who is the owner of the FC which owns the Cobham Training Centre?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cobham_Training_Centre> <http://dbpedia.org/property/owner> ?x . ?x <http://dbpedia.org/property/owner> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClub>}",
        "entities": [
            "http://dbpedia.org/resource/Cobham_Training_Centre",
            "http://dbpedia.org/resource/Fulham_F.C."
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Cobham_Training_Centre> -> <http://dbpedia.org/resource/Fulham_F.C.>",
            "<http://dbpedia.org/resource/Fulham_F.C.> -> \"owner\""
        ],
        "paths": "<http://dbpedia.org/resource/Cobham_Training_Centre> -> <http://dbpedia.org/resource/Fulham_F.C.>, <http://dbpedia.org/resource/Fulham_F.C.> -> \"owner\"",
        "generated_query": "SELECT DISTINCT ?owner WHERE {\n  {\n    <http://dbpedia.org/resource/Fulham_F.C.> <http://dbpedia.org/property/owner> ?owner .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Fulham_F.C.> <http://dbpedia.org/ontology/owner> ?owner .\n  }\n}"
    },
    {
        "question": "Who is considered to be the deciding person when it comes to crustaceans from the Balanidae family?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Balanidae> . ?x <http://dbpedia.org/ontology/binomialAuthority> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Crustacean>}",
        "entities": [
            "http://dbpedia.org/resource/Balanidae",
            "http://dbpedia.org/resource/Crustacean"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Balanidae> -> <http://dbpedia.org/resource/Crustacean>"
        ],
        "paths": "<http://dbpedia.org/resource/Balanidae> -> <http://dbpedia.org/resource/Crustacean>",
        "generated_query": "SELECT DISTINCT ?person WHERE {\n  ?person a <http://dbpedia.org/ontology/Person> .\n  <http://dbpedia.org/resource/Balanidae> ?p ?person .\n}"
    },
    {
        "question": "What have some US citizens died of?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/citizenship> <http://dbpedia.org/resource/United_States> . ?x <http://dbpedia.org/ontology/deathCause> ?uri  . }",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?cause WHERE {\n  ?person <http://example.org/ontology/citizenship> <http://example.org/resource/UnitedStates> .\n  ?person <http://example.org/ontology/causeOfDeath> ?cause .\n}"
    },
    {
        "question": "What are some apes?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Ape>  . }",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?ape WHERE {\n  ?ape <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> ?class .\n  ?class <http://www.w3.org/2000/01/rdf-schema#label> ?label .\n  FILTER (lcase(str(?label)) = \"ape\" || lcase(str(?label)) = \"apes\")\n}"
    },
    {
        "question": "Who is buried at the place governed by National Park Service?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/governingBody> <http://dbpedia.org/resource/National_Park_Service> . ?uri <http://dbpedia.org/property/restingplace> ?x  . }",
        "entities": [
            "http://dbpedia.org/resource/National_Park_Service"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/National_Park_Service> -> PLACE -> \"buried\""
        ],
        "paths": "<http://dbpedia.org/resource/National_Park_Service> -> PLACE -> \"buried\"",
        "generated_query": "SELECT DISTINCT ?person WHERE {\n  {\n    ?place <http://dbpedia.org/property/governingBody> <http://dbpedia.org/resource/National_Park_Service> .\n  }\n  UNION\n  {\n    ?place <http://dbpedia.org/ontology/governingBody> <http://dbpedia.org/resource/National_Park_Service> .\n  }\n  ?place <http://dbpedia.org/ontology/wikiPageWikiLink> ?link .\n  {\n    ?person <http://dbpedia.org/property/placeOfBurial> ?link .\n  }\n  UNION\n  {\n    ?person <http://dbpedia.org/property/buried> ?link .\n  }\n}"
    },
    {
        "question": "Name the municipality of Roberto Clemente Bridge ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Roberto_Clemente_Bridge> <http://dbpedia.org/ontology/municipality> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Roberto_Clemente_Bridge"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Roberto_Clemente_Bridge> -> <http://dbpedia.org/ontology/Municipality>"
        ],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?municipalityName WHERE {\n  <http://dbpedia.org/resource/Roberto_Clemente_Bridge> ?p ?municipality .\n  ?municipality a <http://dbpedia.org/ontology/Municipality> .\n  ?municipality <http://www.w3.org/2000/01/rdf-schema#label> ?municipalityName .\n  FILTER (lang(?municipalityName) = \"en\")\n}"
    },
    {
        "question": "Which past members of the The Conglomerate (American group) also sang Take Me There (Blackstreet & Ma song)?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Conglomerate_(American_group)> <http://dbpedia.org/property/pastMembers> ?uri. <http://dbpedia.org/resource/Take_Me_There_(Blackstreet_&_M\u00fda_song)> <http://dbpedia.org/ontology/musicalBand> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Consolidated_(band)",
            "http://dbpedia.org/resource/Blackstreet",
            "http://dbpedia.org/resource/Take_Me_There_(Blackstreet_and_Mya_song)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Consolidated_(band)> -> PAST_MEMBER",
            "<http://dbpedia.org/resource/Take_Me_There_(Blackstreet_and_Mya_song)> -> <http://dbpedia.org/resource/Blackstreet>"
        ],
        "paths": "<http://dbpedia.org/resource/Consolidated_(band)> -> PAST_MEMBER",
        "generated_query": "SELECT DISTINCT ?member WHERE {\n  # Member was in Consolidated (past member)\n  <http://dbpedia.org/resource/Consolidated_(band)> <http://dbpedia.org/ontology/bandMember> ?member .\n  \n  # Member was in Blackstreet (singer of Take Me There song)\n  <http://dbpedia.org/resource/Blackstreet> <http://dbpedia.org/ontology/bandMember> ?member .\n  \n  # Confirm that the song is \"Take Me There\"\n  # (Optional - since question only focuses on the band and song, and members were in band that sang song)\n  # Alternatively, we can check the song is by Blackstreet to tie back:\n  <http://dbpedia.org/resource/Take_Me_There_(Blackstreet_and_Mya_song)> <http://dbpedia.org/ontology/artist> <http://dbpedia.org/resource/Blackstreet> .\n}"
    },
    {
        "question": "List all the notable works of  Russell T Davies?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Russell_T_Davies> <http://dbpedia.org/ontology/notableWork> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Russell_T_Davies"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Russell_T_Davies> -> \"notable works\""
        ],
        "paths": "<http://dbpedia.org/resource/Russell_T_Davies> -> \"notable works\"",
        "generated_query": "SELECT DISTINCT ?notableWork WHERE {\n  {\n    <http://dbpedia.org/resource/Russell_T_Davies> <http://dbpedia.org/property/notableworks> ?notableWork .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Russell_T_Davies> <http://dbpedia.org/ontology/notableWork> ?notableWork .\n  }\n}"
    },
    {
        "question": "Which military unit garrison is Arlington County, Virginia and The Pentagon?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/garrison> <http://dbpedia.org/resource/Arlington_County,_Virginia> . ?uri <http://dbpedia.org/property/garrison> <http://dbpedia.org/resource/The_Pentagon>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryUnit>}",
        "entities": [
            "http://dbpedia.org/resource/The_Pentagon",
            "http://dbpedia.org/resource/Arlington_County,_Virginia"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Arlington_County,_Virginia> -> \"garrison\"",
            "<http://dbpedia.org/resource/The_Pentagon> -> \"garrison\""
        ],
        "paths": "<http://dbpedia.org/resource/Arlington_County,_Virginia> -> \"garrison\", <http://dbpedia.org/resource/The_Pentagon> -> \"garrison\"",
        "generated_query": "SELECT DISTINCT ?militaryUnit WHERE {\n  {\n    { ?militaryUnit <http://dbpedia.org/ontology/garrison> <http://dbpedia.org/resource/Arlington_County,_Virginia> . }\n    UNION\n    { ?militaryUnit <http://dbpedia.org/property/garrison> <http://dbpedia.org/resource/Arlington_County,_Virginia> . }\n  }\n  {\n    { ?militaryUnit <http://dbpedia.org/ontology/garrison> <http://dbpedia.org/resource/The_Pentagon> . }\n    UNION\n    { ?militaryUnit <http://dbpedia.org/property/garrison> <http://dbpedia.org/resource/The_Pentagon> . }\n  }\n}"
    },
    {
        "question": "Name all the products produced by the producer of United States dollar ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/product> <http://dbpedia.org/resource/United_States_dollar> . ?x <http://dbpedia.org/ontology/product> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/United_States_dollar"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/United_States_dollar> -> PRODUCER -> PRODUCTS"
        ],
        "paths": "<http://dbpedia.org/resource/United_States_dollar> -> PRODUCER -> PRODUCTS",
        "generated_query": "SELECT DISTINCT ?product WHERE {\n  <http://dbpedia.org/resource/United_States_dollar> <http://dbpedia.org/property/issuingAuthority> ?producer .\n  ?producer <http://dbpedia.org/ontology/wikiPageWikiLink> ?entity .\n  ?entity <http://dbpedia.org/ontology/product> ?product .\n}"
    },
    {
        "question": "What is the launch site of Aquarius (rocket) ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Aquarius_(rocket)> <http://dbpedia.org/ontology/launchSite> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Aquarius_(rocket)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Aquarius_(rocket)> -> \"launch site\""
        ],
        "paths": "<http://dbpedia.org/resource/Aquarius_(rocket)> -> \"launch site\"",
        "generated_query": "SELECT DISTINCT ?launchSite WHERE {\n  <http://dbpedia.org/resource/Aquarius_(rocket)> <http://dbpedia.org/ontology/launchSite> ?launchSite .\n}"
    },
    {
        "question": "What are the players whose former teams are Carolina Panthers and Indianapolis Colts?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/formerTeam> <http://dbpedia.org/resource/Carolina_Panthers> . ?uri <http://dbpedia.org/ontology/formerTeam> <http://dbpedia.org/resource/Indianapolis_Colts> . }",
        "entities": [
            "http://dbpedia.org/resource/Indianapolis_Colts",
            "http://dbpedia.org/resource/Carolina_Panthers"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Carolina_Panthers> -> PLAYER",
            "<http://dbpedia.org/resource/Indianapolis_Colts> -> PLAYER"
        ],
        "paths": "<http://dbpedia.org/resource/Carolina_Panthers> -> PLAYER, <http://dbpedia.org/resource/Indianapolis_Colts> -> PLAYER",
        "generated_query": "SELECT DISTINCT ?player WHERE {\n  ?player <http://dbpedia.org/ontology/formerTeam> <http://dbpedia.org/resource/Carolina_Panthers> .\n  ?player <http://dbpedia.org/ontology/formerTeam> <http://dbpedia.org/resource/Indianapolis_Colts> .\n}"
    },
    {
        "question": "Count the  total number of mammals whose phylum is Chordate and order (taxonomy) is Diprotodontia?",
        "gold_query": " SELECT DISTINCT (COUNT(?uri) as ?c) WHERE {?uri <http://dbpedia.org/ontology/phylum> <http://dbpedia.org/resource/Chordate> . ?uri <http://dbpedia.org/ontology/order> <http://dbpedia.org/resource/Diprotodontia> } ",
        "entities": [
            "http://dbpedia.org/resource/Chordate",
            "http://dbpedia.org/resource/Phylum",
            "http://dbpedia.org/resource/Diprotodontia",
            "http://dbpedia.org/resource/Mammal"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Mammal> -> <http://dbpedia.org/resource/Diprotodontia>",
            "<http://dbpedia.org/resource/Mammal> -> <http://dbpedia.org/resource/Phylum> -> <http://dbpedia.org/resource/Chordate>"
        ],
        "paths": "<http://dbpedia.org/resource/Mammal> -> <http://dbpedia.org/resource/Diprotodontia>, <http://dbpedia.org/resource/Mammal> -> <http://dbpedia.org/resource/Phylum> -> <http://dbpedia.org/resource/Chordate>",
        "generated_query": "SELECT (COUNT(DISTINCT ?mammal) AS ?count)\nWHERE {\n  ?mammal <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Mammal> .\n  ?mammal <http://dbpedia.org/ontology/phylum> <http://dbpedia.org/resource/Chordate> .\n  ?mammal <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Diprotodontia> .\n}"
    },
    {
        "question": "Who is the music composer of Kenny Dies ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kenny_Dies> <http://dbpedia.org/ontology/musicComposer> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Kenny_Dies"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Kenny_Dies> -> \"music composer\""
        ],
        "paths": "<http://dbpedia.org/resource/Kenny_Dies> -> \"music composer\"",
        "generated_query": "SELECT DISTINCT ?composer WHERE {\n  <http://dbpedia.org/resource/Kenny_Dies> <http://dbpedia.org/ontology/musicComposer> ?musicResource .\n  {\n    ?musicResource <http://dbpedia.org/ontology/writer> ?composer .\n  }\n  UNION\n  {\n    ?musicResource <http://dbpedia.org/property/writer> ?composer .\n  }\n  UNION\n  {\n    ?musicResource <http://dbpedia.org/ontology/musicalArtist> ?composer .\n  }\n}"
    },
    {
        "question": "How many cities are around the sea into which the aegean sea flows?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { <http://dbpedia.org/resource/Aegean_Sea> <http://dbpedia.org/ontology/outflow> ?x . ?x <http://dbpedia.org/property/cities> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sea>}",
        "entities": [
            "http://dbpedia.org/resource/Aegean_Sea"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Aegean_Sea> -> \"flows into\""
        ],
        "paths": "<http://dbpedia.org/resource/Aegean_Sea> -> \"flows into\"",
        "generated_query": "SELECT (COUNT(DISTINCT ?city) AS ?count)\nWHERE {\n  <http://dbpedia.org/resource/Aegean_Sea> <http://dbpedia.org/ontology/outflow> ?sea .\n  ?city a <http://dbpedia.org/ontology/City> .\n  ?city ?p ?sea .\n}"
    },
    {
        "question": "Where did the office holder  who is predecessor to Marco Aurelio Robles died ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/predecessor> <http://dbpedia.org/resource/Marco_Aurelio_Robles> . ?x <http://dbpedia.org/property/placeOfDeath> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
        "entities": [
            "http://dbpedia.org/resource/Marco_Aurelio_Robles"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Marco_Aurelio_Robles> -> PREDECESSOR -> DIED_LOCATION"
        ],
        "paths": "<http://dbpedia.org/resource/Marco_Aurelio_Robles> -> PREDECESSOR -> DIED_LOCATION",
        "generated_query": "SELECT DISTINCT ?deathPlace WHERE {\n  ?predecessor <http://dbpedia.org/ontology/predecessor> <http://dbpedia.org/resource/Marco_Aurelio_Robles> .\n  ?predecessor <http://dbpedia.org/ontology/deathPlace> ?deathPlace .\n}"
    },
    {
        "question": "Who is associated  with the musical artists from Africa '70 (band) and Tony Allen ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Africa_'70_(band)> . ?uri <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Tony_Allen_(musician)> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>}",
        "entities": [
            "http://dbpedia.org/resource/No._70_Group_RAF",
            "http://dbpedia.org/resource/Tony_Allen_(musician)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/No._70_Group_RAF> -> <http://dbpedia.org/resource/Tony_Allen_(musician)>"
        ],
        "paths": "<http://dbpedia.org/resource/No._70_Group_RAF> -> <http://dbpedia.org/resource/Tony_Allen_(musician)>",
        "generated_query": "SELECT DISTINCT ?person WHERE {\n  ?person <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/No._70_Group_RAF> .\n  ?person <http://dbpedia.org/property/wikiPageUsesTemplate> ?template .\n  <http://dbpedia.org/resource/Tony_Allen_(musician)> <http://dbpedia.org/property/wikiPageUsesTemplate> ?template .\n}"
    },
    {
        "question": "Is the Hyundai Lavita assembled in Kulim?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/Hyundai_Lavita> <http://dbpedia.org/ontology/assembly> <http://dbpedia.org/resource/Kulim> }",
        "entities": [
            "http://dbpedia.org/resource/Kulim_District",
            "http://dbpedia.org/resource/Hyundai_Lavita"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Hyundai_Lavita> -> <http://dbpedia.org/resource/Kulim_District>"
        ],
        "paths": "",
        "generated_query": "ASK WHERE {\n  <http://dbpedia.org/resource/Hyundai_Lavita> ?p <http://dbpedia.org/resource/Kulim_District> .\n}"
    },
    {
        "question": "What is the programme format of WWTR ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/WWTR> <http://dbpedia.org/ontology/programmeFormat> ?uri } ",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?format WHERE {\n  ?entity <http://www.w3.org/2000/01/rdf-schema#label> \"WWTR\" .\n  ?entity ?p ?format .\n  FILTER(CONTAINS(LCASE(STR(?p)), \"format\"))\n}"
    },
    {
        "question": "list the founders of Bream Bay ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Bream_Bay> <http://dbpedia.org/property/founder> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Bream_Bay"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Bream_Bay> -> \"founders\""
        ],
        "paths": "<http://dbpedia.org/resource/Bream_Bay> -> \"founders\"",
        "generated_query": "SELECT DISTINCT ?founder WHERE {\n  <http://dbpedia.org/resource/Bream_Bay> <http://dbpedia.org/ontology/founder> ?founder .\n}"
    },
    {
        "question": "Is Essex the Ceremonial County of West Tilbury?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/West_Tilbury> <http://dbpedia.org/ontology/ceremonialCounty> <http://dbpedia.org/resource/Essex> }",
        "entities": [
            "http://dbpedia.org/resource/Essex",
            "http://dbpedia.org/resource/West_Tilbury"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/West_Tilbury> -> <http://dbpedia.org/resource/Essex>"
        ],
        "paths": "<http://dbpedia.org/resource/West_Tilbury> -> <http://dbpedia.org/resource/Essex>",
        "generated_query": "ASK WHERE {\n  {\n    <http://dbpedia.org/resource/West_Tilbury> <http://dbpedia.org/ontology/ceremonialCounty> <http://dbpedia.org/resource/Essex> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/West_Tilbury> <http://dbpedia.org/property/lieutenancyEngland> <http://dbpedia.org/resource/Essex> .\n  }\n}"
    },
    {
        "question": "What is the total number of participant in conflict of SFOR?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/property/battles> <http://dbpedia.org/resource/SFOR> . ?x <http://dbpedia.org/ontology/battle> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Stabilisation_Force_in_Bosnia_and_Herzegovina"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Stabilisation_Force_in_Bosnia_and_Herzegovina> -> \"total number of participants\""
        ],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?value WHERE {\n  <http://dbpedia.org/resource/Stabilisation_Force_in_Bosnia_and_Herzegovina> ?p ?value .\n  FILTER(isLiteral(?value) && (datatype(?value) = <http://www.w3.org/2001/XMLSchema#integer> || datatype(?value) = <http://www.w3.org/2001/XMLSchema#decimal> || datatype(?value) = <http://www.w3.org/2001/XMLSchema#double>))\n}"
    },
    {
        "question": "Name the people whose academic advisor has also mentored the thesis of Alexius Meinong?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/doctoralStudents> <http://dbpedia.org/resource/Alexius_Meinong> . ?uri <http://dbpedia.org/ontology/academicAdvisor> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "entities": [
            "http://dbpedia.org/resource/Alexius_Meinong"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Alexius_Meinong> -> ACADEMIC_ADVISOR -> ACADEMIC_ADVISOR"
        ],
        "paths": "<http://dbpedia.org/resource/Alexius_Meinong> -> ACADEMIC_ADVISOR -> ACADEMIC_ADVISOR",
        "generated_query": "SELECT DISTINCT ?person WHERE {\n  ?advisor <http://dbpedia.org/ontology/doctoralStudent> <http://dbpedia.org/resource/Alexius_Meinong> .\n  ?advisor <http://dbpedia.org/ontology/doctoralStudent> ?person .\n  FILTER (?person != <http://dbpedia.org/resource/Alexius_Meinong>)\n}"
    },
    {
        "question": "Where is Denver Broncos located ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Denver_Broncos> <http://dbpedia.org/ontology/locationCity> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Denver_Broncos"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Denver_Broncos> -> \"location\""
        ],
        "paths": "<http://dbpedia.org/resource/Denver_Broncos> -> \"location\"",
        "generated_query": "SELECT DISTINCT ?location WHERE {\n  <http://dbpedia.org/resource/Denver_Broncos> <http://dbpedia.org/ontology/locationCity> ?location .\n}"
    },
    {
        "question": "Which serving railway line of the Daund Junction railway station is the home port of INS Viraat ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/INS_Viraat_(R22)> <http://dbpedia.org/ontology/homeport> ?uri. <http://dbpedia.org/resource/Daund_Junction_railway_station> <http://dbpedia.org/ontology/servingRailwayLine> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Daund_Junction_railway_station",
            "http://dbpedia.org/resource/INS_Viraat"
        ],
        "classes": [],
        "relations": [
            "SERVING_RAILWAY_LINE -> <http://dbpedia.org/resource/INS_Viraat> -> HOME_PORT",
            "<http://dbpedia.org/resource/Daund_Junction_railway_station> -> SERVING_RAILWAY_LINE",
            "<http://dbpedia.org/resource/INS_Viraat> -> HOME_PORT"
        ],
        "paths": "SERVING_RAILWAY_LINE -> <http://dbpedia.org/resource/INS_Viraat> -> HOME_PORT, <http://dbpedia.org/resource/Daund_Junction_railway_station> -> SERVING_RAILWAY_LINE, <http://dbpedia.org/resource/INS_Viraat> -> HOME_PORT",
        "generated_query": "SELECT DISTINCT ?servingRailwayLine WHERE {\n  <http://dbpedia.org/resource/Daund_Junction_railway_station> <http://dbpedia.org/ontology/servingRailwayLine> ?servingRailwayLine .\n  \n  <http://dbpedia.org/resource/INS_Viraat> <http://dbpedia.org/ontology/wikiPageWikiLink> ?ship .\n  \n  {\n    ?ship <http://dbpedia.org/property/shipHomeport> ?homePort .\n  }\n  UNION\n  {\n    ?ship <http://dbpedia.org/ontology/homeport> ?homePort .\n  }\n  \n  FILTER (?servingRailwayLine = ?homePort)\n}"
    },
    {
        "question": "Which river flows through Hudson Highlands State park and also through Troy, New york ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hudson_Highlands_State_Park> <http://dbpedia.org/property/river> ?uri. <http://dbpedia.org/resource/Troy,_New_York> <http://dbpedia.org/ontology/river> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Hudson_Highlands_State_Park",
            "http://dbpedia.org/resource/Troy,_New_York"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Hudson_Highlands_State_Park> -> <http://dbpedia.org/resource/Troy,_New_York>"
        ],
        "paths": "<http://dbpedia.org/resource/Hudson_Highlands_State_Park> -> <http://dbpedia.org/resource/Troy,_New_York>",
        "generated_query": "SELECT DISTINCT ?river WHERE {\n  <http://dbpedia.org/resource/Hudson_Highlands_State_Park> <http://dbpedia.org/property/river> ?river .\n  <http://dbpedia.org/resource/Troy,_New_York> <http://dbpedia.org/property/river> ?river .\n}"
    },
    {
        "question": "What is the university to which Erica Frank went, and where Ivan Toplak was a club manager?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Erica_Frank> <http://dbpedia.org/ontology/institution> ?uri. <http://dbpedia.org/resource/Ivan_Toplak> <http://dbpedia.org/ontology/managerClub> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Erica_Frank",
            "http://dbpedia.org/resource/Ivan_Toplak"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Ivan_Toplak> -> <http://dbpedia.org/ontology/Club>",
            "<http://dbpedia.org/resource/Erica_Frank> -> <http://dbpedia.org/ontology/University>"
        ],
        "paths": "<http://dbpedia.org/resource/Erica_Frank> -> <http://dbpedia.org/ontology/University>",
        "generated_query": "<http://dbpedia.org/resource/Ivan_Toplak> -> <http://dbpedia.org/ontology/Club>\n<http://dbpedia.org/resource/Erica_Frank> -> <http://dbpedia.org/ontology/University>"
    },
    {
        "question": "How many movies have been directed by Orson Welles ?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE {?uri <http://dbpedia.org/property/director> <http://dbpedia.org/resource/Orson_Welles>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "entities": [
            "http://dbpedia.org/resource/Orson_Welles"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Orson_Welles> -> \"directed movies count\""
        ],
        "paths": "<http://dbpedia.org/resource/Orson_Welles> -> \"directed movies count\"",
        "generated_query": "SELECT (COUNT(DISTINCT ?movie) AS ?count)\nWHERE {\n  {\n    ?movie <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Orson_Welles> .\n  }\n  UNION\n  {\n    ?movie <http://dbpedia.org/property/director> <http://dbpedia.org/resource/Orson_Welles> .\n  }\n}"
    },
    {
        "question": "Which borough is common for Duddeston and Bordesley railway station ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Duddeston_railway_station> <http://dbpedia.org/property/borough> ?uri. <http://dbpedia.org/resource/Bordesley_railway_station> <http://dbpedia.org/property/borough> ?uri . }",
        "entities": [
            "http://dbpedia.org/resource/Duddeston_railway_station"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Duddeston_railway_station> -> \"borough\"",
            "<http://dbpedia.org/resource/Bordesley_railway_station> -> \"borough\""
        ],
        "paths": "<http://dbpedia.org/resource/Duddeston_railway_station> -> \"borough\", <http://dbpedia.org/resource/Bordesley_railway_station> -> \"borough\"",
        "generated_query": "SELECT DISTINCT ?borough WHERE {\n  <http://dbpedia.org/resource/Duddeston_railway_station> <http://dbpedia.org/property/borough> ?borough .\n  <http://dbpedia.org/resource/Bordesley_railway_station> <http://dbpedia.org/property/borough> ?borough .\n}"
    },
    {
        "question": "Does Mauritius follow a parliamentary republic?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/Mauritius> <http://dbpedia.org/property/governmentType> <http://dbpedia.org/resource/Parliamentary_republic> }",
        "entities": [
            "http://dbpedia.org/resource/Parliamentary_republic",
            "http://dbpedia.org/resource/Mauritius"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Mauritius> -> <http://dbpedia.org/resource/Parliamentary_republic>"
        ],
        "paths": "<http://dbpedia.org/resource/Mauritius> -> <http://dbpedia.org/resource/Parliamentary_republic>",
        "generated_query": "ASK WHERE {\n  {\n    <http://dbpedia.org/resource/Mauritius> <http://dbpedia.org/ontology/governmentType> <http://dbpedia.org/resource/Parliamentary_republic> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Mauritius> <http://dbpedia.org/property/governmentType> <http://dbpedia.org/resource/Parliamentary_republic> .\n  }\n}"
    },
    {
        "question": "Who is the performer of the album whose subsequent work is Willie Nelson and Family ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/subsequentWork> <http://dbpedia.org/resource/Willie_Nelson_and_Family> . ?x <http://dbpedia.org/ontology/artist> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Willie_Nelson_and_Family"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Willie_Nelson_and_Family> -> PREDECESSOR -> PERFORMER"
        ],
        "paths": "<http://dbpedia.org/resource/Willie_Nelson_and_Family> -> PREDECESSOR -> PERFORMER",
        "generated_query": "SELECT DISTINCT ?performer WHERE {\n  ?album <http://dbpedia.org/ontology/subsequentWork> <http://dbpedia.org/resource/Willie_Nelson_and_Family> .\n  ?album <http://dbpedia.org/property/artist> ?performer .\n}"
    },
    {
        "question": "What is the birthplace of Ludovic Boi which is also the residence of Fernando Augustin?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ludovic_Boi> <http://dbpedia.org/ontology/birthPlace> ?uri. <http://dbpedia.org/resource/Fernando_Augustin> <http://dbpedia.org/property/residence> ?uri . }",
        "entities": [
            "http://dbpedia.org/resource/Ferdinand,_Prince_of_Asturias",
            "http://dbpedia.org/resource/Ludovic_Boi"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Ludovic_Boi> -> \"birthplace\"",
            "<http://dbpedia.org/resource/Ferdinand,_Prince_of_Asturias> -> \"residence\""
        ],
        "paths": "<http://dbpedia.org/resource/Ludovic_Boi> -> \"birthplace\", <http://dbpedia.org/resource/Ferdinand,_Prince_of_Asturias> -> \"residence\"",
        "generated_query": "SELECT DISTINCT ?place WHERE {\n  {\n    <http://dbpedia.org/resource/Ludovic_Boi> <http://dbpedia.org/ontology/birthPlace> ?place .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Ludovic_Boi> <http://dbpedia.org/property/placeOfBirth> ?place .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Ludovic_Boi> <http://dbpedia.org/property/birthPlace> ?place .\n  }\n  \n  {\n    <http://dbpedia.org/resource/Ferdinand,_Prince_of_Asturias> <http://dbpedia.org/ontology/residence> ?place .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Ferdinand,_Prince_of_Asturias> <http://dbpedia.org/property/residence> ?place .\n  }\n}"
    },
    {
        "question": "Who is the producer of album, which has the song Eclipse ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Eclipse_(song)> <http://dbpedia.org/ontology/album> ?x . ?x <http://dbpedia.org/property/producer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Album>}",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?producer WHERE {\n  ?album <ALL_CAPS_HAS_SONG> ?song .\n  ?song <ALL_CAPS_NAME> \"Eclipse\" .\n  ?album <ALL_CAPS_PRODUCER> ?producer .\n}"
    },
    {
        "question": "Which parties have their members live in the PM House, Colombo?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/residence> <http://dbpedia.org/resource/Prime_Minister's_House_(Colombo)> . ?uri <http://dbpedia.org/ontology/leader> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty>}",
        "entities": [
            "http://dbpedia.org/resource/Colombo"
        ],
        "classes": [],
        "relations": [
            "PARTY -> MEMBER -> RESIDENCE -> <http://dbpedia.org/resource/Colombo>"
        ],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?party WHERE {\n  ?party ?p1 ?member .\n  ?member ?p2 ?residence .\n  ?residence ?p3 <http://dbpedia.org/resource/Colombo> .\n}"
    },
    {
        "question": "Which awards have been given to scientists that graduated from NKU athens?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/National_and_Kapodistrian_University_of_Athens> . ?x <http://dbpedia.org/ontology/award> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
        "entities": [
            "http://dbpedia.org/resource/National_and_Kapodistrian_University_of_Athens"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/National_and_Kapodistrian_University_of_Athens> -> SCIENTIST -> AWARD"
        ],
        "paths": "<http://dbpedia.org/resource/National_and_Kapodistrian_University_of_Athens> -> SCIENTIST -> AWARD",
        "generated_query": "SELECT DISTINCT ?award WHERE {\n  ?person <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/National_and_Kapodistrian_University_of_Athens> .\n  ?person ?awardProperty ?award .\n  FILTER(isIRI(?award))\n}"
    },
    {
        "question": "Ricky Gervais is the executive producer of the series having how many fictional characters?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/ontology/executiveProducer> <http://dbpedia.org/resource/Ricky_Gervais> . ?uri <http://dbpedia.org/ontology/series> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
        "entities": [
            "http://dbpedia.org/resource/Ricky_Gervais"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Ricky_Gervais> -> EXECUTIVE_PRODUCER -> SERIES -> FICTIONAL_CHARACTERS"
        ],
        "paths": "<http://dbpedia.org/resource/Ricky_Gervais> -> EXECUTIVE_PRODUCER -> SERIES -> FICTIONAL_CHARACTERS",
        "generated_query": "SELECT (SUM(?count) AS ?totalFictionalCharacters)\nWHERE {\n  {\n    SELECT ?series (COUNT(DISTINCT ?character) AS ?count)\n    WHERE {\n      ?series <http://dbpedia.org/ontology/executiveProducer> <http://dbpedia.org/resource/Ricky_Gervais> .\n      ?series <http://dbpedia.org/ontology/fictionalCharacter> ?character .\n    }\n    GROUP BY ?series\n  }\n}"
    },
    {
        "question": "Did Jerry Rice study in Oktoc Mississippi?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/Jerry_Rice> <http://dbpedia.org/property/highSchool> <http://dbpedia.org/resource/Oktoc,_Mississippi> }",
        "entities": [
            "http://dbpedia.org/resource/Jerry_Rice",
            "http://dbpedia.org/resource/University_of_Mississippi"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Jerry_Rice> -> <http://dbpedia.org/resource/University_of_Mississippi>"
        ],
        "paths": "<http://dbpedia.org/resource/Jerry_Rice> -> <http://dbpedia.org/resource/University_of_Mississippi>",
        "generated_query": "ASK WHERE {\n  <http://dbpedia.org/resource/Jerry_Rice> <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/University_of_Mississippi> .\n}"
    },
    {
        "question": "Cable stayed bridges have been used to cross over how many things?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/property/design> <http://dbpedia.org/resource/Cable-stayed_bridge> . ?x <http://dbpedia.org/property/crosses> ?uri  . }",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT (COUNT(DISTINCT ?thing) AS ?count)\nWHERE {\n}"
    },
    {
        "question": "Is north caucasian emirate have an islamic government?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/North_Caucasian_Emirate> <http://dbpedia.org/ontology/governmentType> <http://dbpedia.org/resource/Islam> }",
        "entities": [
            "http://dbpedia.org/resource/North_Caucasian_Emirate"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/North_Caucasian_Emirate> -> \"government type\""
        ],
        "paths": "<http://dbpedia.org/resource/North_Caucasian_Emirate> -> \"government type\"",
        "generated_query": "ASK WHERE {\n  <http://dbpedia.org/resource/North_Caucasian_Emirate> <http://dbpedia.org/property/governmentType> ?govType .\n  FILTER(CONTAINS(LCASE(STR(?govType)), \"islamic\"))\n}"
    },
    {
        "question": "What are the television shows whose starting music is composed by Ron Grainer?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Ron_Grainer>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "entities": [
            "http://dbpedia.org/resource/Ron_Grainer"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Ron_Grainer> -> TELEVISION_SHOW"
        ],
        "paths": "<http://dbpedia.org/resource/Ron_Grainer> -> TELEVISION_SHOW",
        "generated_query": "SELECT DISTINCT ?show WHERE {\n  ?show <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Ron_Grainer> .\n  ?show <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow> .\n}"
    },
    {
        "question": "Who influenced the author of The Shooting of Dan McGrew ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Shooting_of_Dan_McGrew_(1924_film)> <http://dbpedia.org/ontology/writer> ?x . ?x <http://dbpedia.org/property/influences> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/The_Shooting_of_Dan_McGrew"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/The_Shooting_of_Dan_McGrew> -> AUTHOR -> INFLUENCER"
        ],
        "paths": "<http://dbpedia.org/resource/The_Shooting_of_Dan_McGrew> -> AUTHOR -> INFLUENCER",
        "generated_query": "SELECT DISTINCT ?influencer WHERE {\n  <http://dbpedia.org/resource/The_Shooting_of_Dan_McGrew> <http://dbpedia.org/ontology/author> ?author .\n  ?influencer <http://dbpedia.org/property/influenced> ?author .\n}"
    },
    {
        "question": "Raymond Johansen is the mayor of what city?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/leaderName> <http://dbpedia.org/resource/Raymond_Johansen>  . }",
        "entities": [
            "http://dbpedia.org/resource/Raymond_Johansen"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Raymond_Johansen> -> CITY"
        ],
        "paths": "<http://dbpedia.org/resource/Raymond_Johansen> -> CITY",
        "generated_query": "SELECT DISTINCT ?city WHERE {\n  ?city <http://dbpedia.org/ontology/leaderName> <http://dbpedia.org/resource/Raymond_Johansen> .\n}"
    },
    {
        "question": "What region was Gloria Schaffer born in, which also contains Newington?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Gloria_Schaffer> <http://dbpedia.org/property/birthPlace> ?uri. <http://dbpedia.org/resource/Newington,_Connecticut> <http://dbpedia.org/ontology/isPartOf> ?uri . }",
        "entities": [
            "http://dbpedia.org/resource/Newington,_London",
            "http://dbpedia.org/resource/Gloria_Schaffer"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Newington,_London> -> REGION",
            "<http://dbpedia.org/resource/Gloria_Schaffer> -> REGION"
        ],
        "paths": "<http://dbpedia.org/resource/Newington,_London> -> REGION, <http://dbpedia.org/resource/Gloria_Schaffer> -> REGION",
        "generated_query": "SELECT DISTINCT ?region WHERE {\n  <http://dbpedia.org/resource/Gloria_Schaffer> <http://dbpedia.org/ontology/birthPlace> ?birthPlace .\n  ?birthPlace <http://dbpedia.org/ontology/isPartOf> ?region .\n\n  {\n    <http://dbpedia.org/resource/Newington,_London> <http://dbpedia.org/ontology/region> ?region .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Newington,_London> <http://dbpedia.org/ontology/borough> ?borough .\n    ?borough <http://dbpedia.org/ontology/region> ?region .\n  }\n}"
    },
    {
        "question": "List some teams for which someone who has played as a defender, now plays?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/position> <http://dbpedia.org/resource/Defenceman> . ?x <http://dbpedia.org/ontology/team> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Defender_(association_football)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Defender_(association_football)> -> \"member\""
        ],
        "paths": "<http://dbpedia.org/resource/Defender_(association_football)> -> \"member\"",
        "generated_query": "SELECT DISTINCT ?club WHERE {\n  ?player <http://dbpedia.org/ontology/position> <http://dbpedia.org/resource/Defender_(association_football)> .\n  ?player <http://dbpedia.org/property/currentclub> ?club .\n  FILTER(isIRI(?club))\n}\nLIMIT 20"
    },
    {
        "question": "Which rivers start from the Provinces of Zambia?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/settlementType> <http://dbpedia.org/resource/Provinces_of_Zambia> . ?uri <http://dbpedia.org/ontology/sourceRegion> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "entities": [
            "http://dbpedia.org/resource/Provinces_of_Zambia"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Provinces_of_Zambia> -> RIVERS"
        ],
        "paths": "<http://dbpedia.org/resource/Provinces_of_Zambia> -> RIVERS",
        "generated_query": "SELECT DISTINCT ?river WHERE {\n  <http://dbpedia.org/resource/Provinces_of_Zambia> <http://dbpedia.org/ontology/wikiPageWikiLink> ?country .\n  ?river <http://dbpedia.org/ontology/sourceCountry> ?country .\n}"
    },
    {
        "question": "Who are the scientists known for the Manhattan Project?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/knownFor> <http://dbpedia.org/resource/Manhattan_Project>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
        "entities": [
            "http://dbpedia.org/resource/Manhattan_Project"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Manhattan_Project> -> SCIENTIST"
        ],
        "paths": "<http://dbpedia.org/resource/Manhattan_Project> -> SCIENTIST",
        "generated_query": "SELECT DISTINCT ?person WHERE {\n  ?person <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/Manhattan_Project> .\n  ?person <http://purl.org/dc/terms/subject> ?category .\n  FILTER (\n    regex(str(?category), \"Manhattan_Project_people\", \"i\") ||\n    regex(str(?category), \"physicist\", \"i\") ||\n    regex(str(?category), \"scientist\", \"i\")\n  )\n}"
    },
    {
        "question": "What are some dishes from the family of dishes which primarily use flour?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/mainIngredient> <http://dbpedia.org/resource/Flour> . ?uri <http://dbpedia.org/ontology/type> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Food>}",
        "entities": [
            "http://dbpedia.org/resource/Flour"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Flour> -> FAMILY_OF_DISHES"
        ],
        "paths": "<http://dbpedia.org/resource/Flour> -> FAMILY_OF_DISHES",
        "generated_query": "SELECT DISTINCT ?dish ?category WHERE {\n  ?dish <http://dbpedia.org/property/mainIngredient> <http://dbpedia.org/resource/Flour> .\n  OPTIONAL { ?dish <http://purl.org/dc/terms/subject> ?category . }\n}\nLIMIT 100"
    },
    {
        "question": "Which religion do the people follow, whose constituency is Jadavpur?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/constituency> <http://dbpedia.org/resource/Jadavpur_(Lok_Sabha_constituency)> . ?x <http://dbpedia.org/property/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "entities": [
            "http://dbpedia.org/resource/Jadavpur_Lok_Sabha_constituency"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Jadavpur_Lok_Sabha_constituency> -> PEOPLE -> RELIGION"
        ],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?religion WHERE {\n  <http://dbpedia.org/resource/Jadavpur_Lok_Sabha_constituency> ?p1 ?person .\n  ?person ?p2 ?religion .\n}"
    },
    {
        "question": "In which region is the rival school of Somerset, Massachusetts located?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/rival> <http://dbpedia.org/resource/Somerset,_Massachusetts> . ?x <http://dbpedia.org/ontology/region> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>}",
        "entities": [
            "http://dbpedia.org/resource/Somerset,_Massachusetts"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Somerset,_Massachusetts> -> RIVAL_SCHOOL -> REGION"
        ],
        "paths": "<http://dbpedia.org/resource/Somerset,_Massachusetts> -> RIVAL_SCHOOL -> REGION",
        "generated_query": "SELECT DISTINCT ?region WHERE {\n  {\n    ?rivalSchool <http://dbpedia.org/property/rival> <http://dbpedia.org/resource/Somerset,_Massachusetts> .\n  }\n  UNION\n  {\n    ?rivalSchool <http://dbpedia.org/ontology/rival> <http://dbpedia.org/resource/Somerset,_Massachusetts> .\n  }\n  ?rivalSchool <http://dbpedia.org/property/region> ?region .\n}"
    },
    {
        "question": "Which key person of Clinton Foundation is also the president of Jim Sasser ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Clinton_Foundation> <http://dbpedia.org/property/keyPeople> ?uri. <http://dbpedia.org/resource/Jim_Sasser> <http://dbpedia.org/ontology/president> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Clinton_Foundation",
            "http://dbpedia.org/resource/Jim_Sasser"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Jim_Sasser> -> PRESIDENT",
            "<http://dbpedia.org/resource/Clinton_Foundation> -> KEY_PERSON"
        ],
        "paths": "<http://dbpedia.org/resource/Jim_Sasser> -> PRESIDENT, <http://dbpedia.org/resource/Clinton_Foundation> -> KEY_PERSON",
        "generated_query": "SELECT DISTINCT ?person WHERE {\n  <http://dbpedia.org/resource/Clinton_Foundation> <http://dbpedia.org/ontology/keyPerson> ?person .\n  {\n    <http://dbpedia.org/resource/Jim_Sasser> <http://dbpedia.org/ontology/president> ?person .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Jim_Sasser> <http://dbpedia.org/property/president> ?person .\n  }\n}"
    },
    {
        "question": "Where did the athlete start his career, who did his highschool in Red Lion Area School District?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/highschool> <http://dbpedia.org/resource/Red_Lion_Area_School_District> . ?x <http://dbpedia.org/property/debutteam> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>}",
        "entities": [
            "http://dbpedia.org/resource/Red_Lion_Area_School_District"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Red_Lion_Area_School_District> -> ATHLETE -> \"career start location\""
        ],
        "paths": "<http://dbpedia.org/resource/Red_Lion_Area_School_District> -> ATHLETE -> \"career start location\"",
        "generated_query": "SELECT DISTINCT ?debutTeam WHERE {\n  ?athlete <http://dbpedia.org/property/highSchool> <http://dbpedia.org/resource/Red_Lion_Area_School_District> .\n  ?athlete <http://dbpedia.org/property/debutteam> ?debutTeam .\n}"
    },
    {
        "question": "Name a person who works in Open Society Foundation and has wife named Susan Weber Soros ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/employer> <http://dbpedia.org/resource/Open_Society_Foundations> . ?uri <http://dbpedia.org/property/spouse> <http://dbpedia.org/resource/Susan_Weber_Soros>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "entities": [
            "http://dbpedia.org/resource/Open_Society_Foundations",
            "http://dbpedia.org/resource/Susan_Potter"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Open_Society_Foundations> -> PERSON -> <http://dbpedia.org/resource/Susan_Potter>"
        ],
        "paths": "<http://dbpedia.org/resource/Open_Society_Foundations> -> PERSON -> <http://dbpedia.org/resource/Susan_Potter>",
        "generated_query": "SELECT DISTINCT ?person WHERE {\n  ?person <http://dbpedia.org/property/employer> <http://dbpedia.org/resource/Open_Society_Foundations> .\n  ?person <http://dbpedia.org/property/spouse> <http://dbpedia.org/resource/Susan_Weber_Soros> .\n}"
    },
    {
        "question": "How many things are crossed over by bridges which can carry cars?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/property/carries> <http://dbpedia.org/resource/Motor_vehicle> . ?x <http://dbpedia.org/property/crosses> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Bridge"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Bridge> -> \"crosses over\"",
            "<http://dbpedia.org/resource/Bridge> -> \"can carry cars\""
        ],
        "paths": "<http://dbpedia.org/resource/Bridge> -> \"crosses over\", <http://dbpedia.org/resource/Bridge> -> \"can carry cars\"",
        "generated_query": "SELECT (COUNT(DISTINCT ?thing) AS ?count)\nWHERE {\n  ?bridge <http://dbpedia.org/ontology/type> <http://dbpedia.org/resource/Bridge> .\n  ?bridge <http://dbpedia.org/property/crosses> ?thing .\n  ?bridge <http://dbpedia.org/ontology/bridgeCarries> ?value .\n  FILTER(CONTAINS(LCASE(STR(?value)), \"car\"))\n}"
    },
    {
        "question": "Which fictional character sculpted by Josh Friedmann was portrayed in Terminator 3 ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/creator> <http://dbpedia.org/resource/Josh_Friedman> . ?uri <http://dbpedia.org/ontology/portrayer> <http://dbpedia.org/resource/Terminator_3:_Rise_of_the_Machines>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
        "entities": [
            "http://dbpedia.org/resource/Terminator_3:_Rise_of_the_Machines",
            "http://dbpedia.org/resource/Josh_Friedman"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Josh_Friedman> -> FICTIONAL_CHARACTER -> <http://dbpedia.org/resource/Terminator_3:_Rise_of_the_Machines>"
        ],
        "paths": "<http://dbpedia.org/resource/Josh_Friedman> -> FICTIONAL_CHARACTER -> <http://dbpedia.org/resource/Terminator_3:_Rise_of_the_Machines>",
        "generated_query": "SELECT DISTINCT ?character WHERE {\n  ?character <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Josh_Friedman> .\n  {\n    ?character <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Terminator_3:_Rise_of_the_Machines> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Terminator_3:_Rise_of_the_Machines> <http://dbpedia.org/ontology/wikiPageWikiLink> ?character .\n  }\n}"
    },
    {
        "question": "Which team won the American Football League?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/American_Football_League> <http://dbpedia.org/property/champion> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/American_Football_League"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/American_Football_League> -> \"winner\""
        ],
        "paths": "<http://dbpedia.org/resource/American_Football_League> -> \"winner\"",
        "generated_query": "SELECT DISTINCT ?team WHERE {\n  <http://dbpedia.org/resource/American_Football_League> <http://dbpedia.org/property/champion> ?team .\n}"
    },
    {
        "question": "Which currency can I use both in Kerguelen islands and French southern and antarctic lands?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/French_Southern_and_Antarctic_Lands> <http://dbpedia.org/ontology/currency> ?uri. <http://dbpedia.org/resource/Kerguelen_Islands> <http://dbpedia.org/ontology/currency> ?uri . }",
        "entities": [
            "http://dbpedia.org/resource/Kerguelen_Islands"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/French_southern_and_antarctic_lands> -> CURRENCY",
            "<http://dbpedia.org/resource/Kerguelen_Islands> -> CURRENCY"
        ],
        "paths": "<http://dbpedia.org/resource/French_southern_and_antarctic_lands> -> CURRENCY, <http://dbpedia.org/resource/Kerguelen_Islands> -> CURRENCY",
        "generated_query": "SELECT DISTINCT ?currency WHERE {\n  {\n    <http://dbpedia.org/resource/Kerguelen_Islands> <http://dbpedia.org/property/currency> ?currency .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Kerguelen_Islands> <http://dbpedia.org/ontology/currency> ?currency .\n  }\n  \n  <http://dbpedia.org/resource/French_southern_and_antarctic_lands> <http://dbpedia.org/ontology/wikiPageWikiLink> ?linkedEntity .\n  {\n    ?linkedEntity <http://dbpedia.org/property/currency> ?currency .\n  }\n  UNION\n  {\n    ?linkedEntity <http://dbpedia.org/ontology/currency> ?currency .\n  }\n}"
    },
    {
        "question": "Who is the founder of the trade union which affiliates Amalgamated Association of Iron and Steel Workers?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Amalgamated_Association_of_Iron_and_Steel_Workers> <http://dbpedia.org/ontology/affiliation> ?x . ?x <http://dbpedia.org/property/founded> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TradeUnion>}",
        "entities": [
            "http://dbpedia.org/resource/Amalgamated_Association_of_Iron_and_Steel_Workers",
            "http://dbpedia.org/resource/Trade_union"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Amalgamated_Association_of_Iron_and_Steel_Workers> -> <http://dbpedia.org/resource/Trade_union>",
            "<http://dbpedia.org/resource/Trade_union> -> \"founder\""
        ],
        "paths": "<http://dbpedia.org/resource/Amalgamated_Association_of_Iron_and_Steel_Workers> -> <http://dbpedia.org/resource/Trade_union>, <http://dbpedia.org/resource/Trade_union> -> \"founder\"",
        "generated_query": "SELECT DISTINCT ?founder WHERE {\n  {\n    <http://dbpedia.org/resource/Amalgamated_Association_of_Iron_and_Steel_Workers> <http://dbpedia.org/ontology/affiliation> ?union .\n  } UNION {\n    <http://dbpedia.org/resource/Amalgamated_Association_of_Iron_and_Steel_Workers> <http://dbpedia.org/property/affiliation> ?union .\n  }\n  ?union <http://dbpedia.org/ontology/founder> ?founder .\n}"
    },
    {
        "question": "Which leader of United States House of Representatives was the appinter of ohn Drayton ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/United_States_House_of_Representatives_elections,_1788_and_1789> <http://dbpedia.org/property/leader> ?uri. <http://dbpedia.org/resource/John_Drayton> <http://dbpedia.org/property/appointer> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/United_States_House_of_Representatives"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/United_States_House_of_Representatives> -> LEADER"
        ],
        "paths": "<http://dbpedia.org/resource/United_States_House_of_Representatives> -> LEADER",
        "generated_query": "SELECT DISTINCT ?leader WHERE {\n  <http://dbpedia.org/resource/United_States_House_of_Representatives> <http://dbpedia.org/property/leader> ?leader .\n}"
    },
    {
        "question": "Is fox belong to the phylum of Chordate?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/Fox> <http://dbpedia.org/ontology/phylum> <http://dbpedia.org/resource/Chordate> }",
        "entities": [
            "http://dbpedia.org/resource/Chordate",
            "http://dbpedia.org/resource/Fox",
            "http://dbpedia.org/resource/Phylum"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Fox> -> <http://dbpedia.org/resource/Phylum> -> <http://dbpedia.org/resource/Chordate>"
        ],
        "paths": "<http://dbpedia.org/resource/Fox> -> <http://dbpedia.org/resource/Phylum> -> <http://dbpedia.org/resource/Chordate>",
        "generated_query": "ASK WHERE {\n  {\n    <http://dbpedia.org/resource/Fox> <http://dbpedia.org/ontology/phylum> <http://dbpedia.org/resource/Chordate> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Fox> <http://dbpedia.org/property/phylum> <http://dbpedia.org/resource/Chordate> .\n  }\n}"
    },
    {
        "question": "Which researchers received fellowship from Royal Society?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Royal_Society>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
        "entities": [
            "http://dbpedia.org/resource/Royal_Society"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Royal_Society> -> RESEARCHER"
        ],
        "paths": "<http://dbpedia.org/resource/Royal_Society> -> RESEARCHER",
        "generated_query": "SELECT DISTINCT ?researcher WHERE {\n  ?researcher <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Royal_Society> .\n}"
    },
    {
        "question": "Which president of United States had vice president as John Adams?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/vicePresident> <http://dbpedia.org/resource/John_Adams>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
        "entities": [
            "http://dbpedia.org/resource/John_Adams",
            "http://dbpedia.org/resource/Vice_President_of_the_United_States"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Vice_President_of_the_United_States> -> PRESIDENT",
            "<http://dbpedia.org/resource/Vice_President_of_the_United_States> -> <http://dbpedia.org/resource/John_Adams>"
        ],
        "paths": "<http://dbpedia.org/resource/Vice_President_of_the_United_States> -> PRESIDENT, <http://dbpedia.org/resource/Vice_President_of_the_United_States> -> <http://dbpedia.org/resource/John_Adams>",
        "generated_query": "SELECT DISTINCT ?president WHERE {\n  <http://dbpedia.org/resource/John_Adams> <http://dbpedia.org/property/title> <http://dbpedia.org/resource/Vice_President_of_the_United_States> .\n  <http://dbpedia.org/resource/John_Adams> <http://dbpedia.org/property/president> ?president .\n}"
    },
    {
        "question": "Where was James H. Fields buried ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/James_H._Fields> <http://dbpedia.org/property/placeofburial> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/James_H._Fields"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/James_H._Fields> -> \"burial place\""
        ],
        "paths": "<http://dbpedia.org/resource/James_H._Fields> -> \"burial place\"",
        "generated_query": "SELECT DISTINCT ?burialPlace WHERE {\n  {\n    <http://dbpedia.org/resource/James_H._Fields> <http://dbpedia.org/property/placeofburial> ?burialPlace .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/James_H._Fields> <http://dbpedia.org/ontology/restingPlace> ?burialPlace .\n  }\n}"
    },
    {
        "question": "Is Henry Knox a commander of Continental Artillery Regiment?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/Continental_Artillery_Regiment> <http://dbpedia.org/ontology/notableCommander> <http://dbpedia.org/resource/Henry_Knox> }",
        "entities": [
            "http://dbpedia.org/resource/Continental_Artillery_Regiment"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Henry_Knox> -> <http://dbpedia.org/resource/Continental_Artillery_Regiment>"
        ],
        "paths": "<http://dbpedia.org/resource/Henry_Knox> -> <http://dbpedia.org/resource/Continental_Artillery_Regiment>",
        "generated_query": "ASK WHERE {\n  <http://dbpedia.org/resource/Continental_Artillery_Regiment> <http://dbpedia.org/ontology/notableCommander> <http://dbpedia.org/resource/Henry_Knox> .\n}"
    },
    {
        "question": "What is the commander of Battle of Brownstown ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Battle_of_Brownstown> <http://dbpedia.org/ontology/commander> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Battle_of_Brownstown"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Battle_of_Brownstown> -> \"commander\""
        ],
        "paths": "<http://dbpedia.org/resource/Battle_of_Brownstown> -> \"commander\"",
        "generated_query": "SELECT DISTINCT ?commander WHERE {\n  {\n    <http://dbpedia.org/resource/Battle_of_Brownstown> <http://dbpedia.org/property/commander> ?commander .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Battle_of_Brownstown> <http://dbpedia.org/ontology/commander> ?commander .\n  }\n}"
    },
    {
        "question": "Is Baker's Dozen Donuts in the coffee industry?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/Baker's_Dozen_Donuts> <http://dbpedia.org/ontology/industry> <http://dbpedia.org/resource/Coffee> }",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "ASK WHERE {\n}"
    },
    {
        "question": "What is Jon Speelman famous for?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jon_Speelman> <http://dbpedia.org/ontology/field> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Jon_Speelman"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Jon_Speelman> -> \"fame\""
        ],
        "paths": "<http://dbpedia.org/resource/Jon_Speelman> -> \"fame\"",
        "generated_query": "SELECT DISTINCT ?category WHERE {\n  <http://dbpedia.org/resource/Jon_Speelman> <http://purl.org/dc/terms/subject> ?category .\n  FILTER(CONTAINS(STR(?category), \"Category:\"))\n}"
    },
    {
        "question": "Who is the fictional character whose family member is Padme Amidala?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/family> <http://dbpedia.org/resource/Padm\u00e9_Amidala>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
        "entities": [
            "http://dbpedia.org/resource/Padm\u00e9_Amidala"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Padm\u00e9_Amidala> -> FICTIONAL_CHARACTER"
        ],
        "paths": "<http://dbpedia.org/resource/Padm\u00e9_Amidala> -> FICTIONAL_CHARACTER",
        "generated_query": "SELECT DISTINCT ?character WHERE {\n  {\n    ?character <http://dbpedia.org/property/children> <http://dbpedia.org/resource/Padm\u00e9_Amidala> .\n  }\n  UNION\n  {\n    ?character <http://dbpedia.org/ontology/relative> <http://dbpedia.org/resource/Padm\u00e9_Amidala> .\n  }\n}"
    },
    {
        "question": "What company is the one which wrote the google web toolkit and PlayN?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Google_Web_Toolkit> <http://dbpedia.org/ontology/author> ?uri. <http://dbpedia.org/resource/PlayN> <http://dbpedia.org/ontology/author> ?uri . }",
        "entities": [
            "http://dbpedia.org/resource/Google_Web_Toolkit",
            "http://dbpedia.org/resource/PlayN"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Google_Web_Toolkit> -> COMPANY",
            "<http://dbpedia.org/resource/PlayN> -> COMPANY"
        ],
        "paths": "<http://dbpedia.org/resource/Google_Web_Toolkit> -> COMPANY, <http://dbpedia.org/resource/PlayN> -> COMPANY",
        "generated_query": "SELECT DISTINCT ?company WHERE {\n  {\n    { <http://dbpedia.org/resource/Google_Web_Toolkit> <http://dbpedia.org/ontology/author> ?company . }\n    UNION\n    { <http://dbpedia.org/resource/Google_Web_Toolkit> <http://dbpedia.org/property/author> ?company . }\n  }\n  {\n    { <http://dbpedia.org/resource/PlayN> <http://dbpedia.org/ontology/author> ?company . }\n    UNION\n    { <http://dbpedia.org/resource/PlayN> <http://dbpedia.org/property/author> ?company . }\n  }\n}"
    },
    {
        "question": "How many different songwriters have had their songs recorded in London?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/ontology/recordedIn> <http://dbpedia.org/resource/London> . ?x <http://dbpedia.org/ontology/writer> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/London"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/London> -> SONG -> SONGWRITER"
        ],
        "paths": "<http://dbpedia.org/resource/London> -> SONG -> SONGWRITER",
        "generated_query": "SELECT (COUNT(DISTINCT ?songwriter) AS ?numSongwriters)\nWHERE {\n  ?song <http://dbpedia.org/ontology/recordedIn> <http://dbpedia.org/resource/London> .\n  ?song <http://dbpedia.org/ontology/wikiPageWikiLink> ?linkedSong .\n  ?linkedSong <http://dbpedia.org/ontology/writer> ?songwriter .\n}"
    },
    {
        "question": "Which are the  automobile platform whose one of the automobile platform is Dodge ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/automobilePlatform> <http://dbpedia.org/resource/Dodge> . ?x <http://dbpedia.org/ontology/automobilePlatform> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>}",
        "entities": [
            "http://dbpedia.org/resource/Dodge",
            "http://dbpedia.org/resource/Car_platform"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Car_platform> -> <http://dbpedia.org/resource/Dodge>"
        ],
        "paths": "<http://dbpedia.org/resource/Car_platform> -> <http://dbpedia.org/resource/Dodge>",
        "generated_query": "SELECT DISTINCT ?platform WHERE {\n  ?platform <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Car_platform> .\n  ?platform <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Dodge> .\n}"
    },
    {
        "question": "What is the total number of other combatant of the military conflicts whose combatant is Choctaw?",
        "gold_query": " SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/property/combatant> <http://dbpedia.org/resource/Choctaw> . ?x <http://dbpedia.org/property/combatant> ?uri }",
        "entities": [
            "http://dbpedia.org/resource/Choctaw"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Choctaw> -> MILITARY_CONFLICT -> \"total number of other combatant\""
        ],
        "paths": "<http://dbpedia.org/resource/Choctaw> -> MILITARY_CONFLICT -> \"total number of other combatant\"",
        "generated_query": "SELECT (COUNT(DISTINCT ?otherCombatant) AS ?totalOtherCombatants)\nWHERE {\n  ?conflict <http://dbpedia.org/property/combatant> <http://dbpedia.org/resource/Choctaw> .\n  ?conflict <http://dbpedia.org/property/combatant> ?otherCombatant .\n  FILTER(?otherCombatant != <http://dbpedia.org/resource/Choctaw>)\n}"
    },
    {
        "question": "List some pupils of National Science Medal winning scientists?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/prizes> <http://dbpedia.org/resource/National_Medal_of_Science> . ?x <http://dbpedia.org/property/doctoralStudents> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
        "entities": [
            "http://dbpedia.org/resource/National_Medal_of_Science"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/National_Medal_of_Science> -> PUPIL"
        ],
        "paths": "<http://dbpedia.org/resource/National_Medal_of_Science> -> PUPIL",
        "generated_query": "SELECT DISTINCT ?pupil WHERE {\n  ?scientist <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/National_Medal_of_Science> .\n  {\n    ?scientist <http://dbpedia.org/property/doctoralStudents> ?pupil .\n  }\n  UNION\n  {\n    ?scientist <http://dbpedia.org/ontology/doctoralStudent> ?pupil .\n  }\n}"
    },
    {
        "question": "Relatives of Moses used to follow which religions?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Moses> <http://dbpedia.org/ontology/relative> ?x . ?x <http://dbpedia.org/ontology/veneratedIn> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Moses"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Moses> -> RELATIVES -> \"religion\""
        ],
        "paths": "<http://dbpedia.org/resource/Moses> -> RELATIVES -> \"religion\"",
        "generated_query": "SELECT DISTINCT ?religion WHERE {\n  <http://dbpedia.org/resource/Moses> <http://dbpedia.org/ontology/relative> ?relative .\n  ?relative <http://dbpedia.org/property/veneratedIn> ?religion .\n}"
    },
    {
        "question": "Where was Ne daj se, Nina first aired ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ne_daj_se,_Nina> <http://dbpedia.org/property/firstAired> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Ne_daj_se,_Nina"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Ne_daj_se,_Nina> -> \"first aired location\""
        ],
        "paths": "<http://dbpedia.org/resource/Ne_daj_se,_Nina> -> \"first aired location\"",
        "generated_query": "SELECT DISTINCT ?country WHERE {\n  <http://dbpedia.org/resource/Ne_daj_se,_Nina> <http://dbpedia.org/property/network> ?network .\n  {\n    ?network <http://dbpedia.org/ontology/locationCountry> ?country .\n  }\n  UNION\n  {\n    ?network <http://dbpedia.org/property/country> ?country .\n  }\n}"
    },
    {
        "question": "Where did the 2015 MLS All-Star Game take place?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2015_MLS_All-Star_Game> <http://dbpedia.org/property/city> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/2015_MLS_All-Star_Game",
            "http://dbpedia.org/resource/MLS_All-Star_Game"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/2015_MLS_All-Star_Game> -> <http://dbpedia.org/resource/MLS_All-Star_Game>"
        ],
        "paths": "<http://dbpedia.org/resource/2015_MLS_All-Star_Game> -> <http://dbpedia.org/resource/MLS_All-Star_Game>",
        "generated_query": "SELECT DISTINCT ?location WHERE {\n  <http://dbpedia.org/resource/2015_MLS_All-Star_Game> <http://dbpedia.org/ontology/wikiPageWikiLink> ?location .\n}"
    },
    {
        "question": "Is Nikolai Morozov the former coach of Stanislav Morozov?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/Stanislav_Morozov> <http://dbpedia.org/ontology/formerCoach> <http://dbpedia.org/resource/Nikolai_Morozov_(figure_skater)> }",
        "entities": [
            "http://dbpedia.org/resource/Stanislav_Morozov"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Stanislav_Morozov> -> NIKOLAI_MOROZOV"
        ],
        "paths": "<http://dbpedia.org/resource/Stanislav_Morozov> -> NIKOLAI_MOROZOV",
        "generated_query": "ASK WHERE {\n  <http://dbpedia.org/resource/Stanislav_Morozov> <http://dbpedia.org/ontology/formerCoach> <http://dbpedia.org/resource/Nikolai_Morozov_(figure_skater)> .\n}"
    },
    {
        "question": "Did Alexandre Tichonov study at the Moscow university?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/Alexandre_Tichonov> <http://dbpedia.org/property/university> <http://dbpedia.org/resource/Moscow> }",
        "entities": [
            "http://dbpedia.org/resource/Moscow_State_University",
            "http://dbpedia.org/resource/Alexander_Tikhonov_(publisher)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Alexander_Tikhonov_(publisher)> -> <http://dbpedia.org/resource/Moscow_State_University>"
        ],
        "paths": "",
        "generated_query": "ASK {\n  <http://dbpedia.org/resource/Alexander_Tikhonov_(publisher)> ?p <http://dbpedia.org/resource/Moscow_State_University> .\n}"
    },
    {
        "question": "What is the name of the homeground of football team Panionios G.S.S.?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2013\u201314_Panionios_G.S.S._season> <http://dbpedia.org/ontology/ground> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Panionios_G.S.S.",
            "http://dbpedia.org/resource/Association_football"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Panionios_G.S.S.> -> \"homeground\" -> \"name\""
        ],
        "paths": "<http://dbpedia.org/resource/Panionios_G.S.S.> -> \"homeground\" -> \"name\"",
        "generated_query": "SELECT DISTINCT ?name WHERE {\n  {\n    ?stadium <http://dbpedia.org/ontology/tenant> <http://dbpedia.org/resource/Panionios_G.S.S.> .\n  }\n  UNION\n  {\n    ?stadium <http://dbpedia.org/ontology/owner> <http://dbpedia.org/resource/Panionios_G.S.S.> .\n  }\n  ?stadium <http://www.w3.org/2000/01/rdf-schema#label> ?name .\n  FILTER (lang(?name) = \"en\")\n}"
    },
    {
        "question": "List presidents of the school whose one of the president is Charles. Prince of Wales ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/president> <http://dbpedia.org/resource/Charles,_Prince_of_Wales> . ?x <http://dbpedia.org/property/president> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>}",
        "entities": [
            "http://dbpedia.org/resource/Charles_III"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Charles_III> -> SCHOOL -> PRESIDENT"
        ],
        "paths": "<http://dbpedia.org/resource/Charles_III> -> SCHOOL -> PRESIDENT",
        "generated_query": "SELECT DISTINCT ?president WHERE {\n  ?school <http://dbpedia.org/ontology/president> <http://dbpedia.org/resource/Charles,_Prince_of_Wales> .\n  ?school <http://dbpedia.org/ontology/president> ?president .\n}"
    },
    {
        "question": "Does Timothy Morton study Buddhism?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/Timothy_Morton> <http://dbpedia.org/property/mainInterests> <http://dbpedia.org/resource/Buddhism> }",
        "entities": [
            "http://dbpedia.org/resource/Timothy_Morton",
            "http://dbpedia.org/resource/Buddhism"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Timothy_Morton> -> <http://dbpedia.org/resource/Buddhism>"
        ],
        "paths": "<http://dbpedia.org/resource/Timothy_Morton> -> <http://dbpedia.org/resource/Buddhism>",
        "generated_query": "ASK WHERE {\n  {\n    <http://dbpedia.org/resource/Timothy_Morton> <http://dbpedia.org/ontology/mainInterest> <http://dbpedia.org/resource/Buddhism> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Timothy_Morton> <http://dbpedia.org/property/mainInterests> <http://dbpedia.org/resource/Buddhism> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Timothy_Morton> <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Buddhism> .\n  }\n}"
    },
    {
        "question": "Brian Moriarty designed video games written by whom?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/designer> <http://dbpedia.org/resource/Brian_Moriarty> . ?x <http://dbpedia.org/property/writer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/VideoGame>}",
        "entities": [
            "http://dbpedia.org/resource/Brian_Moriarty",
            "http://dbpedia.org/resource/Video_game"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Brian_Moriarty> -> <http://dbpedia.org/resource/Video_game>"
        ],
        "paths": "<http://dbpedia.org/resource/Brian_Moriarty> -> <http://dbpedia.org/resource/Video_game>",
        "generated_query": "SELECT DISTINCT ?author WHERE {\n  {\n    <http://dbpedia.org/resource/Brian_Moriarty> <http://dbpedia.org/ontology/wikiPageWikiLink> ?game .\n    ?game <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Video_game> .\n  }\n  UNION\n  {\n    ?game <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Brian_Moriarty> .\n    ?game <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Video_game> .\n  }\n  ?game <http://dbpedia.org/ontology/wikiPageWikiLink> ?author .\n  FILTER (?author != <http://dbpedia.org/resource/Brian_Moriarty>)\n  FILTER (?author != <http://dbpedia.org/resource/Video_game>)\n}"
    },
    {
        "question": "What are some movies whose distributors are led by Kevin Tsujihara?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/keyPerson> <http://dbpedia.org/resource/Kevin_Tsujihara> . ?uri <http://dbpedia.org/property/distributor> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "entities": [
            "http://dbpedia.org/resource/Kevin_Tsujihara"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Kevin_Tsujihara> -> DISTRIBUTOR -> MOVIE"
        ],
        "paths": "<http://dbpedia.org/resource/Kevin_Tsujihara> -> DISTRIBUTOR -> MOVIE",
        "generated_query": "SELECT DISTINCT ?movie WHERE {\n  ?distributor <http://dbpedia.org/ontology/keyPerson> <http://dbpedia.org/resource/Kevin_Tsujihara> .\n  {\n    ?movie <http://dbpedia.org/ontology/distributor> ?distributor .\n  }\n  UNION\n  {\n    ?movie <http://dbpedia.org/property/distributor> ?distributor .\n  }\n}"
    },
    {
        "question": "Name the common associate band of Blayse and Teddy Riley ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Blayse> <http://dbpedia.org/ontology/associatedBand> ?uri. <http://dbpedia.org/resource/Teddy_Riley> <http://dbpedia.org/ontology/associatedBand> ?uri . }",
        "entities": [
            "http://dbpedia.org/resource/Teddy_Riley",
            "http://dbpedia.org/resource/The_Righteous_Brothers"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Teddy_Riley> -> <http://dbpedia.org/resource/The_Righteous_Brothers>"
        ],
        "paths": "<http://dbpedia.org/resource/Teddy_Riley> -> <http://dbpedia.org/resource/The_Righteous_Brothers>",
        "generated_query": "SELECT DISTINCT ?band WHERE {\n  <http://dbpedia.org/resource/Teddy_Riley> <http://dbpedia.org/ontology/wikiPageWikiLink> ?band .\n  <http://dbpedia.org/resource/Blayse> <http://dbpedia.org/ontology/wikiPageWikiLink> ?band .\n}"
    },
    {
        "question": "What did Steven T Mason's father die from?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Stevens_T._Mason> . ?x <http://dbpedia.org/ontology/deathCause> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Stevens_T._Mason"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Stevens_T._Mason> -> FATHER -> \"cause of death\""
        ],
        "paths": "<http://dbpedia.org/resource/Stevens_T._Mason> -> FATHER -> \"cause of death\"",
        "generated_query": "SELECT DISTINCT ?cause WHERE {\n  {\n    ?father <http://dbpedia.org/property/children> <http://dbpedia.org/resource/Stevens_T._Mason> .\n  }\n  UNION\n  {\n    ?father <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Stevens_T._Mason> .\n  }\n  {\n    {\n      ?father <http://dbpedia.org/ontology/deathCause> ?cause .\n    }\n    UNION\n    {\n      ?father <http://dbpedia.org/property/deathCause> ?cause .\n    }\n  }\n}"
    },
    {
        "question": "Whose military units are VMF-218 and VMF-155?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/militaryUnit> <http://dbpedia.org/resource/VMF-218> . ?uri <http://dbpedia.org/ontology/militaryUnit> <http://dbpedia.org/resource/VMF-155> . }",
        "entities": [
            "http://dbpedia.org/resource/VMF-155",
            "http://dbpedia.org/resource/VMF-218"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/VMF-218> -> OWNER",
            "<http://dbpedia.org/resource/VMF-155> -> OWNER"
        ],
        "paths": "<http://dbpedia.org/resource/VMF-218> -> OWNER, <http://dbpedia.org/resource/VMF-155> -> OWNER",
        "generated_query": "SELECT DISTINCT ?owner WHERE {\n  <http://dbpedia.org/resource/VMF-218> <http://dbpedia.org/property/allegiance> ?owner .\n  <http://dbpedia.org/resource/VMF-155> <http://dbpedia.org/property/allegiance> ?owner .\n}"
    },
    {
        "question": "What automobile engine's successor is BMW M40",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/successor> <http://dbpedia.org/resource/BMW_M40>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AutomobileEngine>}",
        "entities": [
            "http://dbpedia.org/resource/BMW_M40"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/BMW_M40> -> successor"
        ],
        "paths": "<http://dbpedia.org/resource/BMW_M40> -> successor",
        "generated_query": "SELECT DISTINCT ?engine WHERE {\n  ?engine <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/BMW_M40> .\n}"
    },
    {
        "question": "Name the company which produces both  Boeing F/A-18 E/F Hornet nad CH-46 Chinook ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/product> <http://dbpedia.org/resource/Boeing_F/A-18E/F_Super_Hornet> . ?uri <http://dbpedia.org/property/products> <http://dbpedia.org/resource/Boeing_CH-47_Chinook>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
        "entities": [
            "http://dbpedia.org/resource/Boeing_CH-47_Chinook",
            "http://dbpedia.org/resource/Boeing_F/A-18E/F_Super_Hornet"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Boeing_F/A-18E/F_Super_Hornet> -> <http://dbpedia.org/resource/Boeing_CH-47_Chinook>"
        ],
        "paths": "<http://dbpedia.org/resource/Boeing_F/A-18E/F_Super_Hornet> -> <http://dbpedia.org/resource/Boeing_CH-47_Chinook>",
        "generated_query": "SELECT DISTINCT ?company WHERE {\n  ?company <http://dbpedia.org/property/products> <http://dbpedia.org/resource/Boeing_F/A-18E/F_Super_Hornet> .\n  ?company <http://dbpedia.org/property/products> <http://dbpedia.org/resource/Boeing_CH-47_Chinook> .\n}"
    },
    {
        "question": "What is the district of Methodist Central Hall Westminster ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Methodist_Central_Hall_Westminster> <http://dbpedia.org/ontology/district> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Methodist_Central_Hall,_Westminster"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Methodist_Central_Hall,_Westminster> -> \"district\""
        ],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?district WHERE {\n  <http://dbpedia.org/resource/Methodist_Central_Hall,_Westminster> ?p ?district .\n  FILTER(CONTAINS(LCASE(STR(?p)), \"district\"))\n}"
    },
    {
        "question": "Who develops the computation platform of Microsoft Expression Encoder ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Microsoft_Expression_Encoder> <http://dbpedia.org/ontology/computingPlatform> ?x . ?x <http://dbpedia.org/ontology/developer> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Microsoft_Expression_Encoder"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Microsoft_Expression_Encoder> -> COMPUTATION_PLATFORM"
        ],
        "paths": "<http://dbpedia.org/resource/Microsoft_Expression_Encoder> -> COMPUTATION_PLATFORM",
        "generated_query": "SELECT DISTINCT ?developer WHERE {\n  <http://dbpedia.org/resource/Microsoft_Expression_Encoder> <http://dbpedia.org/ontology/developer> ?developer .\n}"
    },
    {
        "question": "What is the official language of Ladonia, which is the target area of Probus Journal?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ladonia_(micronation)> <http://dbpedia.org/ontology/officialLanguage> ?uri. <http://dbpedia.org/resource/Probus_(journal)> <http://dbpedia.org/ontology/academicDiscipline> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Ladinia",
            "http://dbpedia.org/resource/Probus_(journal)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Probus_(journal)> -> <http://dbpedia.org/resource/Ladinia> -> \"official language\""
        ],
        "paths": "<http://dbpedia.org/resource/Probus_(journal)> -> <http://dbpedia.org/resource/Ladinia> -> \"official language\"",
        "generated_query": "SELECT DISTINCT ?language WHERE {\n  <http://dbpedia.org/resource/Probus_(journal)> <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Ladinia> .\n  <http://dbpedia.org/resource/Ladinia> <http://dbpedia.org/ontology/wikiPageWikiLink> ?country .\n  {\n    ?country <http://dbpedia.org/property/officialLanguages> ?language .\n  }\n  UNION\n  {\n    ?country <http://dbpedia.org/ontology/officialLanguage> ?language .\n  }\n  UNION\n  {\n    ?country <http://dbpedia.org/ontology/language> ?language .\n  }\n}"
    },
    {
        "question": "Where did the conflict take place where Louis Briere de I'Isle was a commander?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Louis_Bri\u00e8re_de_l'Isle> . ?x <http://dbpedia.org/ontology/territory> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>}",
        "entities": [
            "http://dbpedia.org/resource/Louis_Bri\u00e8re_de_l'Isle"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Louis_Bri\u00e8re_de_l'Isle> -> CONFLICT -> LOCATION"
        ],
        "paths": "<http://dbpedia.org/resource/Louis_Bri\u00e8re_de_l'Isle> -> CONFLICT -> LOCATION",
        "generated_query": "SELECT DISTINCT ?location WHERE {\n  ?conflict <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Louis_Bri\u00e8re_de_l'Isle> .\n  ?conflict <http://dbpedia.org/ontology/place> ?location .\n}"
    },
    {
        "question": "In which team was the person drafted who has studied at the Worcester college, Oxford?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Worcester_College,_Oxford> . ?x <http://dbpedia.org/property/draftTeam> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "entities": [
            "http://dbpedia.org/resource/Worcester_College,_Oxford"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Worcester_College,_Oxford> -> PERSON -> TEAM"
        ],
        "paths": "<http://dbpedia.org/resource/Worcester_College,_Oxford> -> PERSON -> TEAM",
        "generated_query": "SELECT DISTINCT ?team WHERE {\n  {\n    ?person <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Worcester_College,_Oxford> .\n  }\n  UNION\n  {\n    ?person <http://dbpedia.org/property/almaMater> <http://dbpedia.org/resource/Worcester_College,_Oxford> .\n  }\n  # No property linking person to team is given, so no triple for ?person ?team\n  # Therefore, no ?team can be bound, query will return empty results.\n}"
    },
    {
        "question": "How many people hold important positions alongwith Donna Shalala?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/ontology/keyPerson> <http://dbpedia.org/resource/Donna_Shalala> . ?x <http://dbpedia.org/property/keyPeople> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Donna_Shalala"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Donna_Shalala> -> MEMBER"
        ],
        "paths": "<http://dbpedia.org/resource/Donna_Shalala> -> MEMBER",
        "generated_query": "SELECT (COUNT(DISTINCT ?person) AS ?count)\nWHERE {\n  ?org <http://dbpedia.org/ontology/keyPerson> <http://dbpedia.org/resource/Donna_Shalala> .\n  ?org <http://dbpedia.org/property/keyPeople> ?person .\n  FILTER (?person != <http://dbpedia.org/resource/Donna_Shalala>)\n}"
    },
    {
        "question": "What other things are provided by the producer of Office 365?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/service> <http://dbpedia.org/resource/Office_365> . ?x <http://dbpedia.org/property/services> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Microsoft_365"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Microsoft_365> -> PRODUCER -> \"provides\""
        ],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?providedThing WHERE {\n  <http://dbpedia.org/resource/Microsoft_365> ?producerPredicate ?producer .\n  ?producer ?providesPredicate ?providedThing .\n  FILTER(?providedThing != <http://dbpedia.org/resource/Microsoft_365>)\n}"
    },
    {
        "question": "Who owns the company that made the Edsel Villager?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/products> <http://dbpedia.org/resource/Edsel_Villager> . ?x <http://dbpedia.org/property/parent> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Edsel_Villager"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Edsel_Villager> -> COMPANY -> OWNER"
        ],
        "paths": "<http://dbpedia.org/resource/Edsel_Villager> -> COMPANY -> OWNER",
        "generated_query": "SELECT DISTINCT ?owner WHERE {\n  ?company <http://dbpedia.org/property/products> <http://dbpedia.org/resource/Edsel_Villager> .\n  ?company <http://dbpedia.org/ontology/manufacturer> ?manufacturer .\n  ?manufacturer <http://dbpedia.org/ontology/owner> ?owner .\n}"
    },
    {
        "question": "Which collaborator of Nice and Smooth wrote Same Song ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Nice_&_Smooth> <http://dbpedia.org/ontology/associatedBand> ?uri. <http://dbpedia.org/resource/Same_Song_(Digital_Underground_song)> <http://dbpedia.org/property/writer> ?uri . }",
        "entities": [
            "http://dbpedia.org/resource/Nice_&_Smooth",
            "http://dbpedia.org/resource/Same_Song"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Nice_&_Smooth> -> <http://dbpedia.org/resource/Same_Song>"
        ],
        "paths": "<http://dbpedia.org/resource/Nice_&_Smooth> -> <http://dbpedia.org/resource/Same_Song>",
        "generated_query": "SELECT DISTINCT ?writer WHERE {\n  {\n    <http://dbpedia.org/resource/Same_Song> <http://dbpedia.org/ontology/writer> ?writer .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Same_Song> <http://dbpedia.org/property/writer> ?writer .\n  }\n}"
    },
    {
        "question": "Who fought in the battle at Tupelo Mississippi?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Tupelo,_Mississippi> . ?x <http://dbpedia.org/property/combatant> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>}",
        "entities": [
            "http://dbpedia.org/resource/Tupelo,_Mississippi"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Tupelo,_Mississippi> -> FIGHTERS"
        ],
        "paths": "<http://dbpedia.org/resource/Tupelo,_Mississippi> -> FIGHTERS",
        "generated_query": "SELECT DISTINCT ?combatant WHERE {\n  ?battle <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Tupelo,_Mississippi> .\n  ?combatant <http://dbpedia.org/property/combatant> ?battle .\n}"
    },
    {
        "question": "List the movies whose cast member were born in Scotland.",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Scotland> . ?uri <http://dbpedia.org/ontology/starring> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "entities": [
            "http://dbpedia.org/resource/Scotland"
        ],
        "classes": [],
        "relations": [
            "MOVIE -> CAST_MEMBER -> BORN_IN -> <http://dbpedia.org/resource/Scotland>"
        ],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?movie WHERE {\n  ?movie <http://dbpedia.org/ontology/starring> ?castMember .\n  ?castMember <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Scotland> .\n}"
    },
    {
        "question": "List the other nicknames of city which has one of the nickname as City of Angels ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/nickname> <http://dbpedia.org/resource/City_of_Angels> . ?x <http://dbpedia.org/property/nickname> ?uri  . }",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?otherNickname WHERE {\n    ?city ?nicknameProp \"City of Angels\" .\n    ?city ?nicknameProp ?otherNickname .\n    FILTER(?otherNickname != \"City of Angels\")\n}"
    },
    {
        "question": "Count the writers whose work has been played in NY?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/property/place> <http://dbpedia.org/resource/New_York> . ?x <http://dbpedia.org/property/writer> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/New_York_(state)"
        ],
        "classes": [],
        "relations": [
            "WRITER -> WORK -> <http://dbpedia.org/resource/New_York_(state)>"
        ],
        "paths": "",
        "generated_query": "SELECT (COUNT(DISTINCT ?writer) AS ?count)\nWHERE {\n  ?writer ?p1 ?work .\n  ?work ?p2 <http://dbpedia.org/resource/New_York_(state)> .\n}"
    },
    {
        "question": "Where did the graduates of Memphis, Tenessee continue their education?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/highschool> <http://dbpedia.org/resource/Memphis,_Tennessee> . ?x <http://dbpedia.org/ontology/school> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Memphis,_Tennessee"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Memphis,_Tennessee> -> \"continued education\""
        ],
        "paths": "<http://dbpedia.org/resource/Memphis,_Tennessee> -> \"continued education\"",
        "generated_query": "SELECT DISTINCT ?graduate WHERE {\n  ?graduate <http://dbpedia.org/property/college> <http://dbpedia.org/resource/Memphis,_Tennessee> .\n}"
    },
    {
        "question": "What subsequent work of Moondog Matinee has the composer of Motorpsycho Nitemare ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Motorpsycho_Nitemare> <http://dbpedia.org/property/composer> ?uri. <http://dbpedia.org/resource/Moondog_Matinee> <http://dbpedia.org/ontology/subsequentWork> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Motorpsycho_Nitemare",
            "http://dbpedia.org/resource/Moondog_Matinee"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Moondog_Matinee> -> <http://dbpedia.org/resource/Motorpsycho_Nitemare>",
            "<http://dbpedia.org/resource/Motorpsycho_Nitemare> -> \"composer\""
        ],
        "paths": "<http://dbpedia.org/resource/Moondog_Matinee> -> <http://dbpedia.org/resource/Motorpsycho_Nitemare>, <http://dbpedia.org/resource/Motorpsycho_Nitemare> -> \"composer\"",
        "generated_query": "SELECT DISTINCT ?subWork WHERE {\n  <http://dbpedia.org/resource/Moondog_Matinee> <http://dbpedia.org/ontology/subsequentWork> ?subWork .\n  \n  {\n    <http://dbpedia.org/resource/Motorpsycho_Nitemare> <http://dbpedia.org/property/composer> ?composer .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Motorpsycho_Nitemare> <http://dbpedia.org/ontology/composer> ?composer .\n  }\n  \n  {\n    ?subWork <http://dbpedia.org/property/composer> ?composer .\n  }\n  UNION\n  {\n    ?subWork <http://dbpedia.org/ontology/composer> ?composer .\n  }\n}"
    },
    {
        "question": "What was the language of the single which came before To Know Him Is to Love Him?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/To_Know_Him_Is_to_Love_Him> <http://dbpedia.org/ontology/previousWork> ?x . ?x <http://dbpedia.org/property/language> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/To_Know_Him_Is_to_Love_Him"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/To_Know_Him_Is_to_Love_Him> -> PREVIOUS_SINGLE -> \"language\""
        ],
        "paths": "<http://dbpedia.org/resource/To_Know_Him_Is_to_Love_Him> -> PREVIOUS_SINGLE -> \"language\"",
        "generated_query": "SELECT DISTINCT ?language WHERE {\n  <http://dbpedia.org/resource/To_Know_Him_Is_to_Love_Him> <http://dbpedia.org/ontology/previousWork> ?previousSingle .\n  ?previousSingle <http://dbpedia.org/ontology/language> ?language .\n}"
    },
    {
        "question": "What are the television shows whose company is owned by Viacom?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/owningCompany> <http://dbpedia.org/resource/Viacom_(original)> . ?uri <http://dbpedia.org/property/company> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "entities": [
            "http://dbpedia.org/resource/Viacom_(2005\u20132019)"
        ],
        "classes": [],
        "relations": [
            "TELEVISION_SHOW -> COMPANY -> <http://dbpedia.org/resource/Viacom_(2005\u20132019)>"
        ],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?show WHERE {\n  ?show a <http://dbpedia.org/ontology/TelevisionShow> .\n  ?show <http://dbpedia.org/ontology/company> <http://dbpedia.org/resource/Viacom_(2005\u20132019)> .\n}"
    },
    {
        "question": "How many people used to play in the youthclub of FC Barcelona?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE {?uri <http://dbpedia.org/property/youthclubs> <http://dbpedia.org/resource/FC_Barcelona>  . }",
        "entities": [
            "http://dbpedia.org/resource/FC_Barcelona"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/FC_Barcelona> -> YOUTHCLUB -> \"number of players\""
        ],
        "paths": "<http://dbpedia.org/resource/FC_Barcelona> -> YOUTHCLUB -> \"number of players\"",
        "generated_query": "SELECT (COUNT(DISTINCT ?person) AS ?numberOfPlayers)\nWHERE {\n  ?person <http://dbpedia.org/property/youthclubs> <http://dbpedia.org/resource/FC_Barcelona> .\n}"
    },
    {
        "question": "Quebec born ice hockey players have stopped playing for which teams?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Quebec> . ?x <http://dbpedia.org/ontology/formerTeam> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/IceHockeyPlayer>}",
        "entities": [
            "http://dbpedia.org/resource/Ice_hockey",
            "http://dbpedia.org/resource/Quebec"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Ice_hockey> -> <http://dbpedia.org/resource/Quebec>"
        ],
        "paths": "<http://dbpedia.org/resource/Ice_hockey> -> <http://dbpedia.org/resource/Quebec>",
        "generated_query": "SELECT DISTINCT ?player WHERE {\n  ?player <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Ice_hockey> .\n  {\n    ?player <http://dbpedia.org/property/birthPlace> <http://dbpedia.org/resource/Quebec> .\n  }\n  UNION\n  {\n    ?player <http://dbpedia.org/property/placeOfBirth> <http://dbpedia.org/resource/Quebec> .\n  }\n  UNION\n  {\n    ?player <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Quebec> .\n  }\n}"
    },
    {
        "question": "Who is the chancellor of Falmouth University ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Falmouth_University> <http://dbpedia.org/property/chancellor> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Falmouth_University"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Falmouth_University> -> CHANCELLOR"
        ],
        "paths": "<http://dbpedia.org/resource/Falmouth_University> -> CHANCELLOR",
        "generated_query": "SELECT DISTINCT ?chancellor WHERE {\n  <http://dbpedia.org/resource/Falmouth_University> <http://dbpedia.org/ontology/chancellor> ?chancellor .\n}"
    },
    {
        "question": "what kind of things play on WBIG FM?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/WBIG-FM> <http://dbpedia.org/ontology/programmeFormat> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/WBIG-FM"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/WBIG-FM> -> \"programs\""
        ],
        "paths": "<http://dbpedia.org/resource/WBIG-FM> -> \"programs\"",
        "generated_query": "SELECT DISTINCT ?format WHERE {\n  <http://dbpedia.org/resource/WBIG-FM> <http://dbpedia.org/ontology/programmeFormat> ?format .\n}"
    },
    {
        "question": "Name the are where South side Elevated Railroad operate and has place of birth as Arthur A. Ross ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/South_Side_Elevated_Railroad> <http://dbpedia.org/ontology/operatedBy> ?uri. <http://dbpedia.org/resource/Arthur_A._Ross> <http://dbpedia.org/property/placeOfBirth> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/South_Side_Elevated_Railroad"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/South_Side_Elevated_Railroad> -> \"area\""
        ],
        "paths": "<http://dbpedia.org/resource/South_Side_Elevated_Railroad> -> \"area\"",
        "generated_query": "SELECT DISTINCT ?area WHERE {\n  <http://dbpedia.org/resource/South_Side_Elevated_Railroad> <http://dbpedia.org/property/routes> ?route .\n  ?route <http://dbpedia.org/property/locale> ?area .\n\n  <http://dbpedia.org/resource/Arthur_A._Ross> ?birthProp ?area .\n  FILTER(?birthProp IN (<http://dbpedia.org/property/placeOfBirth>, <http://dbpedia.org/ontology/birthPlace>))\n}"
    },
    {
        "question": "In which fields are the graduates of Worcester College, Oxford working?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/almaMater> <http://dbpedia.org/resource/Worcester_College,_Oxford> . ?x <http://dbpedia.org/ontology/field> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Worcester_College,_Oxford"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Worcester_College,_Oxford> -> GRADUATE -> FIELD"
        ],
        "paths": "<http://dbpedia.org/resource/Worcester_College,_Oxford> -> GRADUATE -> FIELD",
        "generated_query": "SELECT DISTINCT ?field WHERE {\n  {\n    ?graduate <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Worcester_College,_Oxford> .\n  }\n  UNION\n  {\n    ?graduate <http://dbpedia.org/property/almaMater> <http://dbpedia.org/resource/Worcester_College,_Oxford> .\n  }\n  \n  OPTIONAL {\n    ?graduate <http://dbpedia.org/ontology/field> ?field .\n  }\n  OPTIONAL {\n    ?graduate <http://dbpedia.org/ontology/occupation> ?occupation .\n    ?occupation <http://dbpedia.org/ontology/industry> ?field .\n  }\n  FILTER(BOUND(?field))\n}"
    },
    {
        "question": "List the places where the relatives of Mark Donaldson died ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mark_Donaldson_(rugby_player)> <http://dbpedia.org/property/relatives> ?x . ?x <http://dbpedia.org/ontology/deathPlace> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Mark_Donaldson"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Mark_Donaldson> -> RELATIVES -> \"place of death\""
        ],
        "paths": "<http://dbpedia.org/resource/Mark_Donaldson> -> RELATIVES -> \"place of death\"",
        "generated_query": "SELECT DISTINCT ?placeWhereRelativeDied WHERE {\n  <http://dbpedia.org/resource/Mark_Donaldson> <http://dbpedia.org/property/relations> ?relative .\n  ?relative ?deathPlacePredicate ?placeWhereRelativeDied .\n  FILTER (?deathPlacePredicate = <http://dbpedia.org/property/deathPlace> || \n          ?deathPlacePredicate = <http://dbpedia.org/property/placeOfDeath>)\n}"
    },
    {
        "question": "What famous politician died in the Petersen House?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/deathPlace> <http://dbpedia.org/resource/Petersen_House>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "entities": [
            "http://dbpedia.org/resource/Petersen_House"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Petersen_House> -> FAMOUS_POLITICIAN"
        ],
        "paths": "<http://dbpedia.org/resource/Petersen_House> -> FAMOUS_POLITICIAN",
        "generated_query": "SELECT DISTINCT ?person WHERE {\n  ?person <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Petersen_House> .\n  ?person <http://purl.org/dc/terms/subject> ?category .\n  FILTER(CONTAINS(LCASE(STR(?category)), \"politician\"))\n}"
    },
    {
        "question": "What are some artists on the show whose opening theme is Send It On?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/openingTheme> <http://dbpedia.org/resource/Send_It_On_(Disney's_Friends_for_Change_song)> . ?x <http://dbpedia.org/property/artist> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?artist WHERE {\n  ?show ?p1 \"Send It On\" .\n  ?show ?p2 ?artist .\n}"
    },
    {
        "question": "What is the citizenship of Saima Chowdhury?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Saima_Chowdhury> <http://dbpedia.org/ontology/citizenship> ?uri } ",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?citizenship WHERE {\n  <http://example.org/resource/Saima_Chowdhury> ?property ?citizenship .\n  FILTER(CONTAINS(LCASE(STR(?property)), \"citizenship\") || CONTAINS(LCASE(STR(?property)), \"nationality\"))\n}"
    },
    {
        "question": "What are the musical performances whose label is Celluloid Records?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/label> <http://dbpedia.org/resource/Celluloid_Records>  . }",
        "entities": [
            "http://dbpedia.org/resource/Celluloid_Records"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Celluloid_Records> -> MUSICAL_PERFORMANCES"
        ],
        "paths": "<http://dbpedia.org/resource/Celluloid_Records> -> MUSICAL_PERFORMANCES",
        "generated_query": "SELECT DISTINCT ?performance WHERE {\n  ?performance <http://dbpedia.org/ontology/recordLabel> <http://dbpedia.org/resource/Celluloid_Records> .\n  ?performance <http://dbpedia.org/ontology/artist> ?artist .\n}"
    },
    {
        "question": "What is the craft of the Ralph Flanders which is also the profession of  Claiborne Pell ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ralph_Flanders> <http://dbpedia.org/property/occupation> ?uri. <http://dbpedia.org/resource/Claiborne_Pell> <http://dbpedia.org/ontology/profession> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Ralph_Flanders",
            "http://dbpedia.org/resource/Claiborne_Pell"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Ralph_Flanders> -> PROFESSION",
            "<http://dbpedia.org/resource/Claiborne_Pell> -> PROFESSION"
        ],
        "paths": "<http://dbpedia.org/resource/Ralph_Flanders> -> PROFESSION, <http://dbpedia.org/resource/Claiborne_Pell> -> PROFESSION",
        "generated_query": "SELECT DISTINCT ?profession WHERE {\n  <http://dbpedia.org/resource/Ralph_Flanders> <http://dbpedia.org/ontology/occupation> ?profession .\n  <http://dbpedia.org/resource/Claiborne_Pell> <http://dbpedia.org/ontology/profession> ?profession .\n}"
    },
    {
        "question": "How many people have fought wars where Arthur St. Clair was a commander?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Arthur_St._Clair> . ?x <http://dbpedia.org/property/combatant> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Arthur_St._Clair"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Arthur_St._Clair> -> PEOPLE"
        ],
        "paths": "<http://dbpedia.org/resource/Arthur_St._Clair> -> PEOPLE",
        "generated_query": "SELECT (COUNT(DISTINCT ?person) AS ?count)\nWHERE {\n  ?war <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Arthur_St._Clair> .\n  ?person <http://dbpedia.org/property/battles> ?war .\n}"
    },
    {
        "question": "Does Chicago own the Monroe Station?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/Monroe_station_(CTA_Blue_Line)> <http://dbpedia.org/property/owned> <http://dbpedia.org/resource/Chicago> }",
        "entities": [
            "http://dbpedia.org/resource/Monroe_station_(CTA_Blue_Line)",
            "http://dbpedia.org/resource/Chicago"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Chicago> -> <http://dbpedia.org/resource/Monroe_station_(CTA_Blue_Line)>"
        ],
        "paths": "<http://dbpedia.org/resource/Chicago> -> <http://dbpedia.org/resource/Monroe_station_(CTA_Blue_Line)>",
        "generated_query": "ASK WHERE {\n  {\n    <http://dbpedia.org/resource/Monroe_station_(CTA_Blue_Line)> <http://dbpedia.org/ontology/owner> <http://dbpedia.org/resource/Chicago> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Monroe_station_(CTA_Blue_Line)> <http://dbpedia.org/property/owned> <http://dbpedia.org/resource/Chicago> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Monroe_station_(CTA_Blue_Line)> <http://dbpedia.org/ontology/owningOrganisation> <http://dbpedia.org/resource/Chicago> .\n  }\n}"
    },
    {
        "question": "Which team has had both Martin prochzka and garry unger as its players ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Martin_Proch\u00e1zka> <http://dbpedia.org/ontology/formerTeam> ?uri. <http://dbpedia.org/resource/Garry_Unger> <http://dbpedia.org/ontology/formerTeam> ?uri . }",
        "entities": [
            "http://dbpedia.org/resource/Martin_Proch\u00e1zka",
            "http://dbpedia.org/resource/Garry_Unger"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Martin_Proch\u00e1zka> -> <http://dbpedia.org/ontology/Team> -> <http://dbpedia.org/resource/Garry_Unger>"
        ],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?team WHERE {\n  <http://dbpedia.org/resource/Martin_Proch\u00e1zka> <http://dbpedia.org/ontology/team> ?team .\n  <http://dbpedia.org/resource/Garry_Unger> <http://dbpedia.org/ontology/team> ?team .\n}"
    },
    {
        "question": "What are the awards received by spouse of Ellen Lundstrom?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Ellen_Lundstr\u00f6m> . ?x <http://dbpedia.org/property/awards> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Linda_Lundstr\u00f6m"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Linda_Lundstr\u00f6m> -> SPOUSE -> \"awards\""
        ],
        "paths": "<http://dbpedia.org/resource/Linda_Lundstr\u00f6m> -> SPOUSE -> \"awards\"",
        "generated_query": "SELECT DISTINCT ?awardCategory WHERE {\n  <http://dbpedia.org/resource/Linda_Lundstr\u00f6m> <http://purl.org/dc/terms/subject> ?awardCategory .\n  FILTER (CONTAINS(LCASE(STR(?awardCategory)), \"award\") || CONTAINS(LCASE(STR(?awardCategory)), \"order\"))\n}"
    },
    {
        "question": "Who all have succeeded the kings buried in Rome?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/placeOfBurial> <http://dbpedia.org/resource/Rome> . ?x <http://dbpedia.org/ontology/successor> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>}",
        "entities": [
            "http://dbpedia.org/resource/Rome"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Rome> -> KING -> SUCCESSOR"
        ],
        "paths": "<http://dbpedia.org/resource/Rome> -> KING -> SUCCESSOR",
        "generated_query": "SELECT DISTINCT ?successor WHERE {\n  ?king <http://dbpedia.org/property/placeOfBurial> <http://dbpedia.org/resource/Rome> .\n  ?king <http://dbpedia.org/ontology/successor> ?successor .\n}"
    },
    {
        "question": "Through which states do the rivers flow which join in the republican river from the left?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Republican_River> <http://dbpedia.org/ontology/leftTributary> ?x . ?x <http://dbpedia.org/ontology/state> ?uri  . }",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?state WHERE {\n  ?joiningRiver <JOINS_FROM_LEFT> <REPUBLICAN_RIVER> .\n  ?joiningRiver <FLOWS_THROUGH> ?state .\n}"
    },
    {
        "question": "Give me the home town of all musical artists who uses Guitar as instrument ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/instrument> <http://dbpedia.org/resource/Guitar> . ?x <http://dbpedia.org/ontology/hometown> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>}",
        "entities": [
            "http://dbpedia.org/resource/Guitar"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Guitar> -> MUSICAL_ARTIST -> \"home town\""
        ],
        "paths": "<http://dbpedia.org/resource/Guitar> -> MUSICAL_ARTIST -> \"home town\"",
        "generated_query": "SELECT DISTINCT ?artist ?hometown WHERE {\n  ?artist <http://dbpedia.org/property/instrument> <http://dbpedia.org/resource/Guitar> .\n  ?artist <http://dbpedia.org/ontology/hometown> ?hometown .\n}"
    },
    {
        "question": "How many religions are followed amongst the people who've worked in the Korean army?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/ontology/militaryBranch> <http://dbpedia.org/resource/Republic_of_Korea_Army> . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Republic_of_Korea_Army"
        ],
        "classes": [],
        "relations": [
            "PEOPLE_WHO_WORKED_IN -> \"religion\"",
            "<http://dbpedia.org/resource/Republic_of_Korea_Army> -> PEOPLE_WHO_WORKED_IN"
        ],
        "paths": "<http://dbpedia.org/resource/Republic_of_Korea_Army> -> PEOPLE_WHO_WORKED_IN",
        "generated_query": "SELECT (COUNT(DISTINCT ?religion) AS ?religionCount)\nWHERE {\n  ?person <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Republic_of_Korea_Army> .\n  ?person <http://dbpedia.org/ontology/religion> ?religion .\n}"
    },
    {
        "question": "Was andy warhol a part of Pop Art movement?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/Andy_Warhol> <http://dbpedia.org/property/movement> <http://dbpedia.org/resource/Pop_art> }",
        "entities": [
            "http://dbpedia.org/resource/Pop_art",
            "http://dbpedia.org/resource/Andy_Warhol"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Andy_Warhol> -> <http://dbpedia.org/resource/Pop_art>"
        ],
        "paths": "<http://dbpedia.org/resource/Andy_Warhol> -> <http://dbpedia.org/resource/Pop_art>",
        "generated_query": "ASK WHERE {\n  {\n    <http://dbpedia.org/resource/Andy_Warhol> <http://dbpedia.org/ontology/movement> <http://dbpedia.org/resource/Pop_art> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Andy_Warhol> <http://dbpedia.org/property/movement> <http://dbpedia.org/resource/Pop_art> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Andy_Warhol> <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Pop_art> .\n  }\n}"
    },
    {
        "question": "Count the number of musical work which were sold by Sony Music?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/property/label> <http://dbpedia.org/resource/Sony_Music_Entertainment> . ?uri <http://dbpedia.org/property/music> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalWork>}",
        "entities": [
            "http://dbpedia.org/resource/Sony_Music"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Sony_Music> -> MUSICAL_WORK"
        ],
        "paths": "<http://dbpedia.org/resource/Sony_Music> -> MUSICAL_WORK",
        "generated_query": "SELECT (COUNT(DISTINCT ?musicalWork) AS ?count)\nWHERE {\n  ?musicalWork <http://dbpedia.org/property/publisher> <http://dbpedia.org/resource/Sony_Music> .\n}"
    },
    {
        "question": "Who is the person whose home town is Fairmount, Indiana?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/hometown> <http://dbpedia.org/resource/Fairmount,_Indiana>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "entities": [
            "http://dbpedia.org/resource/Fairmount,_Indiana"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Fairmount,_Indiana> -> PERSON"
        ],
        "paths": "<http://dbpedia.org/resource/Fairmount,_Indiana> -> PERSON",
        "generated_query": "SELECT DISTINCT ?person WHERE {\n  ?person <http://dbpedia.org/ontology/hometown> <http://dbpedia.org/resource/Fairmount,_Indiana> .\n}"
    },
    {
        "question": "Name the movies directed by Stanley Kubrick and edited by Anthony Harvey?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Stanley_Kubrick> . ?uri <http://dbpedia.org/property/editing> <http://dbpedia.org/resource/Anthony_Harvey>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "entities": [
            "http://dbpedia.org/resource/Anthony_Harvey",
            "http://dbpedia.org/resource/Stanley_Kubrick"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Stanley_Kubrick> -> <http://dbpedia.org/resource/Anthony_Harvey>"
        ],
        "paths": "<http://dbpedia.org/resource/Stanley_Kubrick> -> <http://dbpedia.org/resource/Anthony_Harvey>",
        "generated_query": "SELECT DISTINCT ?movie WHERE {\n  ?movie <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Stanley_Kubrick> .\n  ?movie <http://dbpedia.org/ontology/editing> <http://dbpedia.org/resource/Anthony_Harvey> .\n}"
    },
    {
        "question": "List all binomial authority of the insects whose one of the  binomial authority is douard Mntries?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/binomialAuthority> <http://dbpedia.org/resource/\u00c9douard_M\u00e9n\u00e9tries> . ?x <http://dbpedia.org/ontology/binomialAuthority> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Valence_(chemistry)"
        ],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?binomialAuthority WHERE {\n  \n}\nLIMIT 0"
    },
    {
        "question": "Who is the military general buried in St Mary's Church, Battersea?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/placeofburial> <http://dbpedia.org/resource/St_Mary's_Church,_Battersea>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryPerson>}",
        "entities": [
            "http://dbpedia.org/resource/St_Mary's_Church,_Battersea"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/St_Mary's_Church,_Battersea> -> MILITARY_GENERAL"
        ],
        "paths": "<http://dbpedia.org/resource/St_Mary's_Church,_Battersea> -> MILITARY_GENERAL",
        "generated_query": "SELECT DISTINCT ?person WHERE {\n  ?person <http://dbpedia.org/property/placeofburial> <http://dbpedia.org/resource/St_Mary's_Church,_Battersea> .\n  ?person <http://dbpedia.org/property/rank> ?rank .\n  FILTER(CONTAINS(LCASE(STR(?rank)), \"general\"))\n}"
    },
    {
        "question": "What is the military unit whose command structures are United States Department of the Navy and United States Department of Defense?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/commandStructure> <http://dbpedia.org/resource/United_States_Department_of_the_Navy> . ?uri <http://dbpedia.org/ontology/commandStructure> <http://dbpedia.org/resource/United_States_Department_of_Defense> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryUnit>}",
        "entities": [
            "http://dbpedia.org/resource/United_States_Department_of_Defense",
            "http://dbpedia.org/resource/United_States_Department_of_the_Navy"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/United_States_Department_of_the_Navy> -> <http://dbpedia.org/resource/United_States_Department_of_Defense>"
        ],
        "paths": "<http://dbpedia.org/resource/United_States_Department_of_the_Navy> -> <http://dbpedia.org/resource/United_States_Department_of_Defense>",
        "generated_query": "SELECT DISTINCT ?unit WHERE {\n  ?unit <http://dbpedia.org/property/parentAgency> <http://dbpedia.org/resource/United_States_Department_of_the_Navy> .\n  <http://dbpedia.org/resource/United_States_Department_of_the_Navy> <http://dbpedia.org/property/parentAgency> <http://dbpedia.org/resource/United_States_Department_of_Defense> .\n}"
    },
    {
        "question": "What are some other things developed by the company who made the remote desktop protocol?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/products> <http://dbpedia.org/resource/Remote_Desktop_Protocol> . ?x <http://dbpedia.org/ontology/product> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
        "entities": [
            "http://dbpedia.org/resource/Remote_desktop_software"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Remote_desktop_software> -> COMPANY -> OTHER_THINGS_DEVELOPED_BY_COMPANY"
        ],
        "paths": "<http://dbpedia.org/resource/Remote_desktop_software> -> COMPANY -> OTHER_THINGS_DEVELOPED_BY_COMPANY",
        "generated_query": "SELECT DISTINCT ?otherProduct WHERE {\n  ?company <http://dbpedia.org/ontology/product> <http://dbpedia.org/resource/Remote_desktop_software> .\n  ?company <http://dbpedia.org/ontology/product> ?otherProduct .\n  FILTER (?otherProduct != <http://dbpedia.org/resource/Remote_desktop_software>)\n}"
    },
    {
        "question": "Where was Al-Muzaffar Umar buried ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Al-Muzaffar_Umar> <http://dbpedia.org/property/placeOfBurial> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Umar"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Umar> -> \"burial place\""
        ],
        "paths": "<http://dbpedia.org/resource/Umar> -> \"burial place\"",
        "generated_query": "SELECT DISTINCT ?burialPlace WHERE {\n  <http://dbpedia.org/resource/Umar> <http://dbpedia.org/property/burialPlace> ?burialPlace .\n}"
    },
    {
        "question": "List the guests of On Broadway ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/On_Broadway_(Smash)> <http://dbpedia.org/property/guests> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Broadway_theatre",
            "http://dbpedia.org/resource/Off-Broadway"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Broadway_theatre> -> \"guest\""
        ],
        "paths": "<http://dbpedia.org/resource/Broadway_theatre> -> \"guest\"",
        "generated_query": "SELECT DISTINCT ?guest WHERE {\n  ?production <http://dbpedia.org/property/productions> <http://dbpedia.org/resource/Broadway_theatre> .\n  ?production <http://dbpedia.org/ontology/starring> ?guest .\n}"
    },
    {
        "question": "How many universities are there whose country's capital is Oslo?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/property/capital> <http://dbpedia.org/resource/Oslo> . ?uri <http://dbpedia.org/ontology/country> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
        "entities": [
            "http://dbpedia.org/resource/Oslo",
            "http://dbpedia.org/resource/University"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/University> -> <http://dbpedia.org/resource/Oslo>"
        ],
        "paths": "<http://dbpedia.org/resource/University> -> <http://dbpedia.org/resource/Oslo>",
        "generated_query": "SELECT (COUNT(DISTINCT ?univ) AS ?count)\nWHERE {\n  ?univ <http://purl.org/linguistics/gold/hypernym> <http://dbpedia.org/resource/University> .\n  {\n    ?univ <http://dbpedia.org/property/city> <http://dbpedia.org/resource/Oslo> .\n  }\n  UNION\n  {\n    ?univ <http://dbpedia.org/ontology/city> <http://dbpedia.org/resource/Oslo> .\n  }\n  UNION\n  {\n    ?univ <http://dbpedia.org/ontology/campus> <http://dbpedia.org/resource/Oslo> .\n  }\n}"
    },
    {
        "question": "Did Bob Dylan write the lyrics of the times they are a changin'?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/The_Times_They_Are_a-Changin'_(musical)> <http://dbpedia.org/property/lyrics> <http://dbpedia.org/resource/Bob_Dylan> }",
        "entities": [
            "http://dbpedia.org/resource/Bob_Dylan"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Bob_Dylan> -> \"lyrics of The Times They Are a-Changin'\""
        ],
        "paths": "<http://dbpedia.org/resource/Bob_Dylan> -> \"lyrics of The Times They Are a-Changin'\"",
        "generated_query": "ASK WHERE {\n  ?work ?prop <http://dbpedia.org/resource/Bob_Dylan> .\n  \n  ?work <http://dbpedia.org/property/title> ?title .\n  \n  FILTER(?prop IN (<http://dbpedia.org/property/writer>, <http://dbpedia.org/ontology/writer>, <http://dbpedia.org/property/lyrics>))\n  \n  FILTER(REGEX(?title, \"^The Times They Are a ?-?Changin('?s)?\", \"i\"))\n}"
    },
    {
        "question": "What is the religion of the ones in the Kampuchean Union of Salvation?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/militaryBranch> <http://dbpedia.org/resource/Kampuchean_United_Front_for_National_Salvation> . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Kampuchean_United_Front_for_National_Salvation"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Kampuchean_United_Front_for_National_Salvation> -> \"religion\""
        ],
        "paths": "<http://dbpedia.org/resource/Kampuchean_United_Front_for_National_Salvation> -> \"religion\"",
        "generated_query": "SELECT DISTINCT ?religion WHERE {\n  ?person <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Kampuchean_United_Front_for_National_Salvation> .\n  ?person <http://dbpedia.org/property/religion> ?religion .\n}"
    },
    {
        "question": "Where did the members of judge advocate general corps study?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/militaryRank> <http://dbpedia.org/resource/Judge_Advocate_General's_Corps,_United_States_Army> . ?x <http://dbpedia.org/ontology/almaMater> ?uri  . }",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?studyPlace WHERE {\n}"
    },
    {
        "question": "Name the airlines which have a hub in airport in SF?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/cityServed> <http://dbpedia.org/resource/San_Francisco> . ?uri <http://dbpedia.org/property/hubs> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airline>}",
        "entities": [
            "http://dbpedia.org/resource/San_Francisco"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/San_Francisco> -> HUB_AIRLINE"
        ],
        "paths": "<http://dbpedia.org/resource/San_Francisco> -> HUB_AIRLINE",
        "generated_query": "SELECT DISTINCT ?airline WHERE {\n  {\n    ?airline <http://dbpedia.org/property/location> <http://dbpedia.org/resource/San_Francisco> .\n  }\n  UNION\n  {\n    ?airline <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/San_Francisco> .\n  }\n}"
    },
    {
        "question": "Which executive producer of the ultimate merger is also an important person at Trump Productions?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Ultimate_Merger> <http://dbpedia.org/ontology/executiveProducer> ?uri. <http://dbpedia.org/resource/Trump_Productions> <http://dbpedia.org/ontology/keyPerson> ?uri . }",
        "entities": [
            "http://dbpedia.org/resource/Trump_Productions"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Trump_Productions> -> IMPORTANT_PERSON"
        ],
        "paths": "<http://dbpedia.org/resource/Trump_Productions> -> IMPORTANT_PERSON",
        "generated_query": "SELECT DISTINCT ?person WHERE {\n  {\n    <http://dbpedia.org/resource/The_Ultimate_Merger> <http://dbpedia.org/ontology/executiveProducer> ?person .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/The_Ultimate_Merger> <http://dbpedia.org/property/executiveProducer> ?person .\n  }\n  \n  {\n    <http://dbpedia.org/resource/Trump_Productions> <http://dbpedia.org/ontology/keyPerson> ?person .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Trump_Productions> <http://dbpedia.org/property/keyPeople> ?person .\n  }\n}"
    },
    {
        "question": "What is the official name of Colorado wine ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Colorado_wine> <http://dbpedia.org/property/officialName> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Colorado_wine"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Colorado_wine> -> \"official name\""
        ],
        "paths": "<http://dbpedia.org/resource/Colorado_wine> -> \"official name\"",
        "generated_query": "SELECT DISTINCT ?officialName WHERE {\n  <http://dbpedia.org/resource/Colorado_wine> <http://dbpedia.org/property/officialName> ?officialName .\n}"
    },
    {
        "question": "In how many states can one find Burr Tuss kind of bridges?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/property/style> <http://dbpedia.org/resource/Burr_Truss> . ?x <http://dbpedia.org/ontology/state> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Region>}",
        "entities": [
            "http://dbpedia.org/resource/Burr_Truss"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Burr_Truss> -> \"state\""
        ],
        "paths": "<http://dbpedia.org/resource/Burr_Truss> -> \"state\"",
        "generated_query": "SELECT (COUNT(DISTINCT ?state) AS ?countStates)\nWHERE {\n  ?bridge <http://dbpedia.org/ontology/architecturalStyle> <http://dbpedia.org/resource/Burr_Truss> .\n  ?bridge <http://dbpedia.org/ontology/state> ?state .\n}"
    },
    {
        "question": "who developed google videos?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Google_Videos> <http://dbpedia.org/property/developer> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Google_Video"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Google_Video> -> \"developer\""
        ],
        "paths": "<http://dbpedia.org/resource/Google_Video> -> \"developer\"",
        "generated_query": "SELECT DISTINCT ?developer WHERE {\n  ?developer <http://dbpedia.org/property/publisher> <http://dbpedia.org/resource/Google_Video> .\n}"
    },
    {
        "question": "Who is the child of John Tyler, Sr.?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_Tyler,_Sr.> <http://dbpedia.org/ontology/child> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/John_Tyler_Sr."
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/John_Tyler_Sr.> -> CHILD"
        ],
        "paths": "<http://dbpedia.org/resource/John_Tyler_Sr.> -> CHILD",
        "generated_query": "SELECT DISTINCT ?child WHERE {\n  <http://dbpedia.org/resource/John_Tyler_Sr.> <http://dbpedia.org/ontology/wikiPageWikiLink> ?intermediate .\n  ?intermediate <http://dbpedia.org/ontology/child> ?child .\n}"
    },
    {
        "question": "Is Brazilian jiu-jitsu the trainer of Nick Diaz?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/Nick_Diaz> <http://dbpedia.org/ontology/trainer> <http://dbpedia.org/resource/Brazilian_jiu-jitsu> }",
        "entities": [
            "http://dbpedia.org/resource/Nick_Diaz",
            "http://dbpedia.org/resource/Brazilian_jiu-jitsu"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Brazilian_jiu-jitsu> -> <http://dbpedia.org/resource/Nick_Diaz>"
        ],
        "paths": "<http://dbpedia.org/resource/Brazilian_jiu-jitsu> -> <http://dbpedia.org/resource/Nick_Diaz>",
        "generated_query": "ASK WHERE {\n  <http://dbpedia.org/resource/Nick_Diaz> <http://dbpedia.org/ontology/trainer> <http://dbpedia.org/resource/Brazilian_jiu-jitsu> .\n}"
    },
    {
        "question": "Who is the owner of  Latvian Wikipedia and Wiktionary ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Latvian_Wikipedia> <http://dbpedia.org/ontology/owner> ?uri. <http://dbpedia.org/resource/Wiktionary> <http://dbpedia.org/ontology/owner> ?uri . }",
        "entities": [
            "http://dbpedia.org/resource/Latvian_Wikipedia",
            "http://dbpedia.org/resource/Wiktionary"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Latvian_Wikipedia> -> <http://dbpedia.org/resource/Wiktionary>"
        ],
        "paths": "<http://dbpedia.org/resource/Latvian_Wikipedia> -> <http://dbpedia.org/resource/Wiktionary>",
        "generated_query": "SELECT DISTINCT ?owner WHERE {\n  {\n    { <http://dbpedia.org/resource/Latvian_Wikipedia> <http://dbpedia.org/property/owner> ?owner . }\n    UNION\n    { <http://dbpedia.org/resource/Latvian_Wikipedia> <http://dbpedia.org/ontology/owner> ?owner . }\n  }\n  {\n    { <http://dbpedia.org/resource/Wiktionary> <http://dbpedia.org/property/owner> ?owner . }\n    UNION\n    { <http://dbpedia.org/resource/Wiktionary> <http://dbpedia.org/ontology/owner> ?owner . }\n  }\n}"
    },
    {
        "question": "Name all those buried in a place governed by a city council.",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/governingBody> <http://dbpedia.org/resource/City_council> . ?uri <http://dbpedia.org/property/restingPlace> ?x  . }",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?person WHERE {\n  # No triples available to match the question\n}"
    },
    {
        "question": "What royalties's sepulchre is Mausoleum of Augustus?",
        "gold_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/placeOfBurial> <http://dbpedia.org/resource/Mausoleum_of_Augustus> } ",
        "entities": [
            "http://dbpedia.org/resource/Mausoleum_of_Augustus"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Mausoleum_of_Augustus> -> ROYALTY"
        ],
        "paths": "<http://dbpedia.org/resource/Mausoleum_of_Augustus> -> ROYALTY",
        "generated_query": "SELECT DISTINCT ?royalty ?royalHouse WHERE {\n  {\n    ?royalty <http://dbpedia.org/ontology/restingPlace> <http://dbpedia.org/resource/Mausoleum_of_Augustus> .\n  }\n  UNION\n  {\n    ?royalty <http://dbpedia.org/property/placeOfBurial> <http://dbpedia.org/resource/Mausoleum_of_Augustus> .\n  }\n  ?royalty <http://dbpedia.org/property/royalHouse> ?royalHouse .\n}"
    },
    {
        "question": "Name the common university of the Cardinal and Jim Wylie?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Stanford_Cardinal> <http://dbpedia.org/ontology/university> ?uri. <http://dbpedia.org/resource/Jim_Wylie> <http://dbpedia.org/ontology/university> ?uri . }",
        "entities": [
            "http://dbpedia.org/resource/Jim_Wylie"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Jim_Wylie> -> UNIVERSITY"
        ],
        "paths": "<http://dbpedia.org/resource/Jim_Wylie> -> UNIVERSITY",
        "generated_query": "SELECT DISTINCT ?university WHERE {\n  {\n    <http://dbpedia.org/resource/Jim_Wylie> <http://dbpedia.org/property/university> ?university .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Jim_Wylie> <http://dbpedia.org/ontology/university> ?university .\n  }\n  \n  {\n    ?cardinal <http://dbpedia.org/property/university> ?university .\n  }\n  UNION\n  {\n    ?cardinal <http://dbpedia.org/ontology/university> ?university .\n  }\n  \n  FILTER(?cardinal != <http://dbpedia.org/resource/Jim_Wylie>)\n}"
    },
    {
        "question": "What is the automobile platform of Chiva bus ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chiva_bus> <http://dbpedia.org/ontology/automobilePlatform> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Chiva_bus"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Chiva_bus> -> \"automobile platform\""
        ],
        "paths": "<http://dbpedia.org/resource/Chiva_bus> -> \"automobile platform\"",
        "generated_query": "SELECT DISTINCT ?platform WHERE {\n  <http://dbpedia.org/resource/Chiva_bus> <http://dbpedia.org/ontology/automobilePlatform> ?platform .\n}"
    },
    {
        "question": "Who are the animator of The Skeleton Dance?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Skeleton_Dance> <http://dbpedia.org/ontology/animator> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/The_Skeleton_Dance"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/The_Skeleton_Dance> -> \"animator\""
        ],
        "paths": "<http://dbpedia.org/resource/The_Skeleton_Dance> -> \"animator\"",
        "generated_query": "SELECT DISTINCT ?animator WHERE {\n  <http://dbpedia.org/resource/The_Skeleton_Dance> <http://dbpedia.org/ontology/animator> ?animator .\n}"
    },
    {
        "question": "How many movies have a screenplay located in the States?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/United_States> . ?uri <http://dbpedia.org/property/screenplay> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "entities": [
            "http://dbpedia.org/resource/Screenplay"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Screenplay> -> \"location\""
        ],
        "paths": "<http://dbpedia.org/resource/Screenplay> -> \"location\"",
        "generated_query": "SELECT (COUNT(DISTINCT ?movie) AS ?count)\nWHERE {\n  ?movie <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Screenplay> .\n  ?movie <http://dbpedia.org/property/location> ?loc .\n  \n  FILTER (\n    (isURI(?loc) && (\n      CONTAINS(STR(?loc), \"United_States\") || \n      CONTAINS(STR(?loc), \"United_\")\n    )) ||\n    (isLiteral(?loc) && (\n      CONTAINS(LCASE(STR(?loc)), \"united states\") ||\n      CONTAINS(LCASE(STR(?loc)), \"california\") ||\n      CONTAINS(LCASE(STR(?loc)), \"rhode island\") ||\n      CONTAINS(LCASE(STR(?loc)), \"hollywood\")\n    ))\n  )\n}"
    },
    {
        "question": "Which ceremonial County of the East Tilbury is also the local authority of the Trinity School, Brentwood?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/East_Tilbury> <http://dbpedia.org/ontology/ceremonialCounty> ?uri. <http://dbpedia.org/resource/Trinity_School,_Brentwood> <http://dbpedia.org/ontology/localAuthority> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Trinity_School_of_John_Whitgift",
            "http://dbpedia.org/resource/East_Tilbury"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/East_Tilbury> -> CEREMONIAL_COUNTY",
            "<http://dbpedia.org/resource/Trinity_School_of_John_Whitgift> -> LOCAL_AUTHORITY"
        ],
        "paths": "<http://dbpedia.org/resource/East_Tilbury> -> CEREMONIAL_COUNTY, <http://dbpedia.org/resource/Trinity_School_of_John_Whitgift> -> LOCAL_AUTHORITY",
        "generated_query": "SELECT DISTINCT ?county WHERE {\n  <http://dbpedia.org/resource/East_Tilbury> <http://dbpedia.org/ontology/ceremonialCounty> ?county .\n  <http://dbpedia.org/resource/Trinity_School,_Brentwood> <http://dbpedia.org/ontology/localAuthority> ?county .\n}"
    },
    {
        "question": "What system is both a platform where Nord runs and also distributed The beauty inside?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Nord_(video_game)> <http://dbpedia.org/ontology/computingPlatform> ?uri. <http://dbpedia.org/resource/The_Beauty_Inside> <http://dbpedia.org/ontology/distributor> ?uri . }",
        "entities": [
            "http://dbpedia.org/resource/Nord_(video_game)",
            "http://dbpedia.org/resource/The_Beauty_Inside_(web_series)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Nord_(video_game)> -> SYSTEM",
            "<http://dbpedia.org/resource/The_Beauty_Inside_(web_series)> -> SYSTEM"
        ],
        "paths": "<http://dbpedia.org/resource/Nord_(video_game)> -> SYSTEM",
        "generated_query": "SELECT DISTINCT ?system WHERE {\n  {\n    <http://dbpedia.org/resource/Nord_(video_game)> <http://dbpedia.org/ontology/computingPlatform> ?system .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Nord_(video_game)> <http://dbpedia.org/property/platforms> ?system .\n  }\n\n  {\n    <http://dbpedia.org/resource/The_Beauty_Inside_(web_series)> <http://dbpedia.org/ontology/distributor> ?system .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/The_Beauty_Inside_(web_series)> <http://dbpedia.org/property/platforms> ?system .\n  }\n}"
    },
    {
        "question": "Name the country whose leader's deputy is Piotr Glinski?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/deputy> <http://dbpedia.org/resource/Piotr_Gli\u0144ski> . ?uri <http://dbpedia.org/property/leaderName> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
        "entities": [
            "http://dbpedia.org/resource/Piotr_Gli\u0144ski"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Piotr_Gli\u0144ski> -> DEPUTY -> LEADER -> COUNTRY"
        ],
        "paths": "<http://dbpedia.org/resource/Piotr_Gli\u0144ski> -> DEPUTY -> LEADER -> COUNTRY",
        "generated_query": "SELECT DISTINCT ?countryLabel WHERE {\n  ?leader <http://dbpedia.org/ontology/deputy> <http://dbpedia.org/resource/Piotr_Gli\u0144ski> .\n  ?country <http://dbpedia.org/ontology/primeMinister> ?leader .\n  ?country <http://www.w3.org/2000/01/rdf-schema#label> ?countryLabel .\n  FILTER (lang(?countryLabel) = \"en\")\n}"
    },
    {
        "question": "Is Cologny a neighbouring city of Geneva?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/Geneva> <http://dbpedia.org/property/neighboringMunicipalities> <http://dbpedia.org/resource/Cologny> }",
        "entities": [
            "http://dbpedia.org/resource/Geneva",
            "http://dbpedia.org/resource/Cologny"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Cologny> -> <http://dbpedia.org/resource/Geneva>"
        ],
        "paths": "<http://dbpedia.org/resource/Cologny> -> <http://dbpedia.org/resource/Geneva>",
        "generated_query": "ASK WHERE {\n  {\n    <http://dbpedia.org/resource/Cologny> <http://dbpedia.org/ontology/neighboringMunicipality> <http://dbpedia.org/resource/Geneva> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Cologny> <http://dbpedia.org/property/neighboringMunicipalities> <http://dbpedia.org/resource/Geneva> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Geneva> <http://dbpedia.org/property/neighboringMunicipalities> <http://dbpedia.org/resource/Cologny> .\n  }\n}"
    },
    {
        "question": "Whose creators are Jerry Seinfeld and Larry David?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Jerry_Seinfeld> . ?uri <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Larry_David> . }",
        "entities": [
            "http://dbpedia.org/resource/Larry_David",
            "http://dbpedia.org/resource/Jerry_Seinfeld"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Larry_David> -> CREATOR",
            "<http://dbpedia.org/resource/Jerry_Seinfeld> -> CREATOR"
        ],
        "paths": "<http://dbpedia.org/resource/Larry_David> -> CREATOR, <http://dbpedia.org/resource/Jerry_Seinfeld> -> CREATOR",
        "generated_query": "SELECT DISTINCT ?work WHERE {\n  ?work <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Larry_David> .\n  ?work <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Jerry_Seinfeld> .\n}"
    },
    {
        "question": "Which TV show is related to The Sarah Jane Adventures and theme music is composed by  Ron Grainer?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/related> <http://dbpedia.org/resource/The_Sarah_Jane_Adventures> . ?uri <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Ron_Grainer>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "entities": [
            "http://dbpedia.org/resource/Ron_Grainer",
            "http://dbpedia.org/resource/The_Sarah_Jane_Adventures"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/The_Sarah_Jane_Adventures> -> <http://dbpedia.org/resource/Ron_Grainer>"
        ],
        "paths": "<http://dbpedia.org/resource/The_Sarah_Jane_Adventures> -> <http://dbpedia.org/resource/Ron_Grainer>",
        "generated_query": "SELECT DISTINCT ?show WHERE {\n  {\n    <http://dbpedia.org/resource/The_Sarah_Jane_Adventures> <http://dbpedia.org/ontology/related> ?show .\n    ?show <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Ron_Grainer> .\n  }\n  UNION\n  {\n    ?show <http://dbpedia.org/ontology/related> <http://dbpedia.org/resource/The_Sarah_Jane_Adventures> .\n    ?show <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Ron_Grainer> .\n  }\n}"
    },
    {
        "question": "Name the parent company of  Ford Air Transport Service ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ford_Air_Transport_Service> <http://dbpedia.org/ontology/parentCompany> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Ford_Air_Transport_Service"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Ford_Air_Transport_Service> -> PARENT_COMPANY"
        ],
        "paths": "<http://dbpedia.org/resource/Ford_Air_Transport_Service> -> PARENT_COMPANY",
        "generated_query": "SELECT DISTINCT ?parentCompany WHERE {\n  <http://dbpedia.org/resource/Ford_Air_Transport_Service> <http://dbpedia.org/ontology/parentCompany> ?parentCompany .\n}"
    },
    {
        "question": "Who  has these major shrines  : Emmitsburg, Maryland and Shrine of St. Elizabeth Ann Bayley Seton?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/majorShrine> <http://dbpedia.org/resource/Emmitsburg,_Maryland> . ?uri <http://dbpedia.org/ontology/majorShrine> <http://dbpedia.org/resource/Shrine_of_St._Elizabeth_Ann_Bayley_Seton> . }",
        "entities": [
            "http://dbpedia.org/resource/National_Shrine_of_St._Elizabeth_Ann_Seton",
            "http://dbpedia.org/resource/Emmitsburg,_Maryland"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/National_Shrine_of_St._Elizabeth_Ann_Seton> -> <http://dbpedia.org/resource/Emmitsburg,_Maryland>"
        ],
        "paths": "<http://dbpedia.org/resource/National_Shrine_of_St._Elizabeth_Ann_Seton> -> <http://dbpedia.org/resource/Emmitsburg,_Maryland>",
        "generated_query": "SELECT DISTINCT ?owner WHERE {\n  ?owner ?p1 <http://dbpedia.org/resource/National_Shrine_of_St._Elizabeth_Ann_Seton> .\n  ?owner ?p2 <http://dbpedia.org/resource/Emmitsburg,_Maryland> .\n}"
    },
    {
        "question": "Which region of Bannock is the origin od Spaghetti squash ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Spaghetti_squash> <http://dbpedia.org/ontology/origin> ?uri. <http://dbpedia.org/resource/Bannock_(food)> <http://dbpedia.org/ontology/region> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Spaghetti",
            "http://dbpedia.org/resource/Bannock_County,_Idaho"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Spaghetti> -> <http://dbpedia.org/resource/Bannock_County,_Idaho>"
        ],
        "paths": "<http://dbpedia.org/resource/Spaghetti> -> <http://dbpedia.org/resource/Bannock_County,_Idaho>",
        "generated_query": "SELECT DISTINCT ?template WHERE {\n  <http://dbpedia.org/resource/Spaghetti> <http://dbpedia.org/property/wikiPageUsesTemplate> ?template .\n  <http://dbpedia.org/resource/Bannock_County,_Idaho> <http://dbpedia.org/property/wikiPageUsesTemplate> ?template .\n}"
    },
    {
        "question": "Where in the us military did pierre r graham and edwin f hunter work?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pierre_R._Graham> <http://dbpedia.org/property/branch> ?uri. <http://dbpedia.org/resource/Edwin_F._Hunter> <http://dbpedia.org/property/branch> ?uri . }",
        "entities": [
            "http://dbpedia.org/resource/United_States_Armed_Forces",
            "http://dbpedia.org/resource/Edwin_F._Hunter",
            "http://dbpedia.org/resource/Pierre_R._Graham"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Edwin_F._Hunter> -> <http://dbpedia.org/resource/United_States_Armed_Forces>",
            "<http://dbpedia.org/resource/Pierre_R._Graham> -> <http://dbpedia.org/resource/United_States_Armed_Forces>"
        ],
        "paths": "<http://dbpedia.org/resource/Edwin_F._Hunter> -> <http://dbpedia.org/resource/United_States_Armed_Forces>, <http://dbpedia.org/resource/Pierre_R._Graham> -> <http://dbpedia.org/resource/United_States_Armed_Forces>",
        "generated_query": "SELECT DISTINCT ?person ?branch WHERE {\n  {\n    VALUES ?person { <http://dbpedia.org/resource/Pierre_R._Graham> <http://dbpedia.org/resource/Edwin_F._Hunter> }\n    {\n      ?person <http://dbpedia.org/ontology/militaryBranch> ?branch .\n    }\n    UNION\n    {\n      ?person <http://dbpedia.org/property/branch> ?branch .\n    }\n    ?branch <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/United_States_Armed_Forces> .\n  }\n}"
    },
    {
        "question": "Count everyone who lives in a place where Indian English is an official language ?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/ontology/officialLanguage> <http://dbpedia.org/resource/Indian_English> . ?uri <http://dbpedia.org/ontology/residence> ?x  . }",
        "entities": [
            "http://dbpedia.org/resource/Indian_English"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Indian_English> -> PLACE -> \"member\""
        ],
        "paths": "<http://dbpedia.org/resource/Indian_English> -> PLACE -> \"member\"",
        "generated_query": "SELECT (COUNT(DISTINCT ?place) AS ?count)\nWHERE {\n  ?place <http://dbpedia.org/property/demographics1Info> <http://dbpedia.org/resource/Indian_English> .\n}"
    },
    {
        "question": "Did Raymond Picard take birth in Paris?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/Raymond_Picard> <http://dbpedia.org/property/birthplace> <http://dbpedia.org/resource/Paris> }",
        "entities": [
            "http://dbpedia.org/resource/Paris",
            "http://dbpedia.org/resource/Raymond_Picard"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Raymond_Picard> -> <http://dbpedia.org/resource/Paris>"
        ],
        "paths": "<http://dbpedia.org/resource/Raymond_Picard> -> <http://dbpedia.org/resource/Paris>",
        "generated_query": "ASK WHERE {\n  {\n    <http://dbpedia.org/resource/Raymond_Picard> <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Paris> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Raymond_Picard> <http://dbpedia.org/property/placeOfBirth> <http://dbpedia.org/resource/Paris> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Raymond_Picard> <http://dbpedia.org/property/birthplace> <http://dbpedia.org/resource/Paris> .\n  }\n}"
    },
    {
        "question": "How many religions are practiced by diplomats?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/ontology/profession> <http://dbpedia.org/resource/Diplomacy> . ?x <http://dbpedia.org/property/religion> ?uri  . }",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT (COUNT(DISTINCT ?religion) AS ?count) WHERE {\n  ?diplomat a <ALL_CAPS_DIPLOMAT_CLASS> .\n  ?diplomat <ALL_CAPS_PRACTICES_RELIGION_PROPERTY> ?religion .\n  ?religion a <ALL_CAPS_RELIGION_CLASS> .\n}"
    },
    {
        "question": "Was Elton John a chairman of a Watford FC Season?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/1999\u20132000_Watford_F.C._season> <http://dbpedia.org/ontology/chairman> <http://dbpedia.org/resource/Elton_John> }",
        "entities": [
            "http://dbpedia.org/resource/Elton_John",
            "http://dbpedia.org/resource/Watford_F.C."
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Elton_John> -> <http://dbpedia.org/resource/Watford_F.C.>"
        ],
        "paths": "<http://dbpedia.org/resource/Elton_John> -> <http://dbpedia.org/resource/Watford_F.C.>",
        "generated_query": "ASK WHERE {\n  {\n    ?season <http://dbpedia.org/ontology/chairman> <http://dbpedia.org/resource/Elton_John> .\n    ?season <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Watford_F.C.> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Watford_F.C.> <http://dbpedia.org/ontology/wikiPageWikiLink> ?season .\n    ?season <http://dbpedia.org/ontology/chairman> <http://dbpedia.org/resource/Elton_John> .\n  }\n  UNION\n  {\n    ?season <http://dbpedia.org/property/chairman> <http://dbpedia.org/resource/Elton_John> .\n    ?season <http://dbpedia.org/property/club> <http://dbpedia.org/resource/Watford_F.C.> .\n  }\n}"
    },
    {
        "question": "Which publisher of Lucifer's hammer is also known for Jo Garcia ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lucifer's_Hammer> <http://dbpedia.org/ontology/publisher> ?uri. <http://dbpedia.org/resource/Jo_Garcia> <http://dbpedia.org/ontology/knownFor> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Jose_Garcia_(game_designer)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Jose_Garcia_(game_designer)> -> PUBLISHER"
        ],
        "paths": "<http://dbpedia.org/resource/Jose_Garcia_(game_designer)> -> PUBLISHER",
        "generated_query": "SELECT DISTINCT ?publisher WHERE {\n  \n  # Publisher of Lucifer's hammer\n  {\n    <http://dbpedia.org/resource/Lucifer%27s_Hammer> <http://dbpedia.org/ontology/publisher> ?publisher .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Lucifer%27s_Hammer> <http://dbpedia.org/property/publisher> ?publisher .\n  }\n  \n  # Publisher of games linked to Jose Garcia\n  {\n    <http://dbpedia.org/resource/Jose_Garcia_(game_designer)> <http://dbpedia.org/ontology/wikiPageWikiLink> ?game .\n    {\n      ?game <http://dbpedia.org/ontology/publisher> ?publisher .\n    }\n    UNION\n    {\n      ?game <http://dbpedia.org/property/publisher> ?publisher .\n    }\n  }\n}"
    },
    {
        "question": "To whom was Tessa Dahl born to?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tessa_Dahl> <http://dbpedia.org/ontology/parent> ?uri } ",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?parent WHERE {\n  <urn:Tessa_Dahl> ?p ?parent .\n  FILTER(CONTAINS(STR(?p), \"parent\"))\n}"
    },
    {
        "question": "Which sport at Polytechnic University of the Philippines Taguig is the field of Jon speelman ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jon_Speelman> <http://dbpedia.org/ontology/field> ?uri. <http://dbpedia.org/resource/Polytechnic_University_of_the_Philippines_Taguig> <http://dbpedia.org/ontology/sport> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Jon_Speelman",
            "http://dbpedia.org/resource/Polytechnic_University_of_the_Philippines_Taguig"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Jon_Speelman> -> <http://dbpedia.org/resource/Polytechnic_University_of_the_Philippines_Taguig> -> \"sport\""
        ],
        "paths": "<http://dbpedia.org/resource/Jon_Speelman> -> <http://dbpedia.org/resource/Polytechnic_University_of_the_Philippines_Taguig> -> \"sport\"",
        "generated_query": "SELECT DISTINCT ?sport WHERE {\n  <http://dbpedia.org/resource/Jon_Speelman> <http://dbpedia.org/ontology/field> ?sport .\n  <http://dbpedia.org/resource/Polytechnic_University_of_the_Philippines_Taguig> <http://dbpedia.org/ontology/sport> ?sport .\n}"
    },
    {
        "question": "Count the number of things people who know linguistics are known for ?",
        "gold_query": " SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/Linguistics> . ?x <http://dbpedia.org/ontology/knownFor> ?uri }",
        "entities": [
            "http://dbpedia.org/resource/Linguistics"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Linguistics> -> PEOPLE -> KNOWN_FOR"
        ],
        "paths": "<http://dbpedia.org/resource/Linguistics> -> PEOPLE -> KNOWN_FOR",
        "generated_query": "SELECT (COUNT(DISTINCT ?thing) AS ?count)\nWHERE {\n  ?person <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Linguistics> .\n  ?person <http://dbpedia.org/ontology/knownFor> ?thing .\n}"
    },
    {
        "question": "Where were sverre krogh sundbo and havard vad petersson born?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sverre_Krogh_Sundb\u00f8> <http://dbpedia.org/property/birthPlace> ?uri. <http://dbpedia.org/resource/H\u00e5vard_Vad_Petersson> <http://dbpedia.org/property/placeOfBirth> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/H\u00e5vard_Vad_Petersson",
            "http://dbpedia.org/resource/Sverre_Krogh_Sundb\u00f8"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/H\u00e5vard_Vad_Petersson> -> \"birthPlace\"",
            "<http://dbpedia.org/resource/Sverre_Krogh_Sundb\u00f8> -> \"birthPlace\""
        ],
        "paths": "<http://dbpedia.org/resource/H\u00e5vard_Vad_Petersson> -> \"birthPlace\", <http://dbpedia.org/resource/Sverre_Krogh_Sundb\u00f8> -> \"birthPlace\"",
        "generated_query": "SELECT DISTINCT ?person ?birthPlace WHERE {\n  VALUES ?person {\n    <http://dbpedia.org/resource/H\u00e5vard_Vad_Petersson>\n    <http://dbpedia.org/resource/Sverre_Krogh_Sundb\u00f8>\n  }\n  ?person <http://dbpedia.org/ontology/birthPlace> ?birthPlace .\n}"
    },
    {
        "question": "Was Cliff Burton in Metallica?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/Metallica> <http://dbpedia.org/property/pastMembers> <http://dbpedia.org/resource/Cliff_Burton> }",
        "entities": [
            "http://dbpedia.org/resource/Cliff_Burton",
            "http://dbpedia.org/resource/Metallica"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Cliff_Burton> -> <http://dbpedia.org/resource/Metallica>"
        ],
        "paths": "<http://dbpedia.org/resource/Cliff_Burton> -> <http://dbpedia.org/resource/Metallica>",
        "generated_query": "ASK WHERE {\n  {\n    <http://dbpedia.org/resource/Metallica> <http://dbpedia.org/property/pastMembers> <http://dbpedia.org/resource/Cliff_Burton> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Metallica> <http://dbpedia.org/ontology/formerBandMember> <http://dbpedia.org/resource/Cliff_Burton> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Cliff_Burton> <http://dbpedia.org/ontology/associatedBand> <http://dbpedia.org/resource/Metallica> .\n  }\n}"
    },
    {
        "question": "How many religions are followed by organizations which are internationally known as the muslim brotherhood?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/property/international> <http://dbpedia.org/resource/Muslim_Brotherhood> . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Muslim_Brotherhood",
            "http://dbpedia.org/resource/Religion"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Muslim_Brotherhood> -> <http://dbpedia.org/resource/Religion>"
        ],
        "paths": "<http://dbpedia.org/resource/Muslim_Brotherhood> -> <http://dbpedia.org/resource/Religion>",
        "generated_query": "SELECT (COUNT(DISTINCT ?religion) AS ?count)\nWHERE {\n  <http://dbpedia.org/resource/Muslim_Brotherhood> <http://dbpedia.org/ontology/religion> ?religion .\n  <http://dbpedia.org/resource/Religion> <http://dbpedia.org/ontology/wikiPageWikiLink> ?religion .\n}"
    },
    {
        "question": "What are some people born in NY known for?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/New_York_City> . ?x <http://dbpedia.org/ontology/knownFor> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/New_York_(state)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/New_York_(state)> -> PEOPLE -> \"known for\""
        ],
        "paths": "<http://dbpedia.org/resource/New_York_(state)> -> PEOPLE -> \"known for\"",
        "generated_query": "SELECT DISTINCT ?person ?knownFor WHERE {\n  ?person <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/New_York_(state)> .\n  ?person <http://dbpedia.org/ontology/knownFor> ?knownFor .\n}\nLIMIT 100"
    },
    {
        "question": "Who is the developer of the software which is produced by Claris ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Claris> <http://dbpedia.org/property/products> ?x . ?x <http://dbpedia.org/ontology/developer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Software>}",
        "entities": [
            "http://dbpedia.org/resource/Claris"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Claris> -> SOFTWARE -> DEVELOPER"
        ],
        "paths": "<http://dbpedia.org/resource/Claris> -> SOFTWARE -> DEVELOPER",
        "generated_query": "SELECT DISTINCT ?developer WHERE {\n  {\n    <http://dbpedia.org/resource/Claris> <http://dbpedia.org/ontology/product> ?software .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Claris> <http://dbpedia.org/property/products> ?software .\n  }\n  \n  {\n    ?software <http://dbpedia.org/ontology/developer> ?developer .\n  }\n  UNION\n  {\n    ?software <http://dbpedia.org/property/developer> ?developer .\n  }\n}"
    },
    {
        "question": "What is the river whose source is Cowombat  Flat and has it's mouth located in Murray Mouth?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/source> <http://dbpedia.org/resource/Cowombat_Flat> . ?uri <http://dbpedia.org/ontology/riverMouth> <http://dbpedia.org/resource/Murray_Mouth>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "entities": [
            "http://dbpedia.org/resource/Murray_Mouth",
            "http://dbpedia.org/resource/Cow_Flat"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Cow_Flat> -> <http://dbpedia.org/resource/Murray_Mouth>"
        ],
        "paths": "<http://dbpedia.org/resource/Cow_Flat> -> <http://dbpedia.org/resource/Murray_Mouth>",
        "generated_query": "SELECT DISTINCT ?river WHERE {\n  <http://dbpedia.org/resource/Cow_Flat> <http://dbpedia.org/property/wikiPageUsesTemplate> ?template .\n  ?river <http://dbpedia.org/property/wikiPageUsesTemplate> ?template .\n  {\n    ?river <http://dbpedia.org/ontology/riverMouth> <http://dbpedia.org/resource/Murray_Mouth> .\n  }\n  UNION\n  {\n    ?river <http://dbpedia.org/property/mouthName> <http://dbpedia.org/resource/Murray_Mouth> .\n  }\n}"
    },
    {
        "question": "Where does the river flow into which begins in Lebrsnik?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/sourcePlace> <http://dbpedia.org/resource/Lebr\u0161nik> . ?x <http://dbpedia.org/ontology/riverMouth> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Lebr\u0161nik"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Lebr\u0161nik> -> RIVER -> FLOWS_INTO"
        ],
        "paths": "<http://dbpedia.org/resource/Lebr\u0161nik> -> RIVER -> FLOWS_INTO",
        "generated_query": "SELECT DISTINCT ?riverMouth WHERE {\n  ?river <http://dbpedia.org/ontology/origin> <http://dbpedia.org/resource/Lebr\u0161nik> .\n  ?riverMouth <http://dbpedia.org/ontology/riverMouth> ?river .\n}"
    },
    {
        "question": "What is the government type of Ancient Rome ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ancient_Rome> <http://dbpedia.org/ontology/governmentType> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Ancient_Rome"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Ancient_Rome> -> \"government type\""
        ],
        "paths": "<http://dbpedia.org/resource/Ancient_Rome> -> \"government type\"",
        "generated_query": "SELECT DISTINCT ?governmentType WHERE {\n  {\n    <http://dbpedia.org/resource/Ancient_Rome> <http://dbpedia.org/ontology/governmentType> ?governmentType .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Ancient_Rome> <http://dbpedia.org/property/governmentType> ?governmentType .\n  }\n}"
    },
    {
        "question": "Which director of On deadly Ground also released Mojo Priest ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mojo_Priest> <http://dbpedia.org/property/artist> ?uri. <http://dbpedia.org/resource/On_Deadly_Ground> <http://dbpedia.org/property/director> ?uri . }",
        "entities": [
            "http://dbpedia.org/resource/On_Deadly_Ground",
            "http://dbpedia.org/resource/Mojo_Priest"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/On_Deadly_Ground> -> DIRECTOR -> <http://dbpedia.org/resource/Mojo_Priest>"
        ],
        "paths": "<http://dbpedia.org/resource/On_Deadly_Ground> -> DIRECTOR -> <http://dbpedia.org/resource/Mojo_Priest>",
        "generated_query": "SELECT DISTINCT ?director WHERE {\n  <http://dbpedia.org/resource/On_Deadly_Ground> <http://dbpedia.org/ontology/director> ?director .\n  {\n    <http://dbpedia.org/resource/Mojo_Priest> <http://dbpedia.org/ontology/artist> ?director .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Mojo_Priest> <http://dbpedia.org/property/artist> ?director .\n  }\n}"
    },
    {
        "question": "What is the television show whose channel's parent organisation is Fox Sports?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/parentOrganisation> <http://dbpedia.org/resource/Fox_Sports_(United_States)> . ?uri <http://dbpedia.org/ontology/channel> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "entities": [
            "http://dbpedia.org/resource/Fox_Sports"
        ],
        "classes": [],
        "relations": [
            "TELEVISION_SHOW -> CHANNEL -> <http://dbpedia.org/resource/Fox_Sports>"
        ],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?show WHERE {\n  ?show <http://dbpedia.org/ontology/channel> ?channel .\n  ?channel <http://dbpedia.org/ontology/parentOrganisation> <http://dbpedia.org/resource/Fox_Sports> .\n}"
    },
    {
        "question": "Who commanded the invasion of Buwat and made Fatima bint Sa'd famous?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Invasion_of_Buwat> <http://dbpedia.org/property/commander> ?uri. <http://dbpedia.org/resource/Fatimah_bint_Sa'd> <http://dbpedia.org/ontology/knownFor> ?uri . }",
        "entities": [
            "http://dbpedia.org/resource/Fatimah_bint_Sa'd",
            "http://dbpedia.org/resource/Patrol_of_Buwat"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Patrol_of_Buwat> -> <http://dbpedia.org/resource/Fatimah_bint_Sa'd>"
        ],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?commander WHERE {\n  <http://dbpedia.org/resource/Patrol_of_Buwat> <http://dbpedia.org/ontology/commander> ?commander .\n}"
    },
    {
        "question": "What is the home ground of the clubs managed by Ciao Zanardi?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/manager> <http://dbpedia.org/resource/Caio_Zanardi> . ?x <http://dbpedia.org/ontology/ground> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClubSeason>}",
        "entities": [
            "http://dbpedia.org/resource/Caio_Zanardi"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Caio_Zanardi> -> CLUB -> \"home ground\""
        ],
        "paths": "<http://dbpedia.org/resource/Caio_Zanardi> -> CLUB -> \"home ground\"",
        "generated_query": "SELECT DISTINCT ?team ?homeGround WHERE {\n  ?season <http://dbpedia.org/ontology/manager> <http://dbpedia.org/resource/Caio_Zanardi> .\n  ?season <http://dbpedia.org/property/team> ?team .\n  ?season <http://dbpedia.org/ontology/homeStadium> ?homeGround .\n}"
    },
    {
        "question": "What is the country with native language as Languages of Ethiopia?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/language> <http://dbpedia.org/resource/Languages_of_Ethiopia>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
        "entities": [
            "http://dbpedia.org/resource/Languages_of_Ethiopia"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Languages_of_Ethiopia> -> <http://dbpedia.org/ontology/Country>"
        ],
        "paths": "<http://dbpedia.org/resource/Languages_of_Ethiopia> -> <http://dbpedia.org/ontology/Country>",
        "generated_query": "SELECT DISTINCT ?country WHERE {\n  ?country <http://dbpedia.org/ontology/language> <http://dbpedia.org/resource/Languages_of_Ethiopia> .\n  ?country a <http://dbpedia.org/ontology/Country> .\n}"
    },
    {
        "question": "What is the band with previous members  Kevin Jonas and Joe Jonas?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/pastMembers> <http://dbpedia.org/resource/Kevin_Jonas> . ?uri <http://dbpedia.org/property/pastMembers> <http://dbpedia.org/resource/Joe_Jonas> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>}",
        "entities": [
            "http://dbpedia.org/resource/Joe_Jonas",
            "http://dbpedia.org/resource/Kevin_Jonas"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Kevin_Jonas> -> BAND -> <http://dbpedia.org/resource/Joe_Jonas>"
        ],
        "paths": "<http://dbpedia.org/resource/Kevin_Jonas> -> BAND -> <http://dbpedia.org/resource/Joe_Jonas>",
        "generated_query": "SELECT DISTINCT ?band WHERE {\n  ?band <http://dbpedia.org/ontology/formerBandMember> <http://dbpedia.org/resource/Kevin_Jonas> .\n  ?band <http://dbpedia.org/ontology/formerBandMember> <http://dbpedia.org/resource/Joe_Jonas> .\n}"
    },
    {
        "question": "List the people with Scientology as their religious belief?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/religion> <http://dbpedia.org/resource/Scientology>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "entities": [
            "http://dbpedia.org/resource/Scientology"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Scientology> -> \"member\""
        ],
        "paths": "<http://dbpedia.org/resource/Scientology> -> \"member\"",
        "generated_query": "SELECT DISTINCT ?person WHERE {\n  ?person <http://dbpedia.org/property/religiousAffiliation> <http://dbpedia.org/resource/Scientology> .\n}"
    },
    {
        "question": "How many fictional characters were humans?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE {?uri <http://dbpedia.org/ontology/species> <http://dbpedia.org/resource/Human>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>}",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT (COUNT(DISTINCT ?char) AS ?count)\nWHERE {\n  ?char <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> ALL_CAPS_FICTIONAL_CHARACTER .\n  ?char <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> ALL_CAPS_HUMAN .\n}"
    },
    {
        "question": "Where was Girls (The Prodigy song)  recorded ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Girls_(The_Prodigy_song)> <http://dbpedia.org/property/recorded> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/The_Prodigy",
            "http://dbpedia.org/resource/Girls_(The_Prodigy_song)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Girls_(The_Prodigy_song)> -> \"recording location\""
        ],
        "paths": "<http://dbpedia.org/resource/Girls_(The_Prodigy_song)> -> \"recording location\"",
        "generated_query": "SELECT DISTINCT ?recordingPlace ?location WHERE {\n  <http://dbpedia.org/resource/Girls_(The_Prodigy_song)> <http://dbpedia.org/ontology/recordedIn> ?recordingPlace .\n  OPTIONAL {\n    ?recordingPlace <http://dbpedia.org/ontology/location> ?location .\n  }\n}"
    },
    {
        "question": "How many TV shows' networks are headquarterd in NY?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/property/headquarters> <http://dbpedia.org/resource/New_York> . ?uri <http://dbpedia.org/property/network> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "entities": [
            "http://dbpedia.org/resource/New_York_(state)"
        ],
        "classes": [],
        "relations": [
            "TVShow -> Network -> <http://dbpedia.org/resource/New_York_(state)>"
        ],
        "paths": "",
        "generated_query": "SELECT (COUNT(DISTINCT ?tvshow) AS ?count)\nWHERE {\n  ?tvshow <http://dbpedia.org/ontology/network> ?network .\n  ?network <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/New_York_(state)> .\n}"
    },
    {
        "question": "Does StandBy records distribute via Sony?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/StandBy_Records> <http://dbpedia.org/ontology/distributingLabel> <http://dbpedia.org/resource/Sony> }",
        "entities": [
            "http://dbpedia.org/resource/StandBy_Records",
            "http://dbpedia.org/resource/Sony"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/StandBy_Records> -> <http://dbpedia.org/resource/Sony>"
        ],
        "paths": "<http://dbpedia.org/resource/StandBy_Records> -> <http://dbpedia.org/resource/Sony>",
        "generated_query": "ASK WHERE {\n  {\n    <http://dbpedia.org/resource/StandBy_Records> <http://dbpedia.org/property/distributor> <http://dbpedia.org/resource/Sony> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/StandBy_Records> <http://dbpedia.org/ontology/distributingCompany> <http://dbpedia.org/resource/Sony> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/StandBy_Records> <http://dbpedia.org/ontology/distributingLabel> <http://dbpedia.org/resource/Sony> .\n  }\n}"
    },
    {
        "question": "Give me some shows owned by BBC one and BBC hd?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/network> <http://dbpedia.org/resource/BBC_One> . ?uri <http://dbpedia.org/ontology/network> <http://dbpedia.org/resource/BBC_HD> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "entities": [
            "http://dbpedia.org/resource/BBC_HD",
            "http://dbpedia.org/resource/BBC_One"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/BBC_One> -> member",
            "<http://dbpedia.org/resource/BBC_HD> -> member"
        ],
        "paths": "<http://dbpedia.org/resource/BBC_One> -> member, <http://dbpedia.org/resource/BBC_HD> -> member",
        "generated_query": "SELECT DISTINCT ?show WHERE {\n  {\n    { ?show <http://dbpedia.org/property/network> <http://dbpedia.org/resource/BBC_One> . }\n    UNION\n    { ?show <http://dbpedia.org/ontology/network> <http://dbpedia.org/resource/BBC_One> . }\n  }\n  {\n    { ?show <http://dbpedia.org/property/network> <http://dbpedia.org/resource/BBC_HD> . }\n    UNION\n    { ?show <http://dbpedia.org/ontology/network> <http://dbpedia.org/resource/BBC_HD> . }\n  }\n}\nLIMIT 100"
    },
    {
        "question": "How many teams have rented stadiums in Canada?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/property/location> <http://dbpedia.org/resource/Canada> . ?x <http://dbpedia.org/property/tenants> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Canada"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Canada> -> TEAMS -> STADIUMS"
        ],
        "paths": "<http://dbpedia.org/resource/Canada> -> TEAMS -> STADIUMS",
        "generated_query": "SELECT (COUNT(DISTINCT ?team) AS ?teamCount)\nWHERE {\n  ?stadium <http://dbpedia.org/property/location> <http://dbpedia.org/resource/Canada> .\n  ?team <http://dbpedia.org/property/stadium> ?stadium .\n}"
    },
    {
        "question": "List the awards won by the film director of Chicken Run?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chicken_Run> <http://dbpedia.org/property/director> ?x . ?x <http://dbpedia.org/ontology/award> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Chicken_Run"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Chicken_Run> -> DIRECTOR -> \"awards\""
        ],
        "paths": "<http://dbpedia.org/resource/Chicken_Run> -> DIRECTOR -> \"awards\"",
        "generated_query": "SELECT DISTINCT ?award WHERE {\n  <http://dbpedia.org/resource/Chicken_Run> <http://dbpedia.org/ontology/director> ?director .\n  ?director <http://dbpedia.org/ontology/award> ?award .\n}"
    },
    {
        "question": "What territory of Sino French War was the battle of Raoul Magrin-Vernerey fought ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sino-French_War> <http://dbpedia.org/ontology/territory> ?uri. <http://dbpedia.org/resource/Raoul_Magrin-Vernerey> <http://dbpedia.org/property/battles> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Sino-French_War",
            "http://dbpedia.org/resource/Raoul_Magrin-Vernerey"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Raoul_Magrin-Vernerey> -> <http://dbpedia.org/resource/Sino-French_War>"
        ],
        "paths": "<http://dbpedia.org/resource/Raoul_Magrin-Vernerey> -> <http://dbpedia.org/resource/Sino-French_War>",
        "generated_query": "SELECT DISTINCT ?territory WHERE {\n  <http://dbpedia.org/resource/Raoul_Magrin-Vernerey> <http://dbpedia.org/property/battles> ?battle .\n  <http://dbpedia.org/resource/Sino-French_War> <http://dbpedia.org/ontology/territory> ?territory .\n  FILTER(?battle = ?territory)\n}"
    },
    {
        "question": "List the  outflow of Lake Uniamsi?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lake_Uniam\u00e9si> <http://dbpedia.org/ontology/outflow> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Lake_Uniam\u00e9si"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Lake_Uniam\u00e9si> -> \"outflow\""
        ],
        "paths": "<http://dbpedia.org/resource/Lake_Uniam\u00e9si> -> \"outflow\"",
        "generated_query": "SELECT DISTINCT ?outflow WHERE {\n  {\n    <http://dbpedia.org/resource/Lake_Uniam\u00e9si> <http://dbpedia.org/property/outflow> ?outflow .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Lake_Uniam\u00e9si> <http://dbpedia.org/ontology/outflow> ?outflow .\n  }\n}"
    },
    {
        "question": "Did John Byrne create Emma Frost?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/Emma_Frost> <http://dbpedia.org/property/creators> <http://dbpedia.org/resource/John_Byrne_(comics)> }",
        "entities": [
            "http://dbpedia.org/resource/Emma_Frost",
            "http://dbpedia.org/resource/John_Byrne_(comics)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Emma_Frost> -> <http://dbpedia.org/resource/John_Byrne_(comics)>"
        ],
        "paths": "<http://dbpedia.org/resource/Emma_Frost> -> <http://dbpedia.org/resource/John_Byrne_(comics)>",
        "generated_query": "ASK WHERE {\n  {\n    <http://dbpedia.org/resource/Emma_Frost> <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/John_Byrne_(comics)> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Emma_Frost> <http://dbpedia.org/property/creators> <http://dbpedia.org/resource/John_Byrne_(comics)> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Emma_Frost> <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/John_Byrne_(comics)> .\n  }\n}"
    },
    {
        "question": "Was Heinrich Himmler ever a commanders of Army Group Oberrhein?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/Army_Group_Oberrhein_(Germany)> <http://dbpedia.org/property/notableCommanders> <http://dbpedia.org/resource/Heinrich_Himmler> }",
        "entities": [
            "http://dbpedia.org/resource/Army_Group_Upper_Rhine",
            "http://dbpedia.org/resource/Heinrich_Himmler"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Heinrich_Himmler> -> <http://dbpedia.org/resource/Army_Group_Upper_Rhine>"
        ],
        "paths": "<http://dbpedia.org/resource/Heinrich_Himmler> -> <http://dbpedia.org/resource/Army_Group_Upper_Rhine>",
        "generated_query": "ASK WHERE {\n  {\n    <http://dbpedia.org/resource/Army_Group_Upper_Rhine> <http://dbpedia.org/ontology/wikiPageRedirects> ?armyGroup .\n    {\n      ?armyGroup <http://dbpedia.org/ontology/notableCommander> <http://dbpedia.org/resource/Heinrich_Himmler> .\n    }\n    UNION\n    {\n      ?armyGroup <http://dbpedia.org/property/notableCommanders> <http://dbpedia.org/resource/Heinrich_Himmler> .\n    }\n  }\n  UNION\n  {\n    {\n      <http://dbpedia.org/resource/Army_Group_Upper_Rhine> <http://dbpedia.org/ontology/notableCommander> <http://dbpedia.org/resource/Heinrich_Himmler> .\n    }\n    UNION\n    {\n      <http://dbpedia.org/resource/Army_Group_Upper_Rhine> <http://dbpedia.org/property/notableCommanders> <http://dbpedia.org/resource/Heinrich_Himmler> .\n    }\n  }\n}"
    },
    {
        "question": "List the universities from a country where Norwegian language is officially accepted.",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/officialLanguage> <http://dbpedia.org/resource/Norwegian_language> . ?uri <http://dbpedia.org/ontology/country> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}",
        "entities": [
            "http://dbpedia.org/resource/Norwegian_language"
        ],
        "classes": [],
        "relations": [
            "UNIVERSITY -> COUNTRY -> <http://dbpedia.org/resource/Norwegian_language>"
        ],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?university WHERE {\n  ?university a <http://dbpedia.org/ontology/University> .\n  ?university <http://dbpedia.org/ontology/country> ?country .\n  ?country <http://dbpedia.org/ontology/officialLanguage> <http://dbpedia.org/resource/Norwegian_language> .\n}"
    },
    {
        "question": "Name the incumbent of Linda Jenness ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Linda_Jenness> <http://dbpedia.org/ontology/incumbent> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Linda_Jenness"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Linda_Jenness> -> \"incumbent\""
        ],
        "paths": "<http://dbpedia.org/resource/Linda_Jenness> -> \"incumbent\"",
        "generated_query": "SELECT DISTINCT ?incumbent WHERE {\n  {\n    <http://dbpedia.org/resource/Linda_Jenness> <http://dbpedia.org/ontology/incumbent> ?incumbent .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Linda_Jenness> <http://dbpedia.org/property/incumbent> ?incumbent .\n  }\n}"
    },
    {
        "question": "Which companies makes cars assembled in Karachi, Pakistan?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/assembly> <http://dbpedia.org/resource/Karachi> . ?x <http://dbpedia.org/property/parentCompany> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>}",
        "entities": [
            "http://dbpedia.org/resource/Karachi",
            "http://dbpedia.org/resource/Pakistan"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Karachi> -> <http://dbpedia.org/resource/Pakistan>"
        ],
        "paths": "<http://dbpedia.org/resource/Karachi> -> <http://dbpedia.org/resource/Pakistan>",
        "generated_query": "SELECT DISTINCT ?company WHERE {\n  <http://dbpedia.org/resource/Pakistan> <http://dbpedia.org/ontology/largestCity> <http://dbpedia.org/resource/Karachi> .\n  # No triples about companies or cars provided, so no further patterns can be added.\n}"
    },
    {
        "question": "Which company founded by Fusajiro Yamauchi also provides services of Nintendo eShop ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/foundedBy> <http://dbpedia.org/resource/Fusajiro_Yamauchi> . ?uri <http://dbpedia.org/property/services> <http://dbpedia.org/resource/Nintendo_eShop>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}",
        "entities": [
            "http://dbpedia.org/resource/Fusajiro_Yamauchi",
            "http://dbpedia.org/resource/Nintendo_eShop"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Fusajiro_Yamauchi> -> <http://dbpedia.org/resource/Nintendo_eShop>"
        ],
        "paths": "<http://dbpedia.org/resource/Fusajiro_Yamauchi> -> <http://dbpedia.org/resource/Nintendo_eShop>",
        "generated_query": "SELECT DISTINCT ?company WHERE {\n  ?company <http://dbpedia.org/ontology/foundedBy> <http://dbpedia.org/resource/Fusajiro_Yamauchi> .\n  ?company <http://dbpedia.org/ontology/service> <http://dbpedia.org/resource/Nintendo_eShop> .\n}"
    },
    {
        "question": "In which countries does the sea lie on whose shore is the city of Cumana?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/cities> <http://dbpedia.org/resource/Cuman\u00e1> . ?x <http://dbpedia.org/ontology/country> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sea>}",
        "entities": [
            "http://dbpedia.org/resource/Cuman\u00e1"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Cuman\u00e1> -> SEA -> COUNTRY"
        ],
        "paths": "<http://dbpedia.org/resource/Cuman\u00e1> -> SEA -> COUNTRY",
        "generated_query": "SELECT DISTINCT ?country WHERE {\n  <http://dbpedia.org/resource/Cuman\u00e1> <http://dbpedia.org/ontology/country> ?country .\n}"
    },
    {
        "question": "Tirana is the largest city of which country?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/largestCity> <http://dbpedia.org/resource/Tirana>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>}",
        "entities": [
            "http://dbpedia.org/resource/Tirana"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Tirana> -> COUNTRY"
        ],
        "paths": "<http://dbpedia.org/resource/Tirana> -> COUNTRY",
        "generated_query": "SELECT DISTINCT ?country WHERE {\n  ?country <http://dbpedia.org/ontology/capital> <http://dbpedia.org/resource/Tirana> .\n}"
    },
    {
        "question": "From which countries are the people from who are an academic authority of the Western pygmy blue species?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Western_pygmy_blue> <http://dbpedia.org/ontology/binomialAuthority> ?x . ?x <http://dbpedia.org/ontology/citizenship> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}",
        "entities": [
            "http://dbpedia.org/resource/Western_pygmy_blue"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Western_pygmy_blue> -> ACADEMIC_AUTHORITY -> COUNTRY"
        ],
        "paths": "<http://dbpedia.org/resource/Western_pygmy_blue> -> ACADEMIC_AUTHORITY -> COUNTRY",
        "generated_query": "SELECT DISTINCT ?country WHERE {\n  <http://dbpedia.org/resource/Western_pygmy_blue> <http://dbpedia.org/ontology/binomialAuthority> ?person .\n  {\n    ?person <http://dbpedia.org/property/nationality> ?country .\n  }\n  UNION\n  {\n    ?person <http://dbpedia.org/ontology/citizenship> ?country .\n  }\n}"
    },
    {
        "question": "Where is the headquarters of Sigma TV",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sigma_TV> <http://dbpedia.org/property/headquarters> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Sigma_Corporation"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Sigma_Corporation> -> \"headquarters location\""
        ],
        "paths": "<http://dbpedia.org/resource/Sigma_Corporation> -> \"headquarters location\"",
        "generated_query": "SELECT DISTINCT ?literalLocation ?structuredLocation WHERE {\n  OPTIONAL {\n    <http://dbpedia.org/resource/Sigma_Corporation> <http://dbpedia.org/property/location> ?literalLocation .\n  }\n  OPTIONAL {\n    <http://dbpedia.org/resource/Sigma_Corporation> <http://dbpedia.org/ontology/location> ?structuredLocation .\n  }\n}"
    },
    {
        "question": "Which scientist was advised by John Robert Woodyard?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/doctoralAdvisor> <http://dbpedia.org/resource/John_Robert_Woodyard>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
        "entities": [
            "http://dbpedia.org/resource/John_Robert_Woodyard"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/John_Robert_Woodyard> -> SCIENTIST"
        ],
        "paths": "<http://dbpedia.org/resource/John_Robert_Woodyard> -> SCIENTIST",
        "generated_query": "SELECT DISTINCT ?scientist WHERE {\n  ?scientist <http://dbpedia.org/ontology/doctoralAdvisor> <http://dbpedia.org/resource/John_Robert_Woodyard> .\n}"
    },
    {
        "question": "What is the launch site of the Juno I which was also the ground of 2016 Fort Lauderdale Strikers season ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Juno_I> <http://dbpedia.org/ontology/launchSite> ?uri. <http://dbpedia.org/resource/2016_Fort_Lauderdale_Strikers_season> <http://dbpedia.org/ontology/ground> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Fort_Lauderdale_Strikers_(2006\u20132016)",
            "http://dbpedia.org/resource/Juno_I",
            "http://dbpedia.org/resource/2016_Fort_Lauderdale_Strikers_season"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Juno_I> -> \"launch site\"",
            "<http://dbpedia.org/resource/Juno_I> -> <http://dbpedia.org/resource/Fort_Lauderdale_Strikers_(2006\u20132016)>",
            "<http://dbpedia.org/resource/2016_Fort_Lauderdale_Strikers_season> -> <http://dbpedia.org/resource/Fort_Lauderdale_Strikers_(2006\u20132016)>"
        ],
        "paths": "<http://dbpedia.org/resource/Juno_I> -> \"launch site\"",
        "generated_query": "SELECT DISTINCT ?launchSite WHERE {\n  <http://dbpedia.org/resource/Juno_I> <http://dbpedia.org/ontology/launchSite> ?launchSite .\n  <http://dbpedia.org/resource/Fort_Lauderdale_Strikers_(2006\u20132016)> <http://dbpedia.org/ontology/ground> ?launchSite .\n  <http://dbpedia.org/resource/2016_Fort_Lauderdale_Strikers_season> <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Fort_Lauderdale_Strikers_(2006\u20132016)> .\n}"
    },
    {
        "question": "Who has been married to both Penny Lancaster and Alana Stewart?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Penny_Lancaster> <http://dbpedia.org/ontology/spouse> ?uri. <http://dbpedia.org/resource/Alana_Stewart> <http://dbpedia.org/ontology/spouse> ?uri . }",
        "entities": [
            "http://dbpedia.org/resource/Alana_Stewart",
            "http://dbpedia.org/resource/Penny_Lancaster"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Penny_Lancaster> -> PERSON_MARRIED_TO_BOTH -> <http://dbpedia.org/resource/Alana_Stewart>"
        ],
        "paths": "<http://dbpedia.org/resource/Penny_Lancaster> -> PERSON_MARRIED_TO_BOTH -> <http://dbpedia.org/resource/Alana_Stewart>",
        "generated_query": "SELECT DISTINCT ?person WHERE {\n  {\n    { <http://dbpedia.org/resource/Penny_Lancaster> <http://dbpedia.org/ontology/spouse> ?person . }\n    UNION\n    { ?person <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Penny_Lancaster> . }\n    UNION\n    { <http://dbpedia.org/resource/Penny_Lancaster> <http://dbpedia.org/property/spouse> ?person . }\n    UNION\n    { ?person <http://dbpedia.org/property/spouse> <http://dbpedia.org/resource/Penny_Lancaster> . }\n  }\n  {\n    { <http://dbpedia.org/resource/Alana_Stewart> <http://dbpedia.org/ontology/spouse> ?person . }\n    UNION\n    { ?person <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Alana_Stewart> . }\n    UNION\n    { <http://dbpedia.org/resource/Alana_Stewart> <http://dbpedia.org/property/spouse> ?person . }\n    UNION\n    { ?person <http://dbpedia.org/property/spouse> <http://dbpedia.org/resource/Alana_Stewart> . }\n  }\n}"
    },
    {
        "question": "Count the affiliations of International Union of Anarchists?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { <http://dbpedia.org/resource/International_Union_of_Anarchists> <http://dbpedia.org/property/affiliation> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/International_Union_of_Anarchists"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/International_Union_of_Anarchists> -> \"affiliations\""
        ],
        "paths": "<http://dbpedia.org/resource/International_Union_of_Anarchists> -> \"affiliations\"",
        "generated_query": "SELECT (COUNT(DISTINCT ?affiliation) AS ?count)\nWHERE {\n  {\n    <http://dbpedia.org/resource/International_Union_of_Anarchists> <http://dbpedia.org/ontology/affiliation> ?affiliation .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/International_Union_of_Anarchists> <http://dbpedia.org/property/affiliation> ?affiliation .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/International_Union_of_Anarchists> <http://dbpedia.org/ontology/wikiPageWikiLink> ?intermediate .\n    ?intermediate <http://dbpedia.org/property/affiliation> ?affiliation .\n  }\n}"
    },
    {
        "question": "What is the alma mater of the scientist  whose PhD advisor is Jean-Claude Latombe ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/doctoralAdvisor> <http://dbpedia.org/resource/Jean-Claude_Latombe> . ?x <http://dbpedia.org/property/almaMater> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>}",
        "entities": [
            "http://dbpedia.org/resource/Jean-Claude_Latombe",
            "http://dbpedia.org/resource/Alma_mater"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Jean-Claude_Latombe> -> SCIENTIST -> <http://dbpedia.org/resource/Alma_mater>"
        ],
        "paths": "<http://dbpedia.org/resource/Jean-Claude_Latombe> -> SCIENTIST -> <http://dbpedia.org/resource/Alma_mater>",
        "generated_query": "SELECT DISTINCT ?almaMater WHERE {\n  ?scientist <http://dbpedia.org/ontology/doctoralAdvisor> <http://dbpedia.org/resource/Jean-Claude_Latombe> .\n  {\n    ?scientist <http://dbpedia.org/ontology/almaMater> ?almaMater .\n  }\n  UNION\n  {\n    ?scientist <http://dbpedia.org/property/almaMater> ?almaMater .\n  }\n}"
    },
    {
        "question": "List the people residing in Wilton, Connecticut?",
        "gold_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/residence> <http://dbpedia.org/resource/Wilton,_Connecticut> } ",
        "entities": [
            "http://dbpedia.org/resource/Wilton,_Connecticut"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Wilton,_Connecticut> -> RESIDENT"
        ],
        "paths": "<http://dbpedia.org/resource/Wilton,_Connecticut> -> RESIDENT",
        "generated_query": "SELECT DISTINCT ?person WHERE {\n  ?person <http://dbpedia.org/ontology/residence> <http://dbpedia.org/resource/Wilton,_Connecticut> .\n}"
    },
    {
        "question": "What is the Location of the Peetz Table Wind Energy Center which is also the state of Ben Nighthorse Campbell ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Peetz_Table_Wind_Energy_Center> <http://dbpedia.org/property/location> ?uri. <http://dbpedia.org/resource/Ben_Nighthorse_Campbell> <http://dbpedia.org/property/state> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Ben_Nighthorse_Campbell"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Ben_Nighthorse_Campbell> -> LOCATION"
        ],
        "paths": "<http://dbpedia.org/resource/Ben_Nighthorse_Campbell> -> LOCATION",
        "generated_query": "SELECT DISTINCT ?location WHERE {\n  <http://dbpedia.org/resource/Peetz_Table_Wind_Energy_Center> <http://dbpedia.org/property/location> ?location .\n  <http://dbpedia.org/resource/Ben_Nighthorse_Campbell> <http://dbpedia.org/property/state> ?location .\n}"
    },
    {
        "question": "Count the water bodies that flow into the North Sea?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { <http://dbpedia.org/resource/North_Sea> <http://dbpedia.org/property/inflow> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/North_Sea"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/North_Sea> -> \"water bodies that flow into\""
        ],
        "paths": "<http://dbpedia.org/resource/North_Sea> -> \"water bodies that flow into\"",
        "generated_query": "SELECT (COUNT(DISTINCT ?river) AS ?count)\nWHERE {\n  ?river <http://dbpedia.org/ontology/riverMouth> <http://dbpedia.org/resource/North_Sea> .\n}"
    },
    {
        "question": "Who was the First Driver of 1999 San Marino Grand Prix ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/1999_San_Marino_Grand_Prix> <http://dbpedia.org/property/firstDriver> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/San_Marino_Grand_Prix",
            "http://dbpedia.org/resource/1999_San_Marino_Grand_Prix"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/1999_San_Marino_Grand_Prix> -> FIRST_DRIVER"
        ],
        "paths": "<http://dbpedia.org/resource/1999_San_Marino_Grand_Prix> -> FIRST_DRIVER",
        "generated_query": "SELECT DISTINCT ?firstDriver WHERE {\n  <http://dbpedia.org/resource/1999_San_Marino_Grand_Prix> <http://dbpedia.org/ontology/firstDriver> ?firstDriver .\n}"
    },
    {
        "question": "Bantam Spectra is the publisher of which series?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/publisher> <http://dbpedia.org/resource/Bantam_Spectra> . ?x <http://dbpedia.org/ontology/series> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Bantam_Spectra"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Bantam_Spectra> -> SERIES"
        ],
        "paths": "<http://dbpedia.org/resource/Bantam_Spectra> -> SERIES",
        "generated_query": "SELECT DISTINCT ?series WHERE {\n  {\n    ?series <http://dbpedia.org/ontology/series> <http://dbpedia.org/resource/Bantam_Spectra> .\n  }\n  UNION\n  {\n    ?series <http://dbpedia.org/property/series> <http://dbpedia.org/resource/Bantam_Spectra> .\n  }\n}"
    },
    {
        "question": "Where is the sister station of Al Arabiya 99 located?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/sisterStations> <http://dbpedia.org/resource/Al_Arabiya_99> . ?x <http://dbpedia.org/property/location> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RadioStation>}",
        "entities": [
            "http://dbpedia.org/resource/Air_Arabia"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Air_Arabia> -> SISTER_STATION -> LOCATION"
        ],
        "paths": "<http://dbpedia.org/resource/Air_Arabia> -> SISTER_STATION -> LOCATION",
        "generated_query": "SELECT DISTINCT ?sisterStation ?location WHERE {\n  ?sisterStation <http://dbpedia.org/property/parent> <http://dbpedia.org/resource/Air_Arabia> .\n  OPTIONAL { ?sisterStation <http://dbpedia.org/property/location> ?location . }\n}"
    },
    {
        "question": "Which common prime minister did Graham Richardson and Bon McMullan serve ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Graham_Richardson> <http://dbpedia.org/ontology/primeMinister> ?uri. <http://dbpedia.org/resource/Bob_McMullan> <http://dbpedia.org/ontology/primeMinister> ?uri . }",
        "entities": [
            "http://dbpedia.org/resource/Bob_McMullan",
            "http://dbpedia.org/resource/Graham_Richardson"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Graham_Richardson> -> <http://dbpedia.org/resource/Bob_McMullan>"
        ],
        "paths": "<http://dbpedia.org/resource/Graham_Richardson> -> <http://dbpedia.org/resource/Bob_McMullan>",
        "generated_query": "SELECT DISTINCT ?pm WHERE {\n  {\n    { <http://dbpedia.org/resource/Graham_Richardson> <http://dbpedia.org/property/primeminister> ?pm . }\n    UNION\n    { <http://dbpedia.org/resource/Graham_Richardson> <http://dbpedia.org/ontology/primeMinister> ?pm . }\n  }\n  {\n    { <http://dbpedia.org/resource/Bob_McMullan> <http://dbpedia.org/property/primeminister> ?pm . }\n    UNION\n    { <http://dbpedia.org/resource/Bob_McMullan> <http://dbpedia.org/ontology/primeMinister> ?pm . }\n  }\n}"
    },
    {
        "question": "How many things are produced by companies located in Tehran?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/property/location> <http://dbpedia.org/resource/Tehran> . ?x <http://dbpedia.org/ontology/product> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Tehran"
        ],
        "classes": [],
        "relations": [
            "COMPANY -> <http://dbpedia.org/resource/Tehran>",
            "COMPANY -> \"produces\"",
            "\"produces\" -> \"count\""
        ],
        "paths": "",
        "generated_query": "SELECT (COUNT(DISTINCT ?thing) AS ?count)\nWHERE {\n  ?company ?locatedIn <http://dbpedia.org/resource/Tehran> .\n  ?company ?produces ?thing .\n}"
    },
    {
        "question": "Which is the common past team of the Charlie Justice (American football player) and Bobby Hoppe ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Charlie_Justice_(American_football_player)> <http://dbpedia.org/property/pastteams> ?uri. <http://dbpedia.org/resource/Bobby_Hoppe> <http://dbpedia.org/property/pastteams> ?uri . }",
        "entities": [
            "http://dbpedia.org/resource/Bobby_Hoppe",
            "http://dbpedia.org/resource/Charlie_Justice_(halfback)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Charlie_Justice_(halfback)> -> <http://dbpedia.org/resource/Bobby_Hoppe>"
        ],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?team WHERE {\n  <http://dbpedia.org/resource/Charlie_Justice_(halfback)> <http://dbpedia.org/ontology/team> ?team .\n  <http://dbpedia.org/resource/Bobby_Hoppe> <http://dbpedia.org/ontology/team> ?team .\n}"
    },
    {
        "question": "Name the officeholder who hasa child named Augustus and has an associate named Marcus Bibulus ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/associate> <http://dbpedia.org/resource/Marcus_Calpurnius_Bibulus> . ?uri <http://dbpedia.org/property/children> <http://dbpedia.org/resource/Augustus>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?officeholder WHERE {\n  ?officeholder ?childRelation ?child .\n  ?child ?childNameProp \"Augustus\" .\n  \n  ?officeholder ?associateRelation ?associate .\n  ?associate ?associateNameProp \"Marcus Bibulus\" .\n}"
    },
    {
        "question": "Which party won both the general electoin and the andhra pradesh election in 2004?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Indian_general_election,_2004_(Delhi)> <http://dbpedia.org/ontology/affiliation> ?uri. <http://dbpedia.org/resource/Indian_general_election,_2004_(Andhra_Pradesh)> <http://dbpedia.org/ontology/affiliation> ?uri . }",
        "entities": [
            "http://dbpedia.org/resource/2004_Indian_general_election"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/2004_Indian_general_election> -> PARTY"
        ],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?party WHERE {\n  <http://dbpedia.org/resource/2004_Indian_general_election> ?p ?party.\n}"
    },
    {
        "question": "Give me someone on the board of trinity house?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/board> <http://dbpedia.org/resource/Trinity_House>  . }",
        "entities": [
            "http://dbpedia.org/resource/Trinity_House"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Trinity_House> -> BOARD_MEMBER"
        ],
        "paths": "<http://dbpedia.org/resource/Trinity_House> -> BOARD_MEMBER",
        "generated_query": "SELECT DISTINCT ?person WHERE {\n  ?person <http://dbpedia.org/ontology/board> <http://dbpedia.org/resource/Trinity_House> .\n}"
    },
    {
        "question": "Whose leaders are Willem-Alexander and Fredis Refunjol?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/leader> <http://dbpedia.org/resource/Willem-Alexander_of_the_Netherlands> . ?uri <http://dbpedia.org/ontology/leader> <http://dbpedia.org/resource/Fredis_Refunjol> . }",
        "entities": [
            "http://dbpedia.org/resource/Fredis_Refunjol",
            "http://dbpedia.org/resource/Willem-Alexander_of_the_Netherlands"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Fredis_Refunjol> -> LEADER_OF",
            "<http://dbpedia.org/resource/Willem-Alexander_of_the_Netherlands> -> LEADER_OF"
        ],
        "paths": "<http://dbpedia.org/resource/Fredis_Refunjol> -> LEADER_OF, <http://dbpedia.org/resource/Willem-Alexander_of_the_Netherlands> -> LEADER_OF",
        "generated_query": "SELECT DISTINCT ?entity WHERE {\n  ?entity <http://dbpedia.org/ontology/leader> <http://dbpedia.org/resource/Fredis_Refunjol> .\n  ?entity <http://dbpedia.org/ontology/leader> <http://dbpedia.org/resource/Willem-Alexander_of_the_Netherlands> .\n}"
    },
    {
        "question": "Horses grandsired by Sundridge  have won which awards?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/grandsire> <http://dbpedia.org/resource/Sundridge_(horse)> . ?x <http://dbpedia.org/ontology/honours> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Horse>}",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?award\nWHERE {\n  # No triples provided to specify the relationships\n}"
    },
    {
        "question": "What is the river whose source region is North-Western Province, Zambia and river mouth is Indian Ocean?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/sourceRegion> <http://dbpedia.org/resource/North-Western_Province,_Zambia> . ?uri <http://dbpedia.org/ontology/riverMouth> <http://dbpedia.org/resource/Indian_Ocean>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "entities": [
            "http://dbpedia.org/resource/Zambia",
            "http://dbpedia.org/resource/Indian_Ocean",
            "http://dbpedia.org/resource/North-Western_Province,_Zambia"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/North-Western_Province,_Zambia> -> <http://dbpedia.org/resource/Zambia> -> <http://dbpedia.org/resource/Indian_Ocean>"
        ],
        "paths": "<http://dbpedia.org/resource/North-Western_Province,_Zambia> -> <http://dbpedia.org/resource/Zambia> -> <http://dbpedia.org/resource/Indian_Ocean>",
        "generated_query": "SELECT DISTINCT ?river WHERE {\n  ?river <http://dbpedia.org/ontology/sourceCountry> <http://dbpedia.org/resource/Zambia> .\n  ?river <http://dbpedia.org/ontology/riverMouth> <http://dbpedia.org/resource/Indian_Ocean> .\n}"
    },
    {
        "question": "Who was on the first team in the GPs that were held at Watkins Glen, NY?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/location> <http://dbpedia.org/resource/Watkins_Glen,_New_York> . ?x <http://dbpedia.org/property/firstTeam> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/GrandPrix>}",
        "entities": [
            "http://dbpedia.org/resource/Watkins_Glen,_New_York"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Watkins_Glen,_New_York> -> FIRST_TEAM"
        ],
        "paths": "<http://dbpedia.org/resource/Watkins_Glen,_New_York> -> FIRST_TEAM",
        "generated_query": "SELECT DISTINCT ?team WHERE {\n  {\n    ?gp <http://dbpedia.org/property/location> <http://dbpedia.org/resource/Watkins_Glen,_New_York> .\n  }\n  UNION\n  {\n    ?gp <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Watkins_Glen,_New_York> .\n  }\n  ?gp <http://dbpedia.org/property/firstTeam> ?team .\n}"
    },
    {
        "question": "Name the movie whose screenplay is by Akiva Goldsman and directed by Joel Schumacher ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/screenplay> <http://dbpedia.org/resource/Akiva_Goldsman> . ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Joel_Schumacher>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>}",
        "entities": [
            "http://dbpedia.org/resource/Akiva_Goldsman",
            "http://dbpedia.org/resource/Joel_Schumacher"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Akiva_Goldsman> -> <http://dbpedia.org/resource/Joel_Schumacher>"
        ],
        "paths": "<http://dbpedia.org/resource/Akiva_Goldsman> -> <http://dbpedia.org/resource/Joel_Schumacher>",
        "generated_query": "SELECT DISTINCT ?movie WHERE {\n  ?movie <http://dbpedia.org/property/screenplay> <http://dbpedia.org/resource/Akiva_Goldsman> .\n  ?movie <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Joel_Schumacher> .\n}"
    },
    {
        "question": "What ethinicity of Linda Hogan is also the state of origin of Holmes Colbert ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Linda_Hogan> <http://dbpedia.org/ontology/ethnicity> ?uri. <http://dbpedia.org/resource/Holmes_Colbert> <http://dbpedia.org/ontology/stateOfOrigin> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Ethnic_group",
            "http://dbpedia.org/resource/Linda_Hogan_(TV_personality)",
            "http://dbpedia.org/resource/Holmes_Colbert"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Holmes_Colbert> -> <http://dbpedia.org/resource/Ethnic_group>",
            "<http://dbpedia.org/resource/Linda_Hogan_(TV_personality)> -> <http://dbpedia.org/resource/Ethnic_group>"
        ],
        "paths": "<http://dbpedia.org/resource/Holmes_Colbert> -> <http://dbpedia.org/resource/Ethnic_group>, <http://dbpedia.org/resource/Linda_Hogan_(TV_personality)> -> <http://dbpedia.org/resource/Ethnic_group>",
        "generated_query": "SELECT DISTINCT ?ethnicity WHERE {\n  <http://dbpedia.org/resource/Holmes_Colbert> <http://dbpedia.org/ontology/stateOfOrigin> ?ethnicity .\n  <http://dbpedia.org/resource/Linda_Hogan_(TV_personality)> <http://dbpedia.org/ontology/wikiPageWikiLink> ?ethnicity .\n  ?ethnicity <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Ethnic_group> .\n}"
    },
    {
        "question": "What are the track and field events of Jamiatu Muslim Mindanao?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jamiatu_Muslim_Mindanao> <http://dbpedia.org/property/athletics> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Track_and_field",
            "http://dbpedia.org/resource/Jamiatu_Muslim_Mindanao"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Jamiatu_Muslim_Mindanao> -> <http://dbpedia.org/resource/Track_and_field>"
        ],
        "paths": "<http://dbpedia.org/resource/Jamiatu_Muslim_Mindanao> -> <http://dbpedia.org/resource/Track_and_field>",
        "generated_query": "SELECT DISTINCT ?event WHERE {\n  {\n    <http://dbpedia.org/resource/Jamiatu_Muslim_Mindanao> <http://dbpedia.org/ontology/athletics> ?event .\n    <http://dbpedia.org/resource/Track_and_field> <http://dbpedia.org/ontology/wikiPageWikiLink> ?event .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Jamiatu_Muslim_Mindanao> <http://dbpedia.org/property/athletics> ?event .\n    <http://dbpedia.org/resource/Track_and_field> <http://dbpedia.org/ontology/wikiPageWikiLink> ?event .\n  }\n}"
    },
    {
        "question": "How many cities are close to Lake Victoria?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { <http://dbpedia.org/resource/Lake_Victoria> <http://dbpedia.org/ontology/nearestCity> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Lake_Victoria"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Lake_Victoria> -> \"close to\""
        ],
        "paths": "<http://dbpedia.org/resource/Lake_Victoria> -> \"close to\"",
        "generated_query": "SELECT (COUNT(DISTINCT ?city) AS ?count)\nWHERE {\n  <http://dbpedia.org/resource/Lake_Victoria> <http://dbpedia.org/ontology/nearestCity> ?city .\n}"
    },
    {
        "question": "Is greasy pop recording the distributor of festival records?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/Greasy_Pop_Records> <http://dbpedia.org/ontology/distributingLabel> <http://dbpedia.org/resource/Festival_Records> }",
        "entities": [
            "http://dbpedia.org/resource/Music_festival"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Festival_Records> -> <http://dbpedia.org/resource/Greasy_Pop_Recording>"
        ],
        "paths": "",
        "generated_query": "ASK WHERE {\n  <http://dbpedia.org/resource/Festival_Records> ?p <http://dbpedia.org/resource/Greasy_Pop_Recording> .\n}"
    },
    {
        "question": "What is the baseball team whose club manager's debut team is Houston Astros?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/debutTeam> <http://dbpedia.org/resource/Houston_Astros> . ?uri <http://dbpedia.org/ontology/manager> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BaseballTeam>}",
        "entities": [
            "http://dbpedia.org/resource/Baseball",
            "http://dbpedia.org/resource/Houston_Astros"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Baseball> -> CLUB_MANAGER -> DEBUT_TEAM -> <http://dbpedia.org/resource/Houston_Astros>"
        ],
        "paths": "<http://dbpedia.org/resource/Baseball> -> CLUB_MANAGER -> DEBUT_TEAM -> <http://dbpedia.org/resource/Houston_Astros>",
        "generated_query": "SELECT DISTINCT ?team WHERE {\n  ?team <http://dbpedia.org/property/sport> <http://dbpedia.org/resource/Baseball> .\n  ?team <http://dbpedia.org/ontology/manager> ?manager .\n  ?manager <http://dbpedia.org/property/debutteam> <http://dbpedia.org/resource/Houston_Astros> .\n}"
    },
    {
        "question": "What cities are near to Nihoa which is also known as Bird Island ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Nihoa> <http://dbpedia.org/property/nearestCity> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Nihoa"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Nihoa> -> \"near\""
        ],
        "paths": "<http://dbpedia.org/resource/Nihoa> -> \"near\"",
        "generated_query": "SELECT DISTINCT ?city WHERE {\n  <http://dbpedia.org/resource/Nihoa> <http://dbpedia.org/property/nearestCity> ?city .\n}"
    },
    {
        "question": "Is Sloth in the Chordate phylum?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/Sloth> <http://dbpedia.org/property/phylum> <http://dbpedia.org/resource/Chordate> }",
        "entities": [
            "http://dbpedia.org/resource/Chordate",
            "http://dbpedia.org/resource/Skolithos"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Skolithos> -> <http://dbpedia.org/resource/Chordate>"
        ],
        "paths": "<http://dbpedia.org/resource/Skolithos> -> <http://dbpedia.org/resource/Chordate>",
        "generated_query": "ASK WHERE {\n  <http://dbpedia.org/resource/Skolithos> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/class/yago/Organism100004475> .\n  {\n    <http://dbpedia.org/resource/Skolithos> <http://dbpedia.org/ontology/division> <http://dbpedia.org/resource/Chordate> .\n  } UNION {\n    <http://dbpedia.org/resource/Skolithos> <http://dbpedia.org/property/divisio> <http://dbpedia.org/resource/Chordate> .\n  }\n}"
    },
    {
        "question": "Which shareholder of Naval Air facility Adak is also the operator of New Sanno Hotel ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/New_Sanno_Hotel> <http://dbpedia.org/property/operator> ?uri. <http://dbpedia.org/resource/Naval_Air_Facility_Adak> <http://dbpedia.org/property/owner> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Adak_Airport",
            "http://dbpedia.org/resource/New_Sanno_Hotel",
            "http://dbpedia.org/resource/French_Naval_Aviation"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Adak_Airport> -> <http://dbpedia.org/resource/French_Naval_Aviation>",
            "<http://dbpedia.org/resource/New_Sanno_Hotel> -> <http://dbpedia.org/resource/French_Naval_Aviation>"
        ],
        "paths": "<http://dbpedia.org/resource/Adak_Airport> -> <http://dbpedia.org/resource/French_Naval_Aviation>, <http://dbpedia.org/resource/New_Sanno_Hotel> -> <http://dbpedia.org/resource/French_Naval_Aviation>",
        "generated_query": "SELECT DISTINCT ?x WHERE {\n  <http://dbpedia.org/resource/Adak_Airport> <http://dbpedia.org/ontology/owner> ?x .\n  <http://dbpedia.org/resource/New_Sanno_Hotel> <http://dbpedia.org/property/operator> ?x .\n}"
    },
    {
        "question": "What other awards have been given to Golden Globe winners?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Golden_Globe_Award> . ?x <http://dbpedia.org/property/awards> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Golden_Globe_Awards"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Golden_Globe_Awards> -> WINNER -> \"award\""
        ],
        "paths": "<http://dbpedia.org/resource/Golden_Globe_Awards> -> WINNER -> \"award\"",
        "generated_query": "SELECT DISTINCT ?otherAward WHERE {\n  {\n    ?winner <http://dbpedia.org/property/award> <http://dbpedia.org/resource/Golden_Globe_Award> .\n  }\n  UNION\n  {\n    ?winner <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Golden_Globe_Award> .\n  }\n  UNION\n  {\n    ?winner <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Golden_Globe_Award> .\n  }\n  \n  {\n    ?winner <http://dbpedia.org/property/award> ?otherAward .\n  }\n  UNION\n  {\n    ?winner <http://dbpedia.org/property/awards> ?otherAward .\n  }\n  UNION\n  {\n    ?winner <http://dbpedia.org/ontology/award> ?otherAward .\n  }\n  \n  FILTER(?otherAward != <http://dbpedia.org/resource/Golden_Globe_Award>)\n}"
    },
    {
        "question": "Which allegiance of the John Kotelawala is also the  sovereign state of the Sanath Weerakoon ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_Kotelawala> <http://dbpedia.org/property/allegiance> ?uri. <http://dbpedia.org/resource/Sanath_Weerakoon> <http://dbpedia.org/ontology/country> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Sanath_Weerakoon",
            "http://dbpedia.org/resource/John_Kotelawala"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/John_Kotelawala> -> <http://dbpedia.org/resource/Sanath_Weerakoon>"
        ],
        "paths": "<http://dbpedia.org/resource/John_Kotelawala> -> <http://dbpedia.org/resource/Sanath_Weerakoon>",
        "generated_query": "SELECT DISTINCT ?allegiance WHERE {\n  <http://dbpedia.org/resource/John_Kotelawala> <http://dbpedia.org/property/allegiance> ?allegiance .\n  \n  {\n    <http://dbpedia.org/resource/Sanath_Weerakoon> <http://dbpedia.org/ontology/country> ?allegiance .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Sanath_Weerakoon> <http://dbpedia.org/ontology/nationality> ?allegiance .\n  }\n}"
    },
    {
        "question": "List the television shows whose network's sister names is N-tv.",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/sisterNames> <http://dbpedia.org/resource/N-tv> . ?uri <http://dbpedia.org/property/network> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "entities": [
            "http://dbpedia.org/resource/N-tv"
        ],
        "classes": [],
        "relations": [
            "TELEVISION_SHOW -> NETWORK -> <http://dbpedia.org/resource/N-tv>"
        ],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?show WHERE {\n  ?show <http://dbpedia.org/ontology/network> ?network .\n  ?network <http://dbpedia.org/ontology/sisterStation> <http://dbpedia.org/resource/N-tv> .\n}"
    },
    {
        "question": "God Defend New Zealand is the national anthem of which country?",
        "gold_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/nationalAnthem> <http://dbpedia.org/resource/God_Defend_New_Zealand> } ",
        "entities": [
            "http://dbpedia.org/resource/God_Defend_New_Zealand",
            "http://dbpedia.org/resource/National_anthem"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/God_Defend_New_Zealand> -> <http://dbpedia.org/resource/National_anthem>"
        ],
        "paths": "<http://dbpedia.org/resource/God_Defend_New_Zealand> -> <http://dbpedia.org/resource/National_anthem>",
        "generated_query": "SELECT DISTINCT ?country WHERE {\n  {\n    ?country <http://dbpedia.org/ontology/anthem> <http://dbpedia.org/resource/God_Defend_New_Zealand> .\n  }\n  UNION\n  {\n    ?country <http://dbpedia.org/property/nationalAnthem> <http://dbpedia.org/resource/God_Defend_New_Zealand> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/God_Defend_New_Zealand> <http://dbpedia.org/property/country> ?country .\n  }\n}"
    },
    {
        "question": "Where do the rivers starting from Zambia end?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/sourceCountry> <http://dbpedia.org/resource/Zambia> . ?x <http://dbpedia.org/ontology/riverMouth> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}",
        "entities": [
            "http://dbpedia.org/resource/Zambia"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Zambia> -> RIVER -> \"end location\""
        ],
        "paths": "<http://dbpedia.org/resource/Zambia> -> RIVER -> \"end location\"",
        "generated_query": "SELECT DISTINCT ?river ?endLocation WHERE {\n  ?dam <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Zambia> .\n  ?dam <http://dbpedia.org/ontology/river> ?river .\n  OPTIONAL {\n    ?river <http://dbpedia.org/ontology/riverMouth> ?endLocation .\n  }\n  OPTIONAL {\n    ?river <http://dbpedia.org/property/mouth> ?endLocation .\n  }\n  FILTER(BOUND(?endLocation))\n}"
    },
    {
        "question": "Which political party of kumta had affiliation with Indian general election, 2004 (Andhra Pradesh) ",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kumta> <http://dbpedia.org/property/governmentType> ?uri. <http://dbpedia.org/resource/Indian_general_election,_2004_(Andhra_Pradesh)> <http://dbpedia.org/ontology/affiliation> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/2004_Indian_general_election"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/2004_Indian_general_election> -> POLITICAL_PARTY"
        ],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?party WHERE {\n  <http://dbpedia.org/resource/2004_Indian_general_election> <http://dbpedia.org/ontology/politicalParty> ?party .\n  \n  # ?party should be affiliated with Kumta via some relation, trying common place-related properties\n  {\n    ?party <http://dbpedia.org/ontology/constituency> <http://dbpedia.org/resource/Kumta> .\n  }\n  UNION\n  {\n    ?party <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Kumta> .\n  }\n}"
    },
    {
        "question": "Who was member of boards at Royal Society and Trinity House?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/board> <http://dbpedia.org/resource/Royal_Society> . ?uri <http://dbpedia.org/ontology/board> <http://dbpedia.org/resource/Trinity_House> . }",
        "entities": [
            "http://dbpedia.org/resource/Royal_Society",
            "http://dbpedia.org/resource/Trinity_House"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Royal_Society> -> <http://dbpedia.org/resource/Trinity_House>"
        ],
        "paths": "<http://dbpedia.org/resource/Royal_Society> -> <http://dbpedia.org/resource/Trinity_House>",
        "generated_query": "SELECT DISTINCT ?person WHERE {\n  ?person <http://dbpedia.org/ontology/board> <http://dbpedia.org/resource/Royal_Society> .\n  ?person <http://dbpedia.org/ontology/board> <http://dbpedia.org/resource/Trinity_House> .\n}"
    },
    {
        "question": "Where is the king buried whose predecessor was Iyasu II?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/predecessor> <http://dbpedia.org/resource/Iyasu_II> . ?x <http://dbpedia.org/property/placeOfBurial> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Monarch>}",
        "entities": [
            "http://dbpedia.org/resource/Iyasu_II"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Iyasu_II> -> KING -> \"burial place\""
        ],
        "paths": "<http://dbpedia.org/resource/Iyasu_II> -> KING -> \"burial place\"",
        "generated_query": "SELECT DISTINCT ?burialPlace WHERE {\n  ?king <http://dbpedia.org/ontology/predecessor> <http://dbpedia.org/resource/Iyasu_II> .\n  {\n    ?king <http://dbpedia.org/ontology/placeOfBurial> ?burialPlace .\n  }\n  UNION\n  {\n    ?king <http://dbpedia.org/property/placeOfBurial> ?burialPlace .\n  }\n}"
    },
    {
        "question": "In how many different places have people beatified by Pope Pius X died?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/property/beatifiedBy> <http://dbpedia.org/resource/Pope_Pius_X> . ?x <http://dbpedia.org/property/deathPlace> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Place>}",
        "entities": [
            "http://dbpedia.org/resource/Pope_Pius_X"
        ],
        "classes": [],
        "relations": [
            "BEATIFIED -> DIED_IN",
            "DIED_IN -> \"number of distinct places\"",
            "<http://dbpedia.org/resource/Pope_Pius_X> -> BEATIFIED"
        ],
        "paths": "<http://dbpedia.org/resource/Pope_Pius_X> -> BEATIFIED",
        "generated_query": "SELECT (COUNT(DISTINCT ?place) AS ?count)\nWHERE {\n  {\n    ?person <http://dbpedia.org/ontology/beatifiedBy> <http://dbpedia.org/resource/Pope_Pius_X> .\n    ?person <http://dbpedia.org/ontology/deathPlace> ?place .\n  }\n  UNION\n  {\n    ?person <http://dbpedia.org/property/beatifiedBy> <http://dbpedia.org/resource/Pope_Pius_X> .\n    ?person <http://dbpedia.org/ontology/deathPlace> ?place .\n  }\n}"
    },
    {
        "question": "What faiths are followed by the relatives of Meadow Soprano?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Meadow_Soprano> <http://dbpedia.org/ontology/relative> ?x . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Meadow_Soprano"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Meadow_Soprano> -> RELATIVES -> \"faith\""
        ],
        "paths": "<http://dbpedia.org/resource/Meadow_Soprano> -> RELATIVES -> \"faith\"",
        "generated_query": "SELECT DISTINCT ?faith WHERE {\n  {\n    <http://dbpedia.org/resource/Meadow_Soprano> <http://dbpedia.org/ontology/relative> ?relative .\n  }\n  UNION\n  {\n    ?relative <http://dbpedia.org/ontology/relative> <http://dbpedia.org/resource/Meadow_Soprano> .\n  }\n  {\n    ?relative <http://dbpedia.org/property/religion> ?faith .\n  }\n  UNION\n  {\n    ?relative <http://dbpedia.org/ontology/religion> ?faith .\n  }\n}"
    },
    {
        "question": "Where is the headquarters of the public transit system which owns Target Field, a Metro Transit Station  ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Target_Field_(Metro_Transit_station)> <http://dbpedia.org/ontology/owningOrganisation> ?x . ?x <http://dbpedia.org/property/headquarters> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Target_Field_station"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Target_Field_station> -> \"owner\" -> \"headquarters location\""
        ],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?headquarters WHERE {\n  <http://dbpedia.org/resource/Target_Field_station> \"owner\" ?owner .\n  ?owner \"headquarters location\" ?headquarters .\n}"
    },
    {
        "question": "What is the nationality of Aishath Saffa ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Aishath_Saffa> <http://dbpedia.org/property/nationality> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Aishath_Saffa"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Aishath_Saffa> -> \"nationality\""
        ],
        "paths": "<http://dbpedia.org/resource/Aishath_Saffa> -> \"nationality\"",
        "generated_query": "SELECT DISTINCT ?nationality WHERE {\n  {\n    <http://dbpedia.org/resource/Aishath_Saffa> <http://dbpedia.org/ontology/nationality> ?nationality .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Aishath_Saffa> <http://dbpedia.org/property/nationality> ?nationality .\n  }\n}"
    },
    {
        "question": "who was the president under whom winston bryant served as a lieutenant?",
        "gold_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/lieutenant> <http://dbpedia.org/resource/Winston_Bryant> } ",
        "entities": [
            "http://dbpedia.org/resource/Lieutenant",
            "http://dbpedia.org/resource/Winston_Bryant"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Winston_Bryant> -> <http://dbpedia.org/resource/Lieutenant>"
        ],
        "paths": "<http://dbpedia.org/resource/Winston_Bryant> -> <http://dbpedia.org/resource/Lieutenant>",
        "generated_query": "SELECT DISTINCT ?country ?militaryBranch WHERE {\n  <http://dbpedia.org/resource/Winston_Bryant> <http://dbpedia.org/ontology/country> ?country .\n  <http://dbpedia.org/resource/Winston_Bryant> <http://dbpedia.org/ontology/militaryBranch> ?militaryBranch .\n}"
    },
    {
        "question": "What are the bands associated with the artists of My Favorite Girl  ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/My_Favorite_Girl_(Dave_Hollister_song)> <http://dbpedia.org/property/artist> ?x . ?x <http://dbpedia.org/ontology/associatedBand> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/My_Favorite"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/My_Favorite> -> ARTIST -> BAND"
        ],
        "paths": "<http://dbpedia.org/resource/My_Favorite> -> ARTIST -> BAND",
        "generated_query": "SELECT DISTINCT ?band WHERE {\n  <http://dbpedia.org/resource/My_Favorite> <http://dbpedia.org/ontology/associatedMusicalArtist> ?artist .\n  \n  {\n    ?artist <http://dbpedia.org/ontology/associatedMusicalArtist> ?band .\n  }\n  UNION\n  {\n    ?artist <http://dbpedia.org/property/associatedActs> ?band .\n  }\n  UNION\n  {\n    ?artist <http://dbpedia.org/ontology/associatedBand> ?band .\n  }\n  \n  FILTER(?band != ?artist)\n}"
    },
    {
        "question": "On what subjects was Broca's Brain written?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Broca's_Brain> <http://dbpedia.org/property/subject> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Broca's_Brain"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Broca's_Brain> -> \"subject\""
        ],
        "paths": "<http://dbpedia.org/resource/Broca's_Brain> -> \"subject\"",
        "generated_query": "SELECT DISTINCT ?subjectOrField WHERE {\n  {\n    <http://dbpedia.org/resource/Broca's_Brain> <http://dbpedia.org/property/subject> ?subjectOrField .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Broca's_Brain> <http://dbpedia.org/property/subject> ?subject .\n    ?subject <http://dbpedia.org/ontology/field> ?subjectOrField .\n  }\n}"
    },
    {
        "question": "Which parent organization of GetTV is also the label of next thing ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Next_Thing> <http://dbpedia.org/ontology/recordLabel> ?uri. <http://dbpedia.org/resource/GetTV> <http://dbpedia.org/ontology/parentOrganisation> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Next_plc",
            "http://dbpedia.org/resource/Get_(TV_network)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Get_(TV_network)> -> <http://dbpedia.org/resource/Next_plc>"
        ],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?parent WHERE {\n  <http://dbpedia.org/resource/Get_(TV_network)> <http://dbpedia.org/ontology/parentCompany> ?parent .\n  ?parent <http://www.w3.org/2000/01/rdf-schema#label> ?parentLabel .\n  <http://dbpedia.org/resource/Next_plc> <http://www.w3.org/2000/01/rdf-schema#label> ?nextLabel .\n  FILTER (lcase(str(?parentLabel)) = lcase(str(?nextLabel)))\n}"
    },
    {
        "question": "Which teams have used the stadium whose architect was Populous ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/architect> <http://dbpedia.org/resource/Populous_(company)> . ?x <http://dbpedia.org/ontology/tenant> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Stadium>}",
        "entities": [
            "http://dbpedia.org/resource/Optimates_and_populares"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Optimates_and_populares> -> \"STADIUM\""
        ],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?team WHERE {\n  ?stadium <http://dbpedia.org/ontology/architect> <http://dbpedia.org/resource/Populous_(company)> .\n  \n  {\n    ?stadium <http://dbpedia.org/ontology/tenant> ?team .\n  }\n  UNION\n  {\n    ?team <http://dbpedia.org/ontology/homeStadium> ?stadium .\n  }\n  UNION\n  {\n    ?stadium <http://dbpedia.org/property/usedBy> ?team .\n  }\n}"
    },
    {
        "question": "Name the route end of the North-South Transport Corridor and Mumbai Vadodara Expressway?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/North\u2013South_Transport_Corridor> <http://dbpedia.org/ontology/routeEnd> ?uri. <http://dbpedia.org/resource/Mumbai_Vadodara_Expressway> <http://dbpedia.org/ontology/routeEnd> ?uri . }",
        "entities": [
            "http://dbpedia.org/resource/Ahmedabad\u2013Vadodara_Expressway",
            "http://dbpedia.org/resource/North\u2013South_and_East\u2013West_Corridor"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Ahmedabad\u2013Vadodara_Expressway> -> \"route end\"",
            "<http://dbpedia.org/resource/North\u2013South_and_East\u2013West_Corridor> -> \"route end\""
        ],
        "paths": "<http://dbpedia.org/resource/North\u2013South_and_East\u2013West_Corridor> -> \"route end\"",
        "generated_query": "SELECT DISTINCT ?route ?routeEnd WHERE {\n  {\n    VALUES ?route { \n      <http://dbpedia.org/resource/North\u2013South_and_East\u2013West_Corridor> \n      <http://dbpedia.org/resource/Ahmedabad\u2013Vadodara_Expressway> \n    }\n    ?route <http://dbpedia.org/property/terminusA> ?routeEnd .\n  }\n  UNION\n  {\n    VALUES ?route { \n      <http://dbpedia.org/resource/North\u2013South_and_East\u2013West_Corridor> \n      <http://dbpedia.org/resource/Ahmedabad\u2013Vadodara_Expressway> \n    }\n    ?route <http://dbpedia.org/property/terminusB> ?routeEnd .\n  }\n}"
    },
    {
        "question": "Is Albert P Clark buried in Colorado?",
        "gold_query": "ASK WHERE { <http://dbpedia.org/resource/Albert_P._Clark> <http://dbpedia.org/property/placeofburial> <http://dbpedia.org/resource/Colorado> }",
        "entities": [
            "http://dbpedia.org/resource/Colorado",
            "http://dbpedia.org/resource/Albert_P._Clark"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Albert_P._Clark> -> <http://dbpedia.org/resource/Colorado>"
        ],
        "paths": "<http://dbpedia.org/resource/Albert_P._Clark> -> <http://dbpedia.org/resource/Colorado>",
        "generated_query": "ASK WHERE {\n  {\n    <http://dbpedia.org/resource/Albert_P._Clark> <http://dbpedia.org/ontology/restingPlace> <http://dbpedia.org/resource/Colorado> .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Albert_P._Clark> <http://dbpedia.org/property/placeofburial> <http://dbpedia.org/resource/Colorado> .\n  }\n}"
    },
    {
        "question": "Which hockey team is head coached by Bill Peters?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/headCoach> <http://dbpedia.org/resource/Bill_Peters_(ice_hockey)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/HockeyTeam>}",
        "entities": [
            "http://dbpedia.org/resource/Bill_Peters_(ice_hockey)",
            "http://dbpedia.org/resource/Field_hockey"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Bill_Peters_(ice_hockey)> -> HOCKEY_TEAM"
        ],
        "paths": "<http://dbpedia.org/resource/Bill_Peters_(ice_hockey)> -> HOCKEY_TEAM",
        "generated_query": "SELECT DISTINCT ?team WHERE {\n  ?team <http://dbpedia.org/property/headCoach> <http://dbpedia.org/resource/Bill_Peters_(ice_hockey)> .\n}"
    },
    {
        "question": "Count the number of religions followed by the alumini of Ananda College.",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Ananda_College> . ?x <http://dbpedia.org/ontology/religion> ?uri  . }",
        "entities": [
            "http://dbpedia.org/resource/Ananda_College",
            "http://dbpedia.org/resource/Roman_naming_conventions"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Ananda_College> -> ALUMNI -> \"religion\""
        ],
        "paths": "<http://dbpedia.org/resource/Ananda_College> -> ALUMNI -> \"religion\"",
        "generated_query": "SELECT (COUNT(DISTINCT ?religion) AS ?religionCount)\nWHERE {\n  <http://dbpedia.org/resource/Ananda_College> <http://dbpedia.org/ontology/alumni> ?alumniList .\n  ?alumniList <http://dbpedia.org/ontology/wikiPageWikiLink> ?alumnus .\n  {\n    ?alumnus <http://dbpedia.org/ontology/religion> ?religion .\n  }\n  UNION\n  {\n    ?alumnus <http://dbpedia.org/property/religion> ?religion .\n  }\n}"
    },
    {
        "question": "Which team did Wilfred McDonalds and Cam Plante play for?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Wilfred_McDonald> <http://dbpedia.org/property/playedFor> ?uri. <http://dbpedia.org/resource/Cam_Plante> <http://dbpedia.org/property/playedFor> ?uri . }",
        "entities": [
            "http://dbpedia.org/resource/Cam_Plante",
            "http://dbpedia.org/resource/Wilfred_McDonald"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Wilfred_McDonald> -> TEAM",
            "<http://dbpedia.org/resource/Cam_Plante> -> TEAM"
        ],
        "paths": "<http://dbpedia.org/resource/Wilfred_McDonald> -> TEAM, <http://dbpedia.org/resource/Cam_Plante> -> TEAM",
        "generated_query": "SELECT DISTINCT ?team WHERE {\n  {\n    <http://dbpedia.org/resource/Wilfred_McDonald> <http://dbpedia.org/property/playedFor> ?team .\n  }\n  UNION\n  {\n    <http://dbpedia.org/resource/Cam_Plante> <http://dbpedia.org/ontology/formerTeam> ?team .\n  }\n}"
    },
    {
        "question": "What are the television shows whose network's stockholder is Warner Bros. Television?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/owner> <http://dbpedia.org/resource/Warner_Bros._Television> . ?uri <http://dbpedia.org/ontology/network> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "entities": [
            "http://dbpedia.org/resource/Warner_Bros._Television_Studios"
        ],
        "classes": [],
        "relations": [
            "TELEVISION_SHOW -> NETWORK -> <http://dbpedia.org/resource/Warner_Bros._Television_Studios>"
        ],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?show WHERE {\n  ?show <http://dbpedia.org/ontology/network> ?network .\n  ?network <http://dbpedia.org/ontology/stockholder> <http://dbpedia.org/resource/Warner_Bros._Television_Studios> .\n}"
    },
    {
        "question": "Name the Fox TV show judged by Rand Jackson ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/judges> <http://dbpedia.org/resource/Randy_Jackson> . ?uri <http://dbpedia.org/property/channel> <http://dbpedia.org/resource/Fox_Broadcasting_Company>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}",
        "entities": [
            "http://dbpedia.org/resource/Fox_Broadcasting_Company",
            "http://dbpedia.org/resource/Randy_Jackson"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Fox_Broadcasting_Company> -> <http://dbpedia.org/resource/Randy_Jackson>"
        ],
        "paths": "<http://dbpedia.org/resource/Fox_Broadcasting_Company> -> <http://dbpedia.org/resource/Randy_Jackson>",
        "generated_query": "SELECT DISTINCT ?showName WHERE {\n  ?show <http://dbpedia.org/ontology/channel> <http://dbpedia.org/resource/Fox_Broadcasting_Company> .\n  ?show <http://dbpedia.org/ontology/showJudge> <http://dbpedia.org/resource/Randy_Jackson> .\n  ?show <http://www.w3.org/2000/01/rdf-schema#label> ?showName .\n  FILTER (lang(?showName) = \"en\")\n}"
    },
    {
        "question": "What is the total number of software whose programming language is C++ and operating system is Microsoft Windows?",
        "gold_query": " SELECT DISTINCT (COUNT(?uri) as ?c) WHERE {?uri <http://dbpedia.org/ontology/programmingLanguage> <http://dbpedia.org/resource/C++> . ?uri <http://dbpedia.org/ontology/operatingSystem> <http://dbpedia.org/resource/Microsoft_Windows> } ",
        "entities": [
            "http://dbpedia.org/resource/Programming_language",
            "http://dbpedia.org/resource/Microsoft_Windows",
            "http://dbpedia.org/resource/Software",
            "http://dbpedia.org/resource/Operating_system",
            "http://dbpedia.org/resource/C++"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Software> -> <http://dbpedia.org/resource/Programming_language> -> <http://dbpedia.org/resource/C++>",
            "<http://dbpedia.org/resource/Software> -> <http://dbpedia.org/resource/Operating_system> -> <http://dbpedia.org/resource/Microsoft_Windows>",
            "<http://dbpedia.org/resource/Software> -> \"total number\""
        ],
        "paths": "<http://dbpedia.org/resource/Software> -> <http://dbpedia.org/resource/Programming_language> -> <http://dbpedia.org/resource/C++>, <http://dbpedia.org/resource/Software> -> <http://dbpedia.org/resource/Operating_system> -> <http://dbpedia.org/resource/Microsoft_Windows>, <http://dbpedia.org/resource/Software> -> \"total number\"",
        "generated_query": "SELECT (COUNT(DISTINCT ?software) AS ?totalSoftware)\nWHERE {\n  ?software <http://purl.org/linguistics/gold/hypernym> <http://dbpedia.org/resource/Software> .\n  ?software <http://dbpedia.org/property/programmingLanguage> <http://dbpedia.org/resource/C++> .\n  ?software <http://dbpedia.org/property/operatingSystem> <http://dbpedia.org/resource/Microsoft_Windows> .\n}"
    },
    {
        "question": "Name the city of Phil-Ellena ?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Phil-Ellena> <http://dbpedia.org/ontology/city> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Helena\u2013West_Helena,_Arkansas"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Helena\u2013West_Helena,_Arkansas> -> \"city\""
        ],
        "paths": "<http://dbpedia.org/resource/Helena\u2013West_Helena,_Arkansas> -> \"city\"",
        "generated_query": "SELECT DISTINCT ?cityName WHERE {\n  <http://dbpedia.org/resource/Helena\u2013West_Helena,_Arkansas> <http://www.w3.org/2000/01/rdf-schema#label> ?cityName .\n}"
    },
    {
        "question": "how many companies are located in a spanish speaking region?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/ontology/language> <http://dbpedia.org/resource/Spanish_language> . ?uri <http://dbpedia.org/ontology/location> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>}",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT (COUNT(DISTINCT ?company) AS ?count)\nWHERE {\n  # No triples provided to match companies or locations\n}"
    },
    {
        "question": "What is the combatant of the Northwest Indian War and also the ethnic group of the Linda Hogan ",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Northwest_Indian_War> <http://dbpedia.org/property/combatant> ?uri. <http://dbpedia.org/resource/Linda_Hogan> <http://dbpedia.org/property/ethnicity> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Northwest_Indian_War",
            "http://dbpedia.org/resource/Linda_Hogan_(writer)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Northwest_Indian_War> -> <http://dbpedia.org/ontology/Combatant>",
            "<http://dbpedia.org/resource/Linda_Hogan_(writer)> -> <http://dbpedia.org/ontology/EthnicGroup>"
        ],
        "paths": "<http://dbpedia.org/resource/Linda_Hogan_(writer)> -> <http://dbpedia.org/ontology/EthnicGroup>",
        "generated_query": "SELECT DISTINCT ?combatant WHERE {\n  <http://dbpedia.org/resource/Northwest_Indian_War> <http://dbpedia.org/ontology/Combatant> ?combatant .\n\n  <http://dbpedia.org/resource/Linda_Hogan_(writer)> <http://dbpedia.org/ontology/wikiPageRedirects> ?person .\n  ?person <http://dbpedia.org/ontology/ethnicity> ?combatant .\n  \n  ?combatant <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/EthnicGroup> .\n}"
    },
    {
        "question": "Which airlines fly to Gimhae International Airport?",
        "gold_query": " SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/targetAirport> <http://dbpedia.org/resource/Gimhae_International_Airport> } ",
        "entities": [
            "http://dbpedia.org/resource/Gimhae_International_Airport"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Gimhae_International_Airport> -> AIRLINE"
        ],
        "paths": "<http://dbpedia.org/resource/Gimhae_International_Airport> -> AIRLINE",
        "generated_query": "SELECT DISTINCT ?airline WHERE {\n  ?airline <http://dbpedia.org/ontology/targetAirport> <http://dbpedia.org/resource/Gimhae_International_Airport> .\n}"
    },
    {
        "question": "GetTV is owned by which organisation?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/GetTV> <http://dbpedia.org/ontology/parentOrganisation> ?uri } ",
        "entities": [
            "http://dbpedia.org/resource/Get_(TV_network)"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Get_(TV_network)> -> \"owner\""
        ],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?owner WHERE {\n  <http://dbpedia.org/resource/Get_(TV_network)> <http://dbpedia.org/ontology/owner> ?owner .\n}"
    },
    {
        "question": "Name the islands that belong to the archipelago whose largest city is Papeete?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/largestCity> <http://dbpedia.org/resource/Papeete> . ?uri <http://dbpedia.org/property/archipelago> ?x  . }",
        "entities": [
            "http://dbpedia.org/resource/Papeete"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Papeete> -> ARCHIPELAGO -> ISLANDS"
        ],
        "paths": "<http://dbpedia.org/resource/Papeete> -> ARCHIPELAGO -> ISLANDS",
        "generated_query": "SELECT DISTINCT ?island WHERE {\n  ?archipelago <http://dbpedia.org/ontology/largestCity> <http://dbpedia.org/resource/Papeete> .\n  \n  {\n    ?archipelago <http://dbpedia.org/property/majorIslands> ?island .\n  }\n  UNION\n  {\n    ?archipelago <http://dbpedia.org/ontology/majorIsland> ?island .\n  }\n  UNION\n  {\n    ?island <http://dbpedia.org/ontology/archipelago> ?archipelago .\n  }\n}"
    },
    {
        "question": "In which team did Dave Bing and Ron Reed started their basketball career?",
        "gold_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dave_Bing> <http://dbpedia.org/property/draftTeam> ?uri. <http://dbpedia.org/resource/Ron_Reed> <http://dbpedia.org/property/draftTeam> ?uri . }",
        "entities": [
            "http://dbpedia.org/resource/Dave_Bing",
            "http://dbpedia.org/resource/Basketball",
            "http://dbpedia.org/resource/Ron_Reed"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Ron_Reed> -> <http://dbpedia.org/resource/Basketball>",
            "<http://dbpedia.org/resource/Dave_Bing> -> <http://dbpedia.org/resource/Basketball>"
        ],
        "paths": "<http://dbpedia.org/resource/Ron_Reed> -> <http://dbpedia.org/resource/Basketball>, <http://dbpedia.org/resource/Dave_Bing> -> <http://dbpedia.org/resource/Basketball>",
        "generated_query": "SELECT DISTINCT ?team WHERE {\n  <http://dbpedia.org/resource/Dave_Bing> <http://dbpedia.org/property/draftTeam> ?team .\n  <http://dbpedia.org/resource/Ron_Reed> <http://dbpedia.org/property/draftTeam> ?team .\n  ?team <http://dbpedia.org/ontology/wikiPageWikiLink> <http://dbpedia.org/resource/Basketball> .\n}"
    },
    {
        "question": "List the settlements area whose province is Metropolitan City of Venice ?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/province> <http://dbpedia.org/resource/Metropolitan_City_of_Venice>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Settlement>}",
        "entities": [
            "http://dbpedia.org/resource/Metropolitan_City_of_Venice"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Metropolitan_City_of_Venice> -> SETTLEMENT"
        ],
        "paths": "<http://dbpedia.org/resource/Metropolitan_City_of_Venice> -> SETTLEMENT",
        "generated_query": "SELECT DISTINCT ?settlement WHERE {\n  ?settlement <http://dbpedia.org/ontology/province> <http://dbpedia.org/resource/Metropolitan_City_of_Venice> .\n}"
    },
    {
        "question": "What was recorded by Live in Detroit, MI and also palce of birth of the Bodhin Kjolhede?",
        "gold_query": " SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Live_in_Detroit,_MI> <http://dbpedia.org/ontology/recordedIn> ?uri. <http://dbpedia.org/resource/Bodhin_Kjolhede> <http://dbpedia.org/property/placeOfBirth> ?uri} ",
        "entities": [
            "http://dbpedia.org/resource/Bodhin_Kjolhede"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Bodhin_Kjolhede> -> \"place of birth\""
        ],
        "paths": "<http://dbpedia.org/resource/Bodhin_Kjolhede> -> \"place of birth\"",
        "generated_query": "SELECT DISTINCT ?placeOfBirth WHERE {\n  <http://dbpedia.org/resource/Bodhin_Kjolhede> <http://dbpedia.org/property/placeOfBirth> ?placeOfBirth .\n}"
    },
    {
        "question": "From how many different institutes have the members of Judge Advocate General's Corps graduated?",
        "gold_query": "SELECT DISTINCT (COUNT(?uri) as ?c) WHERE { ?x <http://dbpedia.org/ontology/militaryRank> <http://dbpedia.org/resource/Judge_Advocate_General's_Corps,_United_States_Army> . ?x <http://dbpedia.org/ontology/almaMater> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/EducationalInstitution>}",
        "entities": [
            "http://dbpedia.org/resource/Judge_Advocate_General's_Corps"
        ],
        "classes": [],
        "relations": [
            "<http://dbpedia.org/resource/Judge_Advocate_General's_Corps> -> \"graduated from\""
        ],
        "paths": "<http://dbpedia.org/resource/Judge_Advocate_General's_Corps> -> \"graduated from\"",
        "generated_query": "SELECT (COUNT(DISTINCT ?almaMater) AS ?count)\nWHERE {\n  ?member <http://dbpedia.org/ontology/militaryUnit> <http://dbpedia.org/resource/Judge_Advocate_General's_Corps> .\n  {\n    ?member <http://dbpedia.org/ontology/almaMater> ?almaMater .\n  }\n  UNION\n  {\n    ?member <http://dbpedia.org/property/almaMater> ?almaMater .\n  }\n}"
    },
    {
        "question": "Whos a famous relative of anne spielberg?",
        "gold_query": "SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/relation> <http://dbpedia.org/resource/Anne_Spielberg>  . }",
        "entities": [],
        "classes": [],
        "relations": [],
        "paths": "",
        "generated_query": "SELECT DISTINCT ?relative WHERE {\n  <http://dbpedia.org/resource/Anne_Spielberg> ?p ?relative .\n}"
    }
]